[(0.260000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.054503589112656806, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 1, 'regressor:gradient_boosting:max_features': 0.8590225932353865, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 17, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 394, 'regressor:gradient_boosting:subsample': 0.16087235038178166},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.200000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 93.88926016043875, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.27098321248088497, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 13, 'regressor:extra_trees:min_samples_split': 20, 'regressor:extra_trees:n_estimators': 100},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.120000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:liblinear_svr:C': 3087.0091399083326, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.0013963459393455458, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 0.0036296193499746067},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.100000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'friedman_mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.21475056951308075, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 4, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 9, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:gradient_boosting:learning_rate': 0.9869682231103877, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.6742759256035967, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 6, 'regressor:gradient_boosting:min_samples_split': 10, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 447, 'regressor:gradient_boosting:subsample': 0.5455937913609146, 'regressor:gradient_boosting:alpha': 0.8718644520469754},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.060000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:ard_regression:alpha_1': 0.0005141773115733895, 'regressor:ard_regression:alpha_2': 3.2280508576043108e-09, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.891887535915178e-05, 'regressor:ard_regression:lambda_2': 1.507872426004613e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 11332.577220460575, 'regressor:ard_regression:tol': 0.0011298975091125953, 'rescaling:quantile_transformer:n_quantiles': 1469, 'rescaling:quantile_transformer:output_distribution': 'normal'},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.060000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'False', 'regressor:gradient_boosting:learning_rate': 0.12495077613818571, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 8, 'regressor:gradient_boosting:max_features': 0.8722554597184652, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 2, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 348, 'regressor:gradient_boosting:subsample': 0.7020901690763439, 'rescaling:quantile_transformer:n_quantiles': 986, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'regressor:gradient_boosting:alpha': 0.9106462940473345},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.040000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.25618468262772953, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 9, 'regressor:random_forest:min_samples_split': 7, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.9125139963788349, 'rescaling:robust_scaler:q_min': 0.18382136204973273},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.040000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:liblinear_svr:C': 6.641892754932826, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.05806397181136592, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 0.00020457652943023575, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0037517186030263687},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'minmax', 'preprocessor:select_percentile_regression:percentile': 38.74311356212923, 'preprocessor:select_percentile_regression:score_func': 'f_regression', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.8589805376836355, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 4, 'regressor:extra_trees:min_samples_split': 4, 'regressor:extra_trees:n_estimators': 100},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'preprocessor:feature_agglomeration:affinity': 'cosine', 'preprocessor:feature_agglomeration:linkage': 'average', 'preprocessor:feature_agglomeration:n_clusters': 235, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:gradient_boosting:learning_rate': 0.8613142903191536, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 1, 'regressor:gradient_boosting:max_features': 0.591634251382333, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 3, 'regressor:gradient_boosting:min_samples_split': 2, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 104, 'regressor:gradient_boosting:subsample': 0.12568305567275714},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:gradient_boosting:learning_rate': 0.7499374977910571, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.27837181694628144, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 8, 'regressor:gradient_boosting:min_samples_split': 6, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 439, 'regressor:gradient_boosting:subsample': 0.8059062389128734, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.27696499159707655, 'regressor:gradient_boosting:alpha': 0.946217109414769},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'regressor:gradient_boosting:learning_rate': 0.1100299533445282, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 6, 'regressor:gradient_boosting:max_features': 0.4543358319536316, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 2, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 293, 'regressor:gradient_boosting:subsample': 0.2116782147637242, 'regressor:gradient_boosting:alpha': 0.9574665585682921},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 25, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:gradient_boosting:learning_rate': 0.9869682231103877, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.6742759256035967, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 6, 'regressor:gradient_boosting:min_samples_split': 10, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 447, 'regressor:gradient_boosting:subsample': 0.5455937913609146, 'regressor:gradient_boosting:alpha': 0.8718644520469754},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ard_regression:alpha_1': 4.448305327115311e-05, 'regressor:ard_regression:alpha_2': 0.000112914413021726, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.0847871463163737e-09, 'regressor:ard_regression:lambda_2': 3.7936435307263186e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 35831.58634144192, 'regressor:ard_regression:tol': 3.869948335291496e-05, 'rescaling:robust_scaler:q_max': 0.8481206426775242, 'rescaling:robust_scaler:q_min': 0.2723027972074355},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
]{'mean_test_score': array([ 5.49579018e-01,  5.33695984e-01, -7.23128391e-01,  5.01520078e-01,
        4.98086454e-01,  0.00000000e+00, -6.70775750e-02,  4.78948337e-01,
        5.08951265e-01,  5.53033705e-01,  5.84810815e-01,  5.67565183e-01,
        5.76868169e-01,  2.21079392e-02,  3.71804172e-01, -4.04928618e-01,
        4.87656510e-01,  5.81458253e-01,  5.79290105e-01,  0.00000000e+00,
        4.72067780e-01, -1.89706375e-01,  0.00000000e+00,  0.00000000e+00,
        5.09719754e-01,  5.53480262e-01,  5.77000085e-01,  5.08959490e-01,
        9.53946131e-02,  5.10553012e-01, -2.42971126e+12,  0.00000000e+00,
        5.71195745e-01,  0.00000000e+00, -3.29528822e+03,  4.55063545e-01,
        4.26598349e-01,  1.95720344e-01,  5.86835577e-01, -1.55299766e+00,
        0.00000000e+00, -2.27027857e+00, -6.61047821e-02,  4.81350223e-01,
        4.35816094e-01, -6.23972158e+15,  0.00000000e+00, -3.34152800e+05,
        0.00000000e+00, -2.51558607e+08,  3.24815869e-01,  0.00000000e+00,
        5.92281231e-01,  3.42382041e-01,  4.52907357e-01, -6.23972158e+15,
        2.08369082e-01, -2.56871041e+03,  3.29730437e-02,  3.79164121e-01,
        5.46206549e-01,  1.34650176e-01,  4.30544785e-01,  5.22909122e-01,
        5.30339402e-01, -2.58341717e+01,  0.00000000e+00, -1.11464979e-04,
        1.06061922e-01, -3.11694831e+07,  5.70937714e-01,  4.03608086e-01,
        5.79277994e-01, -1.83268841e+07,  4.78254238e-01,  0.00000000e+00]), 'mean_fit_time': array([8.79009962e+00, 3.71272194e+01, 9.25306082e-01, 4.31914091e+00,
       1.50939925e+01, 1.29088981e+01, 1.19756041e+01, 1.10337724e+02,
       1.40513682e+00, 1.40800519e+01, 7.57735229e+00, 9.09508536e+01,
       4.91860747e+00, 1.84995437e+00, 4.30352116e+00, 1.96673682e+01,
       4.48277545e+00, 1.79667877e+02, 1.78288269e+00, 3.06519068e+03,
       8.21070081e+02, 3.15044994e+02, 2.32432795e+00, 2.44112502e+03,
       5.42381096e+00, 1.70420313e+02, 1.03836868e+03, 2.24221349e+00,
       8.27945709e+00, 2.26524973e+00, 1.31857252e+01, 3.26712894e+00,
       1.54600995e+01, 3.75084209e+00, 6.12964606e+00, 2.16837149e+02,
       2.80591202e+00, 1.02753186e+01, 5.23954487e+00, 9.39216399e+00,
       5.30905404e+01, 1.58699756e+01, 3.71278048e+00, 2.63930774e+00,
       2.90130046e+02, 2.41611686e+01, 3.19460011e+00, 1.68271143e+01,
       5.58538434e+02, 1.50908091e+01, 3.71465993e+00, 5.50599217e+00,
       5.08148408e+00, 1.50068202e+01, 5.05228591e+00, 1.78648002e+01,
       4.00495172e+00, 1.12661474e+02, 1.69067464e+01, 9.11880946e+00,
       1.15370017e+02, 7.60635853e+00, 2.51689744e+00, 2.95714972e+02,
       5.95458124e+01, 5.58494043e+00, 3.07224342e+02, 8.68393707e+00,
       2.76903685e+03, 8.01820850e+00, 6.52070934e+02, 6.58294249e+00,
       5.09174342e+01, 1.20512471e+01, 1.05807893e+01, 1.10562379e+01]), 'params': [{'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'False', 'regressor:gradient_boosting:learning_rate': 0.12495077613818571, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 8, 'regressor:gradient_boosting:max_features': 0.8722554597184652, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 2, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 348, 'regressor:gradient_boosting:subsample': 0.7020901690763439, 'rescaling:quantile_transformer:n_quantiles': 986, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'regressor:gradient_boosting:alpha': 0.9106462940473345}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.013857361155308811}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.24856760535207326, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 1.5037210102001854, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 8, 'regressor:adaboost:n_estimators': 261, 'rescaling:quantile_transformer:n_quantiles': 394, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'kernel_pca', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'minmax', 'preprocessor:kernel_pca:kernel': 'cosine', 'preprocessor:kernel_pca:n_components': 767, 'regressor:liblinear_svr:C': 0.5099778470305494, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.9268429858026814, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 1.181996106594007e-05}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:libsvm_svr:C': 0.820936401111195, 'regressor:libsvm_svr:epsilon': 0.011820422524358349, 'regressor:libsvm_svr:kernel': 'poly', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 0.003169502327187765, 'regressor:libsvm_svr:coef0': 0.9772471747872822, 'regressor:libsvm_svr:degree': 2, 'regressor:libsvm_svr:gamma': 8.106199652464777e-05}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.0586242400320872, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.7599903533119043, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 12, 'regressor:gradient_boosting:min_samples_split': 8, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 151, 'regressor:gradient_boosting:subsample': 0.8814337953141652, 'preprocessor:fast_ica:n_components': 118, 'regressor:gradient_boosting:alpha': 0.919354614298524}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 3, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 14, 'preprocessor:random_trees_embedding:min_samples_split': 3, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 97, 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.20790228782418774, 'regressor:xgradient_boosting:colsample_bytree': 0.6964083329091856, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.016016142945594468, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 19, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 6.688757380096515e-09, 'regressor:xgradient_boosting:reg_lambda': 4.600483498731673e-08, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.22194664159330835, 'rescaling:robust_scaler:q_max': 0.8748314006225273, 'rescaling:robust_scaler:q_min': 0.23302727781111088, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0026456078235203894, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.17201186931366286, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'kitchen_sinks', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:kitchen_sinks:gamma': 0.0002004386539633764, 'preprocessor:kitchen_sinks:n_components': 180, 'regressor:liblinear_svr:C': 1.0771991217065953, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.2600285104116056, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 3.2505146403668175e-05}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'gbtree', 'regressor:xgradient_boosting:colsample_bylevel': 0.7383412784981492, 'regressor:xgradient_boosting:colsample_bytree': 0.5253831500231004, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.012183185082319749, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 8, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.0482669890270454e-08, 'regressor:xgradient_boosting:reg_lambda': 7.969590330955319e-06, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.9283260557293931, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00024764950918479536}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 93.88926016043875, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.27098321248088497, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 13, 'regressor:extra_trees:min_samples_split': 20, 'regressor:extra_trees:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'robust_scaler', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.8414232728771526, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 11, 'regressor:random_forest:min_samples_split': 10, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8900420591871744, 'rescaling:robust_scaler:q_min': 0.12509983051963838}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.7569578828616917, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 8, 'regressor:random_forest:min_samples_split': 11, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 197, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:sgd:alpha': 2.0720677001315385e-05, 'regressor:sgd:average': 'True', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'invscaling', 'regressor:sgd:loss': 'squared_epsilon_insensitive', 'regressor:sgd:penalty': 'l2', 'regressor:sgd:tol': 0.050274601185389366, 'rescaling:quantile_transformer:n_quantiles': 35, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0014819399290182586, 'regressor:sgd:epsilon': 0.029255700648187773, 'regressor:sgd:eta0': 1.7396222617246842e-05, 'regressor:sgd:power_t': 0.35575081657915064}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'decision_tree', 'rescaling:__choice__': 'standardize', 'regressor:decision_tree:criterion': 'mae', 'regressor:decision_tree:max_depth_factor': 1.654834184627851, 'regressor:decision_tree:max_features': 1.0, 'regressor:decision_tree:max_leaf_nodes': 'None', 'regressor:decision_tree:min_impurity_decrease': 0.0, 'regressor:decision_tree:min_samples_leaf': 5, 'regressor:decision_tree:min_samples_split': 2, 'regressor:decision_tree:min_weight_fraction_leaf': 0.0}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'rescaling:robust_scaler:q_max': 0.9173661901802149, 'rescaling:robust_scaler:q_min': 0.2617414935794013}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mae', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.9924688362059735, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 20, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 19, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:ridge_regression:alpha': 4.376835566368771, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 2.7247217678252046e-05, 'rescaling:robust_scaler:q_max': 0.8220266156642828, 'rescaling:robust_scaler:q_min': 0.2824824052902768}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.18670021571617046, 'regressor:xgradient_boosting:colsample_bytree': 0.7396025751456639, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.011370953397634255, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 5, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.8482595949495837e-08, 'regressor:xgradient_boosting:reg_lambda': 0.0015998122041927785, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.2662368959251735, 'rescaling:robust_scaler:q_max': 0.7604296240253136, 'rescaling:robust_scaler:q_min': 0.037820680702001085, 'regressor:xgradient_boosting:normalize_type': 'tree', 'regressor:xgradient_boosting:rate_drop': 0.06306101221344254, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'minmax', 'preprocessor:select_percentile_regression:percentile': 38.74311356212923, 'preprocessor:select_percentile_regression:score_func': 'f_regression', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.8589805376836355, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 4, 'regressor:extra_trees:min_samples_split': 4, 'regressor:extra_trees:n_estimators': 100}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.7851085868664173, 'preprocessor:pca:whiten': 'False', 'regressor:libsvm_svr:C': 14296.894431999228, 'regressor:libsvm_svr:epsilon': 0.11386736948981817, 'regressor:libsvm_svr:kernel': 'linear', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 4.017492099131629e-05, 'rescaling:robust_scaler:q_max': 0.9716519608171985, 'rescaling:robust_scaler:q_min': 0.20000229221013058, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.001521474918301074}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 5, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 3, 'preprocessor:random_trees_embedding:min_samples_split': 2, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 60, 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'mae', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.8178369589072358, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 7, 'regressor:extra_trees:min_samples_split': 19, 'regressor:extra_trees:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8242926454702025, 'rescaling:robust_scaler:q_min': 0.14545328535824323}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:liblinear_svr:C': 660.9102652694099, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.0017522384004310311, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 0.006319545792493687, 'rescaling:quantile_transformer:n_quantiles': 955, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 54, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'rescaling:quantile_transformer:n_quantiles': 646, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:ard_regression:alpha_1': 0.0001058284913424068, 'regressor:ard_regression:alpha_2': 9.613911379511229e-07, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 8.291246150228873e-06, 'regressor:ard_regression:lambda_2': 1.257215941011812e-05, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 11379.22764988494, 'regressor:ard_regression:tol': 0.01842007020656501}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.15918994930520844, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.7535406518729681, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 195, 'regressor:gradient_boosting:subsample': 0.4955741598265856, 'preprocessor:fast_ica:n_components': 1011}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.01643731891217812, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 4, 'regressor:gradient_boosting:max_features': 0.820946896296057, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 14, 'regressor:gradient_boosting:min_samples_split': 5, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 364, 'regressor:gradient_boosting:subsample': 0.6260485148163489, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.39630992475266075}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.16286302166148908, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 2, 'regressor:random_forest:min_samples_split': 8, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:liblinear_svr:C': 3087.0091399083326, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.0013963459393455458, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 0.0036296193499746067}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 88.51568792079165, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:ridge_regression:alpha': 0.004557508487979205, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.014136586381792625}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:liblinear_svr:C': 6.641892754932826, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.05806397181136592, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 0.00020457652943023575, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0037517186030263687}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8486219960024226, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.854801719198111, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 389, 'regressor:gradient_boosting:subsample': 0.019340413217419968, 'preprocessor:fast_ica:n_components': 1142, 'regressor:gradient_boosting:alpha': 0.9634180741572713}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.32389778006721076, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.5212092327505907, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.5869218056735809, 'rescaling:robust_scaler:q_max': 0.959290729223909, 'rescaling:robust_scaler:q_min': 0.12409049088929947, 'preprocessor:fast_ica:n_components': 1421, 'regressor:gradient_boosting:alpha': 0.9842611484874115}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 267, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:gradient_boosting:learning_rate': 0.02895165017514208, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.5361345207630502, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 2, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 392, 'regressor:gradient_boosting:subsample': 0.23101616506345574}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.13948830201390364, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.5212092327505907, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.41345464560091627, 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 1421, 'regressor:gradient_boosting:alpha': 0.9842611484874115}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.9222528108151589, 'preprocessor:pca:whiten': 'False', 'regressor:gradient_boosting:learning_rate': 0.6805532803718212, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 6, 'regressor:gradient_boosting:max_features': 0.3617703809052838, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 3, 'regressor:gradient_boosting:min_samples_split': 9, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 204, 'regressor:gradient_boosting:subsample': 0.12728945457497592, 'rescaling:quantile_transformer:n_quantiles': 56, 'rescaling:quantile_transformer:output_distribution': 'normal', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.005082456335625295}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'logcosh', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.20150316752822223, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.9623187102113202, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 9, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 143, 'regressor:gradient_boosting:subsample': 0.6249727084724891, 'preprocessor:fast_ica:n_components': 1067}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.5923389332585389, 'preprocessor:pca:whiten': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 6, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00015553112665842747}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'regressor:gradient_boosting:learning_rate': 0.1100299533445282, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 6, 'regressor:gradient_boosting:max_features': 0.4543358319536316, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 2, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 293, 'regressor:gradient_boosting:subsample': 0.2116782147637242, 'regressor:gradient_boosting:alpha': 0.9574665585682921}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'robust_scaler', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.5148104984651863, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 5, 'regressor:extra_trees:min_samples_split': 10, 'regressor:extra_trees:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.9399843291111637, 'rescaling:robust_scaler:q_min': 0.2729683319659096}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.06908064681479241, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.854801719198111, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 389, 'regressor:gradient_boosting:subsample': 0.019340413217419968, 'preprocessor:fast_ica:n_components': 1142, 'regressor:gradient_boosting:alpha': 0.9634180741572713}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:sgd:alpha': 4.030639659342745e-06, 'regressor:sgd:average': 'True', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'constant', 'regressor:sgd:loss': 'squared_epsilon_insensitive', 'regressor:sgd:penalty': 'l1', 'regressor:sgd:tol': 0.02176530787243175, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.050371496029170515, 'regressor:sgd:epsilon': 0.00459995113113189, 'regressor:sgd:eta0': 5.871104258362839e-07}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.32389778006721076, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.1552387338665141, 'preprocessor:fast_ica:n_components': 1421, 'regressor:gradient_boosting:alpha': 0.9842611484874115}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'none', 'preprocessor:pca:keep_variance': 0.5105675929335457, 'preprocessor:pca:whiten': 'True', 'regressor:adaboost:learning_rate': 0.037048336695677274, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 2, 'regressor:adaboost:n_estimators': 476}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'preprocessor:feature_agglomeration:affinity': 'cosine', 'preprocessor:feature_agglomeration:linkage': 'average', 'preprocessor:feature_agglomeration:n_clusters': 235, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:gradient_boosting:learning_rate': 0.8613142903191536, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 1, 'regressor:gradient_boosting:max_features': 0.591634251382333, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 3, 'regressor:gradient_boosting:min_samples_split': 2, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 104, 'regressor:gradient_boosting:subsample': 0.12568305567275714}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:select_percentile_regression:percentile': 17.978085170806185, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:ard_regression:alpha_1': 0.0003316290720366683, 'regressor:ard_regression:alpha_2': 1.987422074257595e-06, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.394363508576049e-08, 'regressor:ard_regression:lambda_2': 8.978474215048388e-10, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 4337.75199243961, 'regressor:ard_regression:tol': 1.387991003027353e-05, 'rescaling:robust_scaler:q_max': 0.7480708001778895, 'rescaling:robust_scaler:q_min': 0.022775942230044737}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.7454738701989538, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 7, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.1552387338665141, 'preprocessor:fast_ica:n_components': 1421}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:adaboost:learning_rate': 0.18477441778876663, 'regressor:adaboost:loss': 'exponential', 'regressor:adaboost:max_depth': 2, 'regressor:adaboost:n_estimators': 138, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0013753747530966347, 'preprocessor:fast_ica:n_components': 1955}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8697817025749829, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.2579755878679174, 'preprocessor:fast_ica:n_components': 1421, 'regressor:gradient_boosting:alpha': 0.9842611484874115}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gaussian_process', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gaussian_process:alpha': 0.0009089390574444633, 'regressor:gaussian_process:thetaL': 1.050607496571297e-09, 'regressor:gaussian_process:thetaU': 2134.0188587797415}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:gradient_boosting:learning_rate': 0.668021777928266, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 4, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.1552387338665141}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'standardize', 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 10, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 6, 'preprocessor:random_trees_embedding:min_samples_split': 7, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 12, 'regressor:extra_trees:bootstrap': 'True', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.753682756055819, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 12, 'regressor:extra_trees:min_samples_split': 15, 'regressor:extra_trees:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8697817025749829, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 400, 'regressor:gradient_boosting:subsample': 0.48733812795328757, 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 1421}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.25618468262772953, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 9, 'regressor:random_forest:min_samples_split': 7, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.9125139963788349, 'rescaling:robust_scaler:q_min': 0.18382136204973273}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:k_nearest_neighbors:n_neighbors': 8, 'regressor:k_nearest_neighbors:p': 1, 'regressor:k_nearest_neighbors:weights': 'distance', 'rescaling:robust_scaler:q_max': 0.7867329152795975, 'rescaling:robust_scaler:q_min': 0.1281519956350336, 'preprocessor:fast_ica:n_components': 1247}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.35712364362844207, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 15, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 8, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:gradient_boosting:learning_rate': 0.989289782261214, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.18285080688771035, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 11, 'regressor:gradient_boosting:min_samples_split': 5, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 442, 'regressor:gradient_boosting:subsample': 0.8204707669751287, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.11431499612635923}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.7454738701989538, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 7, 'regressor:gradient_boosting:min_samples_split': 19, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.1552387338665141, 'preprocessor:fast_ica:n_components': 719}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'friedman_mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.6365361722679587, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 20, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 4, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 0.9474179411933741, 'regressor:adaboost:loss': 'square', 'regressor:adaboost:max_depth': 3, 'regressor:adaboost:n_estimators': 86, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00415262269272443}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'logcosh', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.7970487322389767, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 5, 'regressor:gradient_boosting:max_features': 0.6733474540447072, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 11, 'regressor:gradient_boosting:min_samples_split': 10, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 99, 'regressor:gradient_boosting:subsample': 0.01809400680894916, 'preprocessor:fast_ica:n_components': 1506}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ridge_regression:alpha': 0.090361024314881, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.0006902351812412328}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'friedman_mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.21475056951308075, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 4, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 9, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:gradient_boosting:learning_rate': 0.9869682231103877, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.6742759256035967, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 6, 'regressor:gradient_boosting:min_samples_split': 10, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 447, 'regressor:gradient_boosting:subsample': 0.5455937913609146, 'regressor:gradient_boosting:alpha': 0.8718644520469754}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:adaboost:learning_rate': 0.03593279390451159, 'regressor:adaboost:loss': 'square', 'regressor:adaboost:max_depth': 9, 'regressor:adaboost:n_estimators': 476, 'rescaling:quantile_transformer:n_quantiles': 981, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.3562706339686528}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 25, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:gradient_boosting:learning_rate': 0.9869682231103877, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.6742759256035967, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 6, 'regressor:gradient_boosting:min_samples_split': 10, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 447, 'regressor:gradient_boosting:subsample': 0.5455937913609146, 'regressor:gradient_boosting:alpha': 0.8718644520469754}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:pca:keep_variance': 0.7328000234937424, 'preprocessor:pca:whiten': 'False', 'regressor:libsvm_svr:C': 0.13012616046928419, 'regressor:libsvm_svr:epsilon': 0.7336338150987282, 'regressor:libsvm_svr:kernel': 'rbf', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 0.0791987461862043, 'rescaling:quantile_transformer:n_quantiles': 537, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'regressor:libsvm_svr:degree': 5, 'regressor:libsvm_svr:gamma': 0.009225709118457024}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'logcosh', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.016673271182265283, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 4, 'regressor:gradient_boosting:max_features': 0.4485711454189324, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 408, 'regressor:gradient_boosting:subsample': 0.4013622817598292, 'rescaling:robust_scaler:q_max': 0.9043510337852125, 'rescaling:robust_scaler:q_min': 0.2071233926640852, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0026696014080696325, 'preprocessor:fast_ica:n_components': 1445, 'regressor:gradient_boosting:alpha': 0.8364412846384294}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'nystroem_sampler', 'regressor:__choice__': 'liblinear_svr', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:nystroem_sampler:kernel': 'poly', 'preprocessor:nystroem_sampler:n_components': 548, 'regressor:liblinear_svr:C': 423.3139150271852, 'regressor:liblinear_svr:dual': 'False', 'regressor:liblinear_svr:epsilon': 0.004181025610294682, 'regressor:liblinear_svr:fit_intercept': 'True', 'regressor:liblinear_svr:intercept_scaling': 1, 'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive', 'regressor:liblinear_svr:tol': 7.541331143468576e-05, 'rescaling:robust_scaler:q_max': 0.9082213935380206, 'rescaling:robust_scaler:q_min': 0.1011534403048781, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.003848220129118363, 'preprocessor:nystroem_sampler:coef0': -0.5635875916549429, 'preprocessor:nystroem_sampler:degree': 2, 'preprocessor:nystroem_sampler:gamma': 0.0002833100598519474}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.32389778006721076, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.08669085477044232, 'preprocessor:fast_ica:n_components': 1421, 'regressor:gradient_boosting:alpha': 0.9842611484874115}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'minmax', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:ard_regression:alpha_1': 0.000872069677924718, 'regressor:ard_regression:alpha_2': 1.074726223728226e-09, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.2752642126994305e-10, 'regressor:ard_regression:lambda_2': 1.3960721926669215e-05, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 4827.016319188811, 'regressor:ard_regression:tol': 9.539909427631058e-05, 'preprocessor:fast_ica:n_components': 635}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'kernel_pca', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:kernel_pca:kernel': 'sigmoid', 'preprocessor:kernel_pca:n_components': 1386, 'regressor:sgd:alpha': 0.03329669002348633, 'regressor:sgd:average': 'False', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'constant', 'regressor:sgd:loss': 'huber', 'regressor:sgd:penalty': 'elasticnet', 'regressor:sgd:tol': 0.004833889103476559, 'preprocessor:kernel_pca:coef0': -0.2741229301906798, 'regressor:sgd:epsilon': 0.014388450285237301, 'regressor:sgd:eta0': 3.1297412377292837e-07, 'regressor:sgd:l1_ratio': 1.1565377641513165e-09}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ard_regression:alpha_1': 4.448305327115311e-05, 'regressor:ard_regression:alpha_2': 0.000112914413021726, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.0847871463163737e-09, 'regressor:ard_regression:lambda_2': 3.7936435307263186e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 35831.58634144192, 'regressor:ard_regression:tol': 3.869948335291496e-05, 'rescaling:robust_scaler:q_max': 0.8481206426775242, 'rescaling:robust_scaler:q_min': 0.2723027972074355}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8486219960024226, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.854801719198111, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 389, 'regressor:gradient_boosting:subsample': 0.019340413217419968, 'preprocessor:fast_ica:n_components': 1142}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:ard_regression:alpha_1': 0.0005141773115733895, 'regressor:ard_regression:alpha_2': 3.2280508576043108e-09, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.891887535915178e-05, 'regressor:ard_regression:lambda_2': 1.507872426004613e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 11332.577220460575, 'regressor:ard_regression:tol': 0.0011298975091125953, 'rescaling:quantile_transformer:n_quantiles': 1469, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:gradient_boosting:learning_rate': 0.7499374977910571, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.27837181694628144, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 8, 'regressor:gradient_boosting:min_samples_split': 6, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 439, 'regressor:gradient_boosting:subsample': 0.8059062389128734, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.27696499159707655, 'regressor:gradient_boosting:alpha': 0.946217109414769}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.054503589112656806, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 1, 'regressor:gradient_boosting:max_features': 0.8590225932353865, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 17, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 394, 'regressor:gradient_boosting:subsample': 0.16087235038178166}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.738717249252324, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.854801719198111, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 440, 'regressor:gradient_boosting:subsample': 0.019340413217419968, 'preprocessor:fast_ica:n_components': 1142}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'minmax', 'preprocessor:select_percentile_regression:percentile': 41.457315930958096, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:k_nearest_neighbors:n_neighbors': 27, 'regressor:k_nearest_neighbors:p': 1, 'regressor:k_nearest_neighbors:weights': 'distance'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8029017428879586, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 8, 'regressor:gradient_boosting:max_features': 0.6948094852049389, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 14, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 407, 'regressor:gradient_boosting:subsample': 0.5864217528568141, 'preprocessor:fast_ica:n_components': 1421, 'regressor:gradient_boosting:alpha': 0.9842611484874115}], 'rank_test_scores': array([14, 16, 64, 23, 24, 47, 61, 27, 22, 13,  3, 11,  8, 46, 37, 63, 25,
        4,  5, 47, 29, 62, 47, 47, 20, 12,  7, 21, 44, 19, 74, 47,  9, 47,
       69, 30, 34, 41,  2, 65, 47, 66, 60, 26, 32, 75, 47, 70, 47, 73, 39,
       47,  1, 38, 31, 75, 40, 68, 45, 36, 15, 42, 33, 18, 17, 67, 47, 59,
       43, 72, 10, 35,  6, 71, 28, 47]), 'status': ['Success', 'Success', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Success', 'Success', 'Crash', 'Timeout', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Crash', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Success', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Memout', 'Success', 'Success', 'Crash', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout'], 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'no_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_imputation:strategy': masked_array(data=['mean', 'median', 'most_frequent', 'most_frequent',
                   'most_frequent', 'mean', 'most_frequent', 'mean',
                   'median', 'median', 'mean', 'most_frequent',
                   'most_frequent', 'median', 'most_frequent', 'mean',
                   'most_frequent', 'median', 'median', 'most_frequent',
                   'median', 'mean', 'most_frequent', 'most_frequent',
                   'most_frequent', 'median', 'most_frequent', 'median',
                   'median', 'median', 'median', 'median', 'mean',
                   'median', 'median', 'median', 'most_frequent', 'mean',
                   'mean', 'median', 'mean', 'median', 'median',
                   'most_frequent', 'mean', 'median', 'most_frequent',
                   'median', 'median', 'median', 'median', 'median',
                   'most_frequent', 'most_frequent', 'mean', 'median',
                   'most_frequent', 'median', 'mean', 'median', 'median',
                   'median', 'most_frequent', 'mean', 'median', 'median',
                   'median', 'mean', 'most_frequent', 'median', 'mean',
                   'mean', 'most_frequent', 'median', 'mean', 'median'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'fast_ica', 'no_preprocessing',
                   'extra_trees_preproc_for_regression', 'kernel_pca',
                   'fast_ica', 'fast_ica', 'random_trees_embedding',
                   'kitchen_sinks', 'no_preprocessing',
                   'select_percentile_regression', 'no_preprocessing',
                   'no_preprocessing', 'feature_agglomeration',
                   'no_preprocessing', 'polynomial',
                   'extra_trees_preproc_for_regression', 'polynomial',
                   'select_percentile_regression', 'pca',
                   'random_trees_embedding', 'polynomial', 'fast_ica',
                   'no_preprocessing', 'fast_ica', 'polynomial',
                   'polynomial', 'no_preprocessing',
                   'select_percentile_regression', 'no_preprocessing',
                   'fast_ica', 'fast_ica', 'feature_agglomeration',
                   'fast_ica', 'pca', 'fast_ica', 'pca',
                   'no_preprocessing', 'no_preprocessing', 'fast_ica',
                   'polynomial', 'fast_ica', 'pca',
                   'feature_agglomeration',
                   'select_percentile_regression', 'fast_ica', 'fast_ica',
                   'fast_ica', 'polynomial', 'fast_ica',
                   'random_trees_embedding', 'fast_ica',
                   'no_preprocessing', 'fast_ica',
                   'extra_trees_preproc_for_regression', 'fast_ica',
                   'extra_trees_preproc_for_regression', 'fast_ica',
                   'polynomial', 'extra_trees_preproc_for_regression',
                   'fast_ica', 'feature_agglomeration', 'pca', 'fast_ica',
                   'nystroem_sampler', 'fast_ica', 'fast_ica',
                   'kernel_pca', 'polynomial', 'fast_ica',
                   'no_preprocessing', 'no_preprocessing', 'polynomial',
                   'fast_ica', 'select_percentile_regression', 'fast_ica'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U34'), 'param_regressor:__choice__': masked_array(data=['random_forest', 'gradient_boosting',
                   'k_nearest_neighbors', 'adaboost', 'liblinear_svr',
                   'libsvm_svr', 'gradient_boosting',
                   'xgradient_boosting', 'liblinear_svr',
                   'xgradient_boosting', 'extra_trees', 'random_forest',
                   'random_forest', 'sgd', 'decision_tree',
                   'k_nearest_neighbors', 'ridge_regression',
                   'xgradient_boosting', 'extra_trees', 'libsvm_svr',
                   'extra_trees', 'liblinear_svr', 'k_nearest_neighbors',
                   'ard_regression', 'gradient_boosting',
                   'gradient_boosting', 'random_forest', 'liblinear_svr',
                   'ridge_regression', 'liblinear_svr',
                   'gradient_boosting', 'gradient_boosting',
                   'gradient_boosting', 'gradient_boosting',
                   'gradient_boosting', 'gradient_boosting',
                   'k_nearest_neighbors', 'gradient_boosting',
                   'extra_trees', 'gradient_boosting', 'sgd',
                   'gradient_boosting', 'adaboost', 'gradient_boosting',
                   'ard_regression', 'gradient_boosting', 'adaboost',
                   'gradient_boosting', 'gaussian_process',
                   'gradient_boosting', 'extra_trees',
                   'gradient_boosting', 'random_forest',
                   'k_nearest_neighbors', 'gradient_boosting',
                   'gradient_boosting', 'adaboost', 'gradient_boosting',
                   'ridge_regression', 'gradient_boosting', 'adaboost',
                   'gradient_boosting', 'libsvm_svr', 'gradient_boosting',
                   'liblinear_svr', 'gradient_boosting', 'ard_regression',
                   'sgd', 'ard_regression', 'gradient_boosting',
                   'ard_regression', 'gradient_boosting',
                   'gradient_boosting', 'gradient_boosting',
                   'k_nearest_neighbors', 'gradient_boosting'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U19'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'quantile_transformer', 'normalize',
                   'quantile_transformer', 'minmax', 'none', 'normalize',
                   'robust_scaler', 'standardize', 'normalize',
                   'standardize', 'robust_scaler', 'minmax',
                   'quantile_transformer', 'standardize', 'robust_scaler',
                   'robust_scaler', 'robust_scaler', 'minmax',
                   'robust_scaler', 'robust_scaler',
                   'quantile_transformer', 'quantile_transformer',
                   'normalize', 'standardize', 'normalize', 'minmax',
                   'minmax', 'normalize', 'minmax', 'minmax',
                   'robust_scaler', 'normalize', 'quantile_transformer',
                   'quantile_transformer', 'normalize', 'standardize',
                   'standardize', 'robust_scaler', 'minmax', 'none',
                   'none', 'none', 'minmax', 'robust_scaler',
                   'standardize', 'normalize', 'none', 'minmax',
                   'standardize', 'standardize', 'quantile_transformer',
                   'robust_scaler', 'robust_scaler', 'normalize',
                   'standardize', 'none', 'standardize', 'normalize',
                   'standardize', 'quantile_transformer', 'standardize',
                   'quantile_transformer', 'robust_scaler',
                   'robust_scaler', 'none', 'minmax', 'minmax',
                   'robust_scaler', 'minmax', 'quantile_transformer',
                   'normalize', 'none', 'minmax', 'minmax', 'standardize'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', 'False', 'True', 'False', --, --, --, 'True',
                   'False', 'True', 'False', --, --, 'True', --, --, --,
                   --, --, 'True', --, --, --, 'False', 'False', 'True',
                   --, 'False', 'False', 'True', 'False', --, 'False', --,
                   'True', 'False', 'True', --, --, 'False', 'True', --,
                   --, --, --, --, 'True', --, --, --, --, --, 'False',
                   --, 'True', --, 'True', 'False', 'False', --, 'True',
                   --, --, 'True', 'True', --, --, 'False', --, 'False',
                   'False', 'True', --, 'False', --, --],
             mask=[False, False, False, False,  True,  True,  True, False,
                   False, False, False,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True,  True,  True, False,
                   False, False,  True, False, False, False, False,  True,
                   False,  True, False, False, False,  True,  True, False,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                   False, False, False,  True, False,  True,  True, False,
                   False,  True,  True, False,  True, False, False, False,
                    True, False,  True,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_preprocessor:extra_trees_preproc_for_regression:bootstrap': masked_array(data=[--, --, --, 'True', --, --, --, --, --, --, --, --, --,
                   --, --, --, 'True', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, 'False', --, --, 'False', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:criterion': masked_array(data=[--, --, --, 'mse', --, --, --, --, --, --, --, --, --,
                   --, --, --, 'mae', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'mse', --, 'friedman_mse', --, --, 'friedman_mse', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_depth': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, --, --, --,
                   --, --, --, 'None', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, 'None', --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_features': masked_array(data=[--, --, --, 0.24856760535207326, --, --, --, --, --,
                   --, --, --, --, --, --, --, 0.9924688362059735, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 0.35712364362844207, --,
                   0.6365361722679587, --, --, 0.21475056951308075, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, --, --, --,
                   --, --, --, 'None', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, 'None', --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': masked_array(data=[--, --, --, 1.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, 20.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   15.0, --, 20.0, --, --, 4.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_split': masked_array(data=[--, --, --, 2.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, 19.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   8.0, --, 4.0, --, --, 9.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': masked_array(data=[--, --, --, 0.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, 0.0, --, --, 0.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:n_estimators': masked_array(data=[--, --, --, 100.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, 100.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, 100.0, --, --, 100.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, 'deflation', --, --, --, 'deflation', 'deflation',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'parallel', --, 'deflation', --, --, --, --, --,
                   'deflation', 'parallel', --, 'parallel', --,
                   'deflation', --, --, --, 'deflation', --, 'parallel',
                   --, --, --, 'parallel', 'parallel', 'parallel', --,
                   'parallel', --, 'parallel', --, 'deflation', --,
                   'parallel', --, 'deflation', --, --, 'parallel', --,
                   --, 'deflation', --, 'parallel', 'deflation', --, --,
                   'deflation', --, --, --, 'deflation', --, 'parallel'],
             mask=[ True, False,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True,  True,  True,  True, False, False,
                    True, False,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True,  True, False,
                    True, False, False,  True,  True, False,  True,  True,
                    True, False,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, 'cube', --, --, --, 'exp', 'cube', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 'exp', --,
                   'exp', --, --, --, --, --, 'exp', 'exp', --, 'exp', --,
                   'logcosh', --, --, --, 'exp', --, 'exp', --, --, --,
                   'exp', 'cube', 'exp', --, 'exp', --, 'exp', --, 'cube',
                   --, 'exp', --, 'logcosh', --, --, 'exp', --, --,
                   'logcosh', --, 'exp', 'cube', --, --, 'exp', --, --,
                   --, 'exp', --, 'exp'],
             mask=[ True, False,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True,  True,  True,  True, False, False,
                    True, False,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True,  True, False,
                    True, False, False,  True,  True, False,  True,  True,
                    True, False,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, 'False', --, --, --, 'False', 'True', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, 'True', --, --, --, --, --, 'True',
                   'True', --, 'True', --, 'True', --, --, --, 'True', --,
                   'True', --, --, --, 'True', 'True', 'True', --,
                   'False', --, 'True', --, 'True', --, 'True', --,
                   'True', --, --, 'False', --, --, 'True', --, 'True',
                   'True', --, --, 'True', --, --, --, 'True', --, 'True'],
             mask=[ True, False,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True,  True,  True,  True, False, False,
                    True, False,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True,  True, False,
                    True, False, False,  True,  True, False,  True,  True,
                    True, False,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'euclidean', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'euclidean', --, --,
                   --, --, --, --, --, --, --, --, 'cosine', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'euclidean', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'ward', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'ward', --, --, --, --, --, --,
                   --, --, --, --, 'average', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'ward', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   197.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 267.0, --, --, --, --, --, --,
                   --, --, --, --, 235.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 25.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'mean', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'mean', --, --, --, --, --, --,
                   --, --, --, --, 'mean', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'mean', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, 'cosine', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'sigmoid', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, 767.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 1386.0,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, 0.0002004386539633764,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, 180.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'poly', --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 548.0, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.7851085868664173, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   0.9222528108151589, --, 0.5923389332585389, --, --, --,
                   --, --, 0.5105675929335457, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.7328000234937424, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'False', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'False', --, 'False',
                   --, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 2.0, --, 2.0, --, --, --, 3.0, --, --, --, 2.0,
                   3.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 3.0, --, --, --, --, --, --, --, 3.0, --, --, --,
                   --, --, --, --, --, --, 3.0, --, --, --, --, --, --,
                   --, --, --, 3.0, --, --, --, 2.0, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True, False,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, 'False', --, --, --, 'False', --, --,
                   --, 'False', 'False', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --, --, 'False',
                   --, --, --, --, --, --, --, --, --, 'False', --, --,
                   --, 'True', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True, False,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'False', --, 'False', --, --, --, 'True', --, --,
                   --, 'False', 'False', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --, --, 'True',
                   --, --, --, --, --, --, --, --, --, 'True', --, --, --,
                   'False', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True, False,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, --, 'False', --, --, --, --,
                   --, --, --, --, --, --, --, --, 'True', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 'True', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, --, 3.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, 5.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 10.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'None', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, 14.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, 3.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 6.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, 3.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, 2.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 7.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, 1.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, 1.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 1.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, --, 97.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, 60.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 12.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:percentile': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   93.88926016043875, --, --, --, --, --, --, --,
                   38.74311356212923, --, --, --, --, --, --, --, --, --,
                   88.51568792079165, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 17.978085170806185, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   41.457315930958096, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:score_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'mutual_info',
                   --, --, --, --, --, --, --, 'f_regression', --, --, --,
                   --, --, --, --, --, --, 'mutual_info', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   'mutual_info', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'mutual_info', --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:learning_rate': masked_array(data=[--, --, --, 1.5037210102001854, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.037048336695677274, --, --, --,
                   0.18477441778876663, --, --, --, --, --, --, --, --,
                   --, 0.9474179411933741, --, --, --,
                   0.03593279390451159, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:loss': masked_array(data=[--, --, --, 'linear', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'linear', --, --, --, 'exponential', --, --,
                   --, --, --, --, --, --, --, 'square', --, --, --,
                   'square', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:max_depth': masked_array(data=[--, --, --, 8.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 2.0, --, --, --, 2.0, --, --, --, --, --, --, --,
                   --, --, 3.0, --, --, --, 9.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:n_estimators': masked_array(data=[--, --, --, 261.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 476.0, --, --, --, 138.0, --, --, --, --, --, --,
                   --, --, --, 86.0, --, --, --, 476.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_1': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   0.0001058284913424068, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0003316290720366683, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.000872069677924718, --, 4.448305327115311e-05, --,
                   0.0005141773115733895, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_2': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   9.613911379511229e-07, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   1.987422074257595e-06, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.074726223728226e-09, --, 0.000112914413021726, --,
                   3.2280508576043108e-09, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'True', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'True', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'True',
                   --, 'True', --, 'True', --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ard_regression:lambda_1': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   8.291246150228873e-06, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   4.394363508576049e-08, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.2752642126994305e-10, --, 1.0847871463163737e-09, --,
                   4.891887535915178e-05, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:lambda_2': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   1.257215941011812e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   8.978474215048388e-10, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.3960721926669215e-05, --, 3.7936435307263186e-08, --,
                   1.507872426004613e-08, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:n_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 300.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 300.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 300.0,
                   --, 300.0, --, 300.0, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:threshold_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 11379.22764988494,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 4337.75199243961, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 4827.016319188811, --,
                   35831.58634144192, --, 11332.577220460575, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   0.01842007020656501, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   1.387991003027353e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   9.539909427631058e-05, --, 3.869948335291496e-05, --,
                   0.0011298975091125953, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'mae', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.654834184627851, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   5.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   2.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'False', --,
                   --, --, --, --, --, --, 'False', --, 'False', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'False', --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'friedman_mse',
                   --, --, --, --, --, --, --, 'friedman_mse', --, 'mae',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'friedman_mse', --, --, --, --, --, --, --,
                   --, --, --, --, 'friedman_mse', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'None', --, --,
                   --, --, --, --, --, 'None', --, 'None', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.27098321248088497, --, --, --, --, --, --, --,
                   0.8589805376836355, --, 0.8178369589072358, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.5148104984651863, --, --, --, --, --, --, --, --, --,
                   --, --, 0.753682756055819, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'None', --, --,
                   --, --, --, --, --, 'None', --, 'None', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.0, --, --,
                   --, --, --, --, --, 0.0, --, 0.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 0.0,
                   --, --, --, --, --, --, --, --, --, --, --, 0.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 13.0, --, --,
                   --, --, --, --, --, 4.0, --, 7.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 5.0,
                   --, --, --, --, --, --, --, --, --, --, --, 12.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 20.0, --, --,
                   --, --, --, --, --, 4.0, --, 19.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 10.0,
                   --, --, --, --, --, --, --, --, --, --, --, 15.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 100.0, --, --,
                   --, --, --, --, --, 100.0, --, 100.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.0009089390574444633, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaL': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 1.050607496571297e-09, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaU': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 2134.0188587797415, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:learning_rate': masked_array(data=[--, 0.12495077613818571, --, --, --, --,
                   0.0586242400320872, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.15918994930520844,
                   0.01643731891217812, --, --, --, --,
                   0.8486219960024226, 0.32389778006721076,
                   0.02895165017514208, 0.13948830201390364,
                   0.6805532803718212, 0.20150316752822223, --,
                   0.1100299533445282, --, 0.06908064681479241, --,
                   0.32389778006721076, --, 0.8613142903191536, --,
                   0.7454738701989538, --, 0.8697817025749829, --,
                   0.668021777928266, --, 0.8697817025749829, --, --,
                   0.989289782261214, 0.7454738701989538, --,
                   0.7970487322389767, --, 0.9869682231103877, --,
                   0.9869682231103877, --, 0.016673271182265283, --,
                   0.32389778006721076, --, --, --, 0.8486219960024226,
                   --, 0.7499374977910571, 0.054503589112656806,
                   0.738717249252324, --, 0.8029017428879586],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:loss': masked_array(data=[--, 'huber', --, --, --, --, 'quantile', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'ls', 'ls', --, --, --, --, 'quantile', 'quantile',
                   'lad', 'quantile', 'lad', 'lad', --, 'quantile', --,
                   'quantile', --, 'quantile', --, 'lad', --, 'ls', --,
                   'quantile', --, 'ls', --, 'ls', --, --, 'lad', 'ls',
                   --, 'ls', --, 'huber', --, 'huber', --, 'huber', --,
                   'quantile', --, --, --, 'ls', --, 'huber', 'lad', 'ls',
                   --, 'quantile'],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:max_depth': masked_array(data=[--, 8.0, --, --, --, --, 9.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 2.0, 4.0,
                   --, --, --, --, 9.0, 10.0, 7.0, 10.0, 6.0, 7.0, --,
                   6.0, --, 9.0, --, 10.0, --, 1.0, --, 7.0, --, 10.0, --,
                   7.0, --, 10.0, --, --, 2.0, 7.0, --, 5.0, --, 2.0, --,
                   2.0, --, 4.0, --, 10.0, --, --, --, 9.0, --, 2.0, 1.0,
                   9.0, --, 8.0],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_features': masked_array(data=[--, 0.8722554597184652, --, --, --, --,
                   0.7599903533119043, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.7535406518729681,
                   0.820946896296057, --, --, --, --, 0.854801719198111,
                   0.5212092327505907, 0.5361345207630502,
                   0.5212092327505907, 0.3617703809052838,
                   0.9623187102113202, --, 0.4543358319536316, --,
                   0.854801719198111, --, 0.6948094852049389, --,
                   0.591634251382333, --, 0.6948094852049389, --,
                   0.6948094852049389, --, 0.6948094852049389, --,
                   0.6948094852049389, --, --, 0.18285080688771035,
                   0.6948094852049389, --, 0.6733474540447072, --,
                   0.6742759256035967, --, 0.6742759256035967, --,
                   0.4485711454189324, --, 0.6948094852049389, --, --, --,
                   0.854801719198111, --, 0.27837181694628144,
                   0.8590225932353865, 0.854801719198111, --,
                   0.6948094852049389],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_leaf_nodes': masked_array(data=[--, 'None', --, --, --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'None',
                   'None', --, --, --, --, 'None', 'None', 'None', 'None',
                   'None', 'None', --, 'None', --, 'None', --, 'None', --,
                   'None', --, 'None', --, 'None', --, 'None', --, 'None',
                   --, --, 'None', 'None', --, 'None', --, 'None', --,
                   'None', --, 'None', --, 'None', --, --, --, 'None', --,
                   'None', 'None', 'None', --, 'None'],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:min_impurity_decrease': masked_array(data=[--, 0.0, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 0.0, 0.0,
                   --, --, --, --, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, --, 0.0,
                   --, 0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0,
                   --, 0.0, --, --, 0.0, 0.0, --, 0.0, --, 0.0, --, 0.0,
                   --, 0.0, --, 0.0, --, --, --, 0.0, --, 0.0, 0.0, 0.0,
                   --, 0.0],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_leaf': masked_array(data=[--, 2.0, --, --, --, --, 12.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 16.0, 14.0,
                   --, --, --, --, 15.0, 16.0, 9.0, 16.0, 3.0, 9.0, --,
                   2.0, --, 15.0, --, 16.0, --, 3.0, --, 7.0, --, 16.0,
                   --, 4.0, --, 16.0, --, --, 11.0, 7.0, --, 11.0, --,
                   6.0, --, 6.0, --, 9.0, --, 16.0, --, --, --, 15.0, --,
                   8.0, 17.0, 15.0, --, 16.0],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_split': masked_array(data=[--, 19.0, --, --, --, --, 8.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 13.0, 5.0,
                   --, --, --, --, 18.0, 19.0, 2.0, 19.0, 9.0, 9.0, --,
                   20.0, --, 18.0, --, 19.0, --, 2.0, --, 19.0, --, 19.0,
                   --, 19.0, --, 19.0, --, --, 5.0, 19.0, --, 10.0, --,
                   10.0, --, 10.0, --, 20.0, --, 13.0, --, --, --, 18.0,
                   --, 6.0, 20.0, 18.0, --, 14.0],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, 0.0, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 0.0, 0.0,
                   --, --, --, --, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, --, 0.0,
                   --, 0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0,
                   --, 0.0, --, --, 0.0, 0.0, --, 0.0, --, 0.0, --, 0.0,
                   --, 0.0, --, 0.0, --, --, --, 0.0, --, 0.0, 0.0, 0.0,
                   --, 0.0],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:n_estimators': masked_array(data=[--, 348.0, --, --, --, --, 151.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 195.0,
                   364.0, --, --, --, --, 389.0, 407.0, 392.0, 407.0,
                   204.0, 143.0, --, 293.0, --, 389.0, --, 407.0, --,
                   104.0, --, 407.0, --, 407.0, --, 407.0, --, 400.0, --,
                   --, 442.0, 407.0, --, 99.0, --, 447.0, --, 447.0, --,
                   408.0, --, 407.0, --, --, --, 389.0, --, 439.0, 394.0,
                   440.0, --, 407.0],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:subsample': masked_array(data=[--, 0.7020901690763439, --, --, --, --,
                   0.8814337953141652, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.4955741598265856,
                   0.6260485148163489, --, --, --, --,
                   0.019340413217419968, 0.5869218056735809,
                   0.23101616506345574, 0.41345464560091627,
                   0.12728945457497592, 0.6249727084724891, --,
                   0.2116782147637242, --, 0.019340413217419968, --,
                   0.1552387338665141, --, 0.12568305567275714, --,
                   0.1552387338665141, --, 0.2579755878679174, --,
                   0.1552387338665141, --, 0.48733812795328757, --, --,
                   0.8204707669751287, 0.1552387338665141, --,
                   0.01809400680894916, --, 0.5455937913609146, --,
                   0.5455937913609146, --, 0.4013622817598292, --,
                   0.08669085477044232, --, --, --, 0.019340413217419968,
                   --, 0.8059062389128734, 0.16087235038178166,
                   0.019340413217419968, --, 0.5864217528568141],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False, False,  True,  True,  True,  True, False, False,
                   False, False, False, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True,  True, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True, False,  True, False,
                   False, False,  True, False],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, 1.0, --, --, --, --, --, --, 54.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 6.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   8.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 27.0, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:p': masked_array(data=[--, --, 2.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, 2.0, --, --, --, --, --, --, 2.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 2.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 1.0, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:weights': masked_array(data=[--, --, 'uniform', --, --, --, --, --, --, --, --, --,
                   --, --, --, 'uniform', --, --, --, --, --, --,
                   'uniform', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'uniform', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'distance', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'distance', --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:C': masked_array(data=[--, --, --, --, 0.5099778470305494, --, --, --,
                   1.0771991217065953, --, --, --, --, --, --, --, --, --,
                   --, --, --, 660.9102652694099, --, --, --, --, --,
                   3087.0091399083326, --, 6.641892754932826, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 423.3139150271852, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:liblinear_svr:dual': masked_array(data=[--, --, --, --, 'False', --, --, --, 'False', --, --,
                   --, --, --, --, --, --, --, --, --, --, 'False', --,
                   --, --, --, --, 'False', --, 'False', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'False', --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:epsilon': masked_array(data=[--, --, --, --, 0.9268429858026814, --, --, --,
                   0.2600285104116056, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.0017522384004310311, --, --, --, --, --,
                   0.0013963459393455458, --, 0.05806397181136592, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.004181025610294682, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:liblinear_svr:fit_intercept': masked_array(data=[--, --, --, --, 'True', --, --, --, 'True', --, --, --,
                   --, --, --, --, --, --, --, --, --, 'True', --, --, --,
                   --, --, 'True', --, 'True', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:intercept_scaling': masked_array(data=[--, --, --, --, 1.0, --, --, --, 1.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, 1.0, --, --, --, --,
                   --, 1.0, --, 1.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 1.0, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:liblinear_svr:loss': masked_array(data=[--, --, --, --, 'squared_epsilon_insensitive', --, --,
                   --, 'squared_epsilon_insensitive', --, --, --, --, --,
                   --, --, --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --, --, --,
                   'squared_epsilon_insensitive', --,
                   'squared_epsilon_insensitive', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:tol': masked_array(data=[--, --, --, --, 1.181996106594007e-05, --, --, --,
                   3.2505146403668175e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.006319545792493687, --, --, --, --,
                   --, 0.0036296193499746067, --, 0.00020457652943023575,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 7.541331143468576e-05, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:C': masked_array(data=[--, --, --, --, --, 0.820936401111195, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 14296.894431999228,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.13012616046928419, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:epsilon': masked_array(data=[--, --, --, --, --, 0.011820422524358349, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   0.11386736948981817, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.7336338150987282, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:kernel': masked_array(data=[--, --, --, --, --, 'poly', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'linear', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'rbf', --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:max_iter': masked_array(data=[--, --, --, --, --, -1.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, -1.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, -1.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:shrinking': masked_array(data=[--, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'True', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'True', --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:tol': masked_array(data=[--, --, --, --, --, 0.003169502327187765, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   4.017492099131629e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.0791987461862043, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, --, --, --, 'True',
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:criterion': masked_array(data=['mse', --, --, --, --, --, --, --, --, --, --, 'mae',
                   'friedman_mse', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'friedman_mse', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 'mse', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U12'), 'param_regressor:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, 'None',
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:max_features': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --, --,
                   0.8414232728771526, 0.7569578828616917, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   0.16286302166148908, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.25618468262772953, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, 'None',
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, 0.0, 0.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --, --, 11.0, 8.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   2.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   9.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, --, --, --, 10.0,
                   11.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 8.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   7.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, 0.0, 0.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, --, --, --, --, --, 100.0,
                   100.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 100.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 4.376835566368771, --, --, --, --, --, --, --,
                   --, --, --, --, 0.004557508487979205, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   0.090361024314881, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'True', --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 'True', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ridge_regression:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 2.7247217678252046e-05, --, --, --, --, --, --,
                   --, --, --, --, --, 0.014136586381792625, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0006902351812412328, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   2.0720677001315385e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 4.030639659342745e-06, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.03329669002348633,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'invscaling', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'constant', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'constant', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'squared_epsilon_insensitive',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   'huber', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'l2', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'l1', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'elasticnet', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.050274601185389366, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.02176530787243175, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.004833889103476559,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, 0.5, --, 0.5, --, --, --,
                   --, --, --, --, 0.5, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, 'dart', --, 'gbtree', --,
                   --, --, --, --, --, --, 'dart', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, 0.20790228782418774, --,
                   0.7383412784981492, --, --, --, --, --, --, --,
                   0.18670021571617046, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, 0.6964083329091856, --,
                   0.5253831500231004, --, --, --, --, --, --, --,
                   0.7396025751456639, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, 0.0, --, 0.0, --, --, --,
                   --, --, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, 0.016016142945594468, --,
                   0.012183185082319749, --, --, --, --, --, --, --,
                   0.011370953397634255, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, 0.0, --, 0.0, --, --, --,
                   --, --, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, 9.0, --, 10.0, --, --, --,
                   --, --, --, --, 9.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, 19.0, --, 8.0, --, --, --,
                   --, --, --, --, 5.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, 512.0, --, 512.0, --, --,
                   --, --, --, --, --, 512.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, 6.688757380096515e-09, --,
                   1.0482669890270454e-08, --, --, --, --, --, --, --,
                   1.8482595949495837e-08, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, 4.600483498731673e-08, --,
                   7.969590330955319e-06, --, --, --, --, --, --, --,
                   0.0015998122041927785, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, 1.0, --, 1.0, --, --, --,
                   --, --, --, --, 1.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, 0.22194664159330835, --,
                   0.9283260557293931, --, --, --, --, --, --, --,
                   0.2662368959251735, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, 986.0, --, 394.0, --, --, --, --, --, --, --, --,
                   --, 35.0, --, --, --, --, --, --, --, 955.0, 646.0, --,
                   --, --, --, --, --, --, --, --, --, 1000.0, 56.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 1000.0, --, --, --, --, --, --, --, --, 981.0, --,
                   537.0, --, --, --, --, --, --, --, 1469.0, --, --, --,
                   --, --],
             mask=[ True, False,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, 'uniform', --, 'uniform', --, --, --, --, --, --,
                   --, --, --, 'uniform', --, --, --, --, --, --, --,
                   'normal', 'normal', --, --, --, --, --, --, --, --, --,
                   --, 'uniform', 'normal', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'uniform', --, --,
                   --, --, --, --, --, --, 'uniform', --, 'uniform', --,
                   --, --, --, --, --, --, 'normal', --, --, --, --, --],
             mask=[ True, False,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --, --, 0.8748314006225273, --, --,
                   --, 0.8900420591871744, --, --, --, 0.9173661901802149,
                   0.8220266156642828, 0.7604296240253136, --,
                   0.9716519608171985, 0.8242926454702025, --, --, --, --,
                   --, --, --, --, --, --, 0.959290729223909, --, --, --,
                   --, --, --, 0.9399843291111637, --, --, --, --, --,
                   0.7480708001778895, --, --, --, --, --, --, --,
                   0.9125139963788349, 0.7867329152795975, --, --, --, --,
                   --, --, --, --, --, 0.9043510337852125,
                   0.9082213935380206, --, --, --, 0.8481206426775242, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False,  True,  True,  True, False,
                   False, False,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --, --, 0.23302727781111088, --,
                   --, --, 0.12509983051963838, --, --, --,
                   0.2617414935794013, 0.2824824052902768,
                   0.037820680702001085, --, 0.20000229221013058,
                   0.14545328535824323, --, --, --, --, --, --, --, --,
                   --, --, 0.12409049088929947, --, --, --, --, --, --,
                   0.2729683319659096, --, --, --, --, --,
                   0.022775942230044737, --, --, --, --, --, --, --,
                   0.18382136204973273, 0.1281519956350336, --, --, --,
                   --, --, --, --, --, --, 0.2071233926640852,
                   0.1011534403048781, --, --, --, 0.2723027972074355, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False,  True,  True,  True, False,
                   False, False,  True, False, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, 0.013857361155308811, --, --, --, --,
                   0.0026456078235203894, --, 0.00024764950918479536, --,
                   --, --, 0.0014819399290182586, --, --, --, --, --,
                   0.001521474918301074, --, --, --, --, --,
                   0.39630992475266075, --, --, --, 0.0037517186030263687,
                   --, --, --, --, 0.005082456335625295, --,
                   0.00015553112665842747, --, --, --,
                   0.050371496029170515, --, --, --, --, --,
                   0.0013753747530966347, --, --, --, --, --, --, --,
                   0.11431499612635923, --, 0.00415262269272443, --, --,
                   --, 0.3562706339686528, --, --, 0.0026696014080696325,
                   0.003848220129118363, --, --, --, --, --, --,
                   0.27696499159707655, --, --, --, --],
             mask=[False,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True, False,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True, False,
                   False,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, --, --, 118.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 1011.0, --,
                   --, --, --, --, 1142.0, 1421.0, --, 1421.0, --, 1067.0,
                   --, --, --, 1142.0, --, 1421.0, --, --, --, 1421.0,
                   1955.0, 1421.0, --, --, --, 1421.0, --, 1247.0, --,
                   719.0, --, 1506.0, --, --, --, --, --, 1445.0, --,
                   1421.0, 635.0, --, --, 1142.0, --, --, --, 1142.0, --,
                   1421.0],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False, False,
                    True, False,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True, False, False, False,
                    True,  True,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True, False, False,  True,  True, False,  True,  True,
                    True, False,  True, False],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   -0.2741229301906798, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, -0.5635875916549429,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 2.0, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.0002833100598519474,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:alpha': masked_array(data=[--, 0.9106462940473345, --, --, --, --,
                   0.919354614298524, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.9634180741572713, 0.9842611484874115, --,
                   0.9842611484874115, --, --, --, 0.9574665585682921, --,
                   0.9634180741572713, --, 0.9842611484874115, --, --, --,
                   --, --, 0.9842611484874115, --, --, --, --, --, --, --,
                   --, --, --, --, 0.8718644520469754, --,
                   0.8718644520469754, --, 0.8364412846384294, --,
                   0.9842611484874115, --, --, --, --, --,
                   0.946217109414769, --, --, --, 0.9842611484874115],
             mask=[ True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True, False,  True,  True,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:libsvm_svr:coef0': masked_array(data=[--, --, --, --, --, 0.9772471747872822, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:degree': masked_array(data=[--, --, --, --, --, 2.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 5.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:gamma': masked_array(data=[--, --, --, --, --, 8.106199652464777e-05, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   0.009225709118457024, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.029255700648187773, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.00459995113113189, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.014388450285237301,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.7396222617246842e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 5.871104258362839e-07, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 3.1297412377292837e-07,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   1.1565377641513165e-09, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.35575081657915064, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, 'forest', --, --, --, --,
                   --, --, --, --, --, 'tree', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, 0.17201186931366286, --,
                   --, --, --, --, --, --, --, --, 0.06306101221344254,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, 'weighted', --, --, --, --,
                   --, --, --, --, --, 'weighted', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32')}