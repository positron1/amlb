[(1.000000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
]{'mean_test_score': array([0.99915215, 0.        , 0.24974971, 0.41387055, 0.        ,
       0.        ]), 'mean_fit_time': array([19.65616798,  2.01599932,  2.44706583,  1.65523314,  0.72292948,
       54.06690097]), 'params': [{'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.8432107119703621, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 20, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 6, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:ard_regression:alpha_1': 0.0008247884157442895, 'regressor:ard_regression:alpha_2': 5.478709120134568e-10, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 0.00037131892110138477, 'regressor:ard_regression:lambda_2': 1.226057556458958e-05, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 7794.496820084062, 'regressor:ard_regression:tol': 1.6132698702915743e-05}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'decision_tree', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:pca:keep_variance': 0.6910589102563758, 'preprocessor:pca:whiten': 'False', 'regressor:decision_tree:criterion': 'friedman_mse', 'regressor:decision_tree:max_depth_factor': 0.5279964207035701, 'regressor:decision_tree:max_features': 1.0, 'regressor:decision_tree:max_leaf_nodes': 'None', 'regressor:decision_tree:min_impurity_decrease': 0.0, 'regressor:decision_tree:min_samples_leaf': 12, 'regressor:decision_tree:min_samples_split': 4, 'regressor:decision_tree:min_weight_fraction_leaf': 0.0}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:ridge_regression:alpha': 0.00022749800697443153, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 8.082236463045226e-05, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.000589188056877925}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'kernel_pca', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:kernel_pca:kernel': 'cosine', 'preprocessor:kernel_pca:n_components': 205, 'regressor:sgd:alpha': 1.9342589279446235e-05, 'regressor:sgd:average': 'False', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'optimal', 'regressor:sgd:loss': 'squared_loss', 'regressor:sgd:penalty': 'elasticnet', 'regressor:sgd:tol': 0.0017453117990883535, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.027290681063814725, 'regressor:sgd:l1_ratio': 5.015169496839277e-06}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'mae', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.6001992469083144, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 1, 'regressor:extra_trees:min_samples_split': 13, 'regressor:extra_trees:n_estimators': 100, 'rescaling:quantile_transformer:n_quantiles': 1404, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 1536}], 'rank_test_scores': array([1, 4, 3, 2, 4, 4]), 'status': ['Success', 'Memout', 'Success', 'Success', 'Memout', 'Timeout'], 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding'],
             mask=[False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_imputation:strategy': masked_array(data=['mean', 'median', 'median', 'mean', 'mean', 'median'],
             mask=[False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U6'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing',
                   'extra_trees_preproc_for_regression', 'pca',
                   'no_preprocessing', 'kernel_pca', 'fast_ica'],
             mask=[False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U34'), 'param_regressor:__choice__': masked_array(data=['random_forest', 'ard_regression', 'decision_tree',
                   'ridge_regression', 'sgd', 'extra_trees'],
             mask=[False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'minmax', 'standardize', 'normalize',
                   'none', 'quantile_transformer'],
             mask=[False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', 'False', 'False', 'True', 'True', --],
             mask=[False, False, False, False, False,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_preprocessor:extra_trees_preproc_for_regression:bootstrap': masked_array(data=[--, 'False', --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:criterion': masked_array(data=[--, 'mse', --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_depth': masked_array(data=[--, 'None', --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_features': masked_array(data=[--, 0.8432107119703621, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': masked_array(data=[--, 'None', --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': masked_array(data=[--, 20.0, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_split': masked_array(data=[--, 6.0, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': masked_array(data=[--, 0.0, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:n_estimators': masked_array(data=[--, 100.0, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, --, --, 'deflation'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, --, --, 'cube'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, --, --, 'True'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, 'cosine', --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, 205.0, --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, 0.6910589102563758, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, 'False', --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:select_percentile_regression:percentile': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:select_percentile_regression:score_func': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:adaboost:learning_rate': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:adaboost:loss': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:adaboost:max_depth': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:adaboost:n_estimators': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:ard_regression:alpha_1': masked_array(data=[--, 0.0008247884157442895, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_2': masked_array(data=[--, 5.478709120134568e-10, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:fit_intercept': masked_array(data=[--, 'True', --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ard_regression:lambda_1': masked_array(data=[--, 0.00037131892110138477, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:lambda_2': masked_array(data=[--, 1.226057556458958e-05, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:n_iter': masked_array(data=[--, 300.0, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:threshold_lambda': masked_array(data=[--, 7794.496820084062, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:tol': masked_array(data=[--, 1.6132698702915743e-05, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:criterion': masked_array(data=[--, --, 'friedman_mse', --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:decision_tree:max_depth_factor': masked_array(data=[--, --, 0.5279964207035701, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:max_features': masked_array(data=[--, --, 1.0, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:max_leaf_nodes': masked_array(data=[--, --, 'None', --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:decision_tree:min_impurity_decrease': masked_array(data=[--, --, 0.0, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_samples_leaf': masked_array(data=[--, --, 12.0, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_samples_split': masked_array(data=[--, --, 4.0, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, 0.0, --, --, --],
             mask=[ True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, 'False'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:criterion': masked_array(data=[--, --, --, --, --, 'mae'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, 'None'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_features': masked_array(data=[--, --, --, --, --, 0.6001992469083144],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, 'None'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, 0.0],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, 1.0],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, 13.0],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:n_estimators': masked_array(data=[--, --, --, --, --, 100.0],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:gaussian_process:alpha': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gaussian_process:thetaL': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gaussian_process:thetaU': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:max_features': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:min_samples_split': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:k_nearest_neighbors:p': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:k_nearest_neighbors:weights': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:C': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:dual': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:epsilon': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:fit_intercept': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:intercept_scaling': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:loss': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:tol': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:C': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:epsilon': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:kernel': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:max_iter': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:shrinking': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:tol': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:criterion': masked_array(data=['mse', --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U3'), 'param_regressor:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:max_features': masked_array(data=[1.0, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:alpha': masked_array(data=[--, --, --, 0.00022749800697443153, --, --],
             mask=[ True,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:fit_intercept': masked_array(data=[--, --, --, 'True', --, --],
             mask=[ True,  True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ridge_regression:tol': masked_array(data=[--, --, --, 8.082236463045226e-05, --, --],
             mask=[ True,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:alpha': masked_array(data=[--, --, --, --, 1.9342589279446235e-05, --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:sgd:average': masked_array(data=[--, --, --, --, 'False', --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:fit_intercept': masked_array(data=[--, --, --, --, 'True', --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:learning_rate': masked_array(data=[--, --, --, --, 'optimal', --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:loss': masked_array(data=[--, --, --, --, 'squared_loss', --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:penalty': masked_array(data=[--, --, --, --, 'elasticnet', --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:tol': masked_array(data=[--, --, --, --, 0.0017453117990883535, --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, --, --, 1404.0],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, --, --, 'uniform'],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, --, 0.000589188056877925,
                   0.027290681063814725, --],
             mask=[False,  True,  True, False, False,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, --, 1536.0],
             mask=[ True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:alpha': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:coef0': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:degree': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:gamma': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:sgd:epsilon': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:sgd:eta0': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:sgd:l1_ratio': masked_array(data=[--, --, --, --, 5.015169496839277e-06, --],
             mask=[ True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:sgd:power_t': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64)}