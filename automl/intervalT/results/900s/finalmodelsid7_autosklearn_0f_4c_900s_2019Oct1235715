[(0.500000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.16286302166148908, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 2, 'regressor:random_forest:min_samples_split': 8, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.320000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.180000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'gbtree', 'regressor:xgradient_boosting:colsample_bylevel': 0.7383412784981492, 'regressor:xgradient_boosting:colsample_bytree': 0.5253831500231004, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.012183185082319749, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 8, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.0482669890270454e-08, 'regressor:xgradient_boosting:reg_lambda': 7.969590330955319e-06, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.9283260557293931, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00024764950918479536},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
]{'mean_test_score': array([ 4.48077958e-01, -2.62746940e-04, -1.44735777e-01,  2.57326186e-01,
        2.03339030e-04,  0.00000000e+00,  3.54892567e-01,  1.47230344e-01,
        4.57715158e-01,  2.66119194e-01,  3.47522833e-01,  3.94265298e-01,
        2.85638425e-01,  3.50047405e-01,  4.09147565e-01,  3.75824333e-01,
        1.88806479e-01,  2.75276557e-01,  2.25029401e-03,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00]), 'mean_fit_time': array([  4.97706771,  49.29373646,   2.01733685,   4.22730517,
         0.85064292,   2.68275857,   2.11734462,   3.79644394,
        37.5761807 ,  15.521837  , 232.77740335,   2.00250149,
       236.56417322,   3.52839208,  14.8635664 ,   2.10995412,
        43.08458042,   2.01654029,   2.20415211, 492.15447211,
       838.22055864, 634.15294647]), 'params': [{'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'normalize', 'preprocessor:pca:keep_variance': 0.6050772668950458, 'preprocessor:pca:whiten': 'True', 'regressor:ard_regression:alpha_1': 0.0003052320135010234, 'regressor:ard_regression:alpha_2': 0.00011645634030813144, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 0.00014223601077969022, 'regressor:ard_regression:lambda_2': 6.425424152023873e-10, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 62200.179272444686, 'regressor:ard_regression:tol': 0.03292349030608233}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.013857361155308811}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.24856760535207326, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 1.5037210102001854, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 8, 'regressor:adaboost:n_estimators': 261, 'rescaling:quantile_transformer:n_quantiles': 394, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.6057751996829459, 'preprocessor:pca:whiten': 'True', 'regressor:sgd:alpha': 0.004633763765130674, 'regressor:sgd:average': 'False', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'invscaling', 'regressor:sgd:loss': 'squared_loss', 'regressor:sgd:penalty': 'elasticnet', 'regressor:sgd:tol': 4.795873742639945e-05, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00012433459373696016, 'regressor:sgd:eta0': 4.393368607224747e-06, 'regressor:sgd:l1_ratio': 0.0038430660278235625, 'regressor:sgd:power_t': 0.2745187835434818}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:libsvm_svr:C': 0.820936401111195, 'regressor:libsvm_svr:epsilon': 0.011820422524358349, 'regressor:libsvm_svr:kernel': 'poly', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 0.003169502327187765, 'regressor:libsvm_svr:coef0': 0.9772471747872822, 'regressor:libsvm_svr:degree': 2, 'regressor:libsvm_svr:gamma': 8.106199652464777e-05}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.15918994930520844, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.7535406518729681, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 195, 'regressor:gradient_boosting:subsample': 0.4955741598265856, 'preprocessor:fast_ica:n_components': 1011}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'minmax', 'preprocessor:pca:keep_variance': 0.6357751080713193, 'preprocessor:pca:whiten': 'True', 'regressor:adaboost:learning_rate': 0.06765193548239966, 'regressor:adaboost:loss': 'square', 'regressor:adaboost:max_depth': 3, 'regressor:adaboost:n_estimators': 364}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.16286302166148908, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 2, 'regressor:random_forest:min_samples_split': 8, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 3, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 10, 'preprocessor:random_trees_embedding:min_samples_split': 16, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 58, 'regressor:adaboost:learning_rate': 0.14692458662025729, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 5, 'regressor:adaboost:n_estimators': 85}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 3, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 14, 'preprocessor:random_trees_embedding:min_samples_split': 3, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 97, 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.20790228782418774, 'regressor:xgradient_boosting:colsample_bytree': 0.6964083329091856, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.016016142945594468, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 19, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 6.688757380096515e-09, 'regressor:xgradient_boosting:reg_lambda': 4.600483498731673e-08, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.22194664159330835, 'rescaling:robust_scaler:q_max': 0.8748314006225273, 'rescaling:robust_scaler:q_min': 0.23302727781111088, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0026456078235203894, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.17201186931366286, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'none', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.6363720371115581, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 12, 'regressor:random_forest:min_samples_split': 5, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ard_regression:alpha_1': 4.448305327115311e-05, 'regressor:ard_regression:alpha_2': 0.000112914413021726, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.0847871463163737e-09, 'regressor:ard_regression:lambda_2': 3.7936435307263186e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 35831.58634144192, 'regressor:ard_regression:tol': 3.869948335291496e-05, 'rescaling:robust_scaler:q_max': 0.8481206426775242, 'rescaling:robust_scaler:q_min': 0.2723027972074355}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'preprocessor:pca:keep_variance': 0.8796429994661763, 'preprocessor:pca:whiten': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.8413269401511498, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 10, 'regressor:random_forest:min_samples_split': 19, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'gbtree', 'regressor:xgradient_boosting:colsample_bylevel': 0.7383412784981492, 'regressor:xgradient_boosting:colsample_bytree': 0.5253831500231004, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.012183185082319749, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 8, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.0482669890270454e-08, 'regressor:xgradient_boosting:reg_lambda': 7.969590330955319e-06, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.9283260557293931, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00024764950918479536}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.551303826870538, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 17, 'regressor:random_forest:min_samples_split': 5, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'robust_scaler', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.8414232728771526, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 11, 'regressor:random_forest:min_samples_split': 10, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8900420591871744, 'rescaling:robust_scaler:q_min': 0.12509983051963838}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:ridge_regression:alpha': 0.011564237944543173, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.08494812908336878, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.02329022062007162}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 197, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:sgd:alpha': 2.0720677001315385e-05, 'regressor:sgd:average': 'True', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'invscaling', 'regressor:sgd:loss': 'squared_epsilon_insensitive', 'regressor:sgd:penalty': 'l2', 'regressor:sgd:tol': 0.050274601185389366, 'rescaling:quantile_transformer:n_quantiles': 35, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0014819399290182586, 'regressor:sgd:epsilon': 0.029255700648187773, 'regressor:sgd:eta0': 1.7396222617246842e-05, 'regressor:sgd:power_t': 0.35575081657915064}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:random_forest:bootstrap': 'False', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.6095790436346268, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 8, 'regressor:random_forest:min_samples_split': 9, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ard_regression:alpha_1': 0.0001382931884140531, 'regressor:ard_regression:alpha_2': 1.8598478831375427e-10, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 2.0878882340995305e-08, 'regressor:ard_regression:lambda_2': 1.6268760575609764e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 17017.58420474088, 'regressor:ard_regression:tol': 0.01783828078307922}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gaussian_process', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:gaussian_process:alpha': 4.584736228006317e-08, 'regressor:gaussian_process:thetaL': 8.290465116587147e-06, 'regressor:gaussian_process:thetaU': 21847.27685344622, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00013520410273975175}], 'rank_test_scores': array([ 2, 21, 22, 12, 16, 17,  6, 14,  1, 11,  8,  4,  9,  7,  3,  5, 13,
       10, 15, 17, 17, 17]), 'status': ['Success', 'Success', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Timeout', 'Timeout'], 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_imputation:strategy': masked_array(data=['mean', 'mean', 'most_frequent', 'most_frequent',
                   'most_frequent', 'mean', 'most_frequent', 'mean',
                   'most_frequent', 'most_frequent', 'mean',
                   'most_frequent', 'most_frequent', 'median', 'median',
                   'mean', 'most_frequent', 'mean', 'median',
                   'most_frequent', 'most_frequent', 'most_frequent'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'pca', 'no_preprocessing',
                   'extra_trees_preproc_for_regression', 'pca',
                   'fast_ica', 'fast_ica', 'pca', 'polynomial',
                   'random_trees_embedding', 'random_trees_embedding',
                   'no_preprocessing', 'polynomial', 'pca',
                   'no_preprocessing', 'no_preprocessing',
                   'no_preprocessing', 'no_preprocessing',
                   'feature_agglomeration', 'polynomial', 'polynomial',
                   'polynomial'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U34'), 'param_regressor:__choice__': masked_array(data=['random_forest', 'ard_regression',
                   'k_nearest_neighbors', 'adaboost', 'sgd', 'libsvm_svr',
                   'gradient_boosting', 'adaboost', 'random_forest',
                   'adaboost', 'xgradient_boosting', 'random_forest',
                   'ard_regression', 'random_forest',
                   'xgradient_boosting', 'random_forest', 'random_forest',
                   'ridge_regression', 'sgd', 'random_forest',
                   'ard_regression', 'gaussian_process'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U19'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'normalize', 'normalize',
                   'quantile_transformer', 'minmax', 'none',
                   'standardize', 'minmax', 'minmax', 'standardize',
                   'robust_scaler', 'none', 'robust_scaler', 'minmax',
                   'normalize', 'none', 'robust_scaler', 'none',
                   'quantile_transformer', 'normalize', 'minmax',
                   'minmax'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', --, 'True', 'False', 'True', --, 'False', --,
                   --, 'False', 'True', --, --, --, 'True', 'False', --,
                   'True', 'True', 'False', --, 'True'],
             mask=[False,  True, False, False, False,  True, False,  True,
                    True, False, False,  True,  True,  True, False, False,
                    True, False, False, False,  True, False],
       fill_value='N/A',
            dtype='<U5'), 'param_preprocessor:extra_trees_preproc_for_regression:bootstrap': masked_array(data=[--, --, --, 'True', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:criterion': masked_array(data=[--, --, --, 'mse', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_depth': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_features': masked_array(data=[--, --, --, 0.24856760535207326, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': masked_array(data=[--, --, --, 1.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_split': masked_array(data=[--, --, --, 2.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': masked_array(data=[--, --, --, 0.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:n_estimators': masked_array(data=[--, --, --, 100.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, --, --, 'deflation', 'deflation', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, --, --, 'exp', 'exp', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, --, --, 'False', 'True', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 'euclidean', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 'ward', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 197.0, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 'mean', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, 0.6050772668950458, --, --, 0.6057751996829459, --,
                   --, 0.6357751080713193, --, --, --, --, --,
                   0.8796429994661763, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True, False,  True,  True, False,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, 'True', --, --, 'True', --, --, 'True', --, --, --,
                   --, --, 'True', --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True, False,  True,  True, False,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, --, --, --, --, --, --, --, 3.0, --, --, --, 3.0,
                   --, --, --, --, --, --, 3.0, 3.0, 2.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False, False, False],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, --, --, --, --, --, --, --, 'False', --, --, --,
                   'False', --, --, --, --, --, --, 'True', 'False',
                   'False'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, --, --, --, --, --, --, --, 'False', --, --, --,
                   'True', --, --, --, --, --, --, 'True', 'True', 'True'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, 'False', 'False',
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, 3.0, 3.0, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, 'None', 'None', --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, 10.0, 14.0, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, 16.0, 3.0, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, 1.0, 1.0, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, 58.0, 97.0, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:percentile': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:select_percentile_regression:score_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:adaboost:learning_rate': masked_array(data=[--, --, --, 1.5037210102001854, --, --, --,
                   0.06765193548239966, --, 0.14692458662025729, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:loss': masked_array(data=[--, --, --, 'linear', --, --, --, 'square', --,
                   'linear', --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:max_depth': masked_array(data=[--, --, --, 8.0, --, --, --, 3.0, --, 5.0, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:n_estimators': masked_array(data=[--, --, --, 261.0, --, --, --, 364.0, --, 85.0, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_1': masked_array(data=[--, 0.0003052320135010234, --, --, --, --, --, --, --,
                   --, --, --, 4.448305327115311e-05, --, --, --, --, --,
                   --, --, 0.0001382931884140531, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_2': masked_array(data=[--, 0.00011645634030813144, --, --, --, --, --, --, --,
                   --, --, --, 0.000112914413021726, --, --, --, --, --,
                   --, --, 1.8598478831375427e-10, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:fit_intercept': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, 'True', --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ard_regression:lambda_1': masked_array(data=[--, 0.00014223601077969022, --, --, --, --, --, --, --,
                   --, --, --, 1.0847871463163737e-09, --, --, --, --, --,
                   --, --, 2.0878882340995305e-08, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:lambda_2': masked_array(data=[--, 6.425424152023873e-10, --, --, --, --, --, --, --,
                   --, --, --, 3.7936435307263186e-08, --, --, --, --, --,
                   --, --, 1.6268760575609764e-08, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:n_iter': masked_array(data=[--, 300.0, --, --, --, --, --, --, --, --, --, --,
                   300.0, --, --, --, --, --, --, --, 300.0, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:threshold_lambda': masked_array(data=[--, 62200.179272444686, --, --, --, --, --, --, --, --,
                   --, --, 35831.58634144192, --, --, --, --, --, --, --,
                   17017.58420474088, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:tol': masked_array(data=[--, 0.03292349030608233, --, --, --, --, --, --, --,
                   --, --, --, 3.869948335291496e-05, --, --, --, --, --,
                   --, --, 0.01783828078307922, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gaussian_process:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 4.584736228006317e-08],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaL': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 8.290465116587147e-06],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaU': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 21847.27685344622],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, 0.15918994930520844, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --, 'ls', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, 2.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_features': masked_array(data=[--, --, --, --, --, --, 0.7535406518729681, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, 'None', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, 16.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_split': masked_array(data=[--, --, --, --, --, --, 13.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, 195.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, 0.4955741598265856, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:p': masked_array(data=[--, --, 2.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:weights': masked_array(data=[--, --, 'uniform', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:C': masked_array(data=[--, --, --, --, --, 0.820936401111195, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:epsilon': masked_array(data=[--, --, --, --, --, 0.011820422524358349, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:kernel': masked_array(data=[--, --, --, --, --, 'poly', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:max_iter': masked_array(data=[--, --, --, --, --, -1.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:shrinking': masked_array(data=[--, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:tol': masked_array(data=[--, --, --, --, --, 0.003169502327187765, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, 'True', --, --,
                   'True', --, 'True', --, 'True', 'True', --, --,
                   'False', --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_regressor:random_forest:criterion': masked_array(data=['mse', --, --, --, --, --, --, --, 'friedman_mse', --,
                   --, 'mse', --, 'mse', --, 'friedman_mse', 'mae', --,
                   --, 'mae', --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U12'), 'param_regressor:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, 'None', --, --,
                   'None', --, 'None', --, 'None', 'None', --, --, 'None',
                   --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:max_features': masked_array(data=[1.0, --, --, --, --, --, --, --, 0.16286302166148908,
                   --, --, 0.6363720371115581, --, 0.8413269401511498, --,
                   0.551303826870538, 0.8414232728771526, --, --,
                   0.6095790436346268, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, 'None', --, --,
                   'None', --, 'None', --, 'None', 'None', --, --, 'None',
                   --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, 0.0, --, --, 0.0, --,
                   0.0, --, 0.0, 0.0, --, --, 0.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, 2.0, --, --, 12.0, --,
                   10.0, --, 17.0, 11.0, --, --, 8.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, 8.0, --, --, 5.0, --,
                   19.0, --, 5.0, 10.0, --, --, 9.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, 0.0, --, --, 0.0, --,
                   0.0, --, 0.0, 0.0, --, --, 0.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, --, --, 100.0, --, --,
                   100.0, --, 100.0, --, 100.0, 100.0, --, --, 100.0, --,
                   --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True, False,  True, False,  True, False,
                   False,  True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.011564237944543173, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'True', --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ridge_regression:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.08494812908336878, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:alpha': masked_array(data=[--, --, --, --, 0.004633763765130674, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   2.0720677001315385e-05, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:average': masked_array(data=[--, --, --, --, 'False', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'True', --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:fit_intercept': masked_array(data=[--, --, --, --, 'True', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'True', --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:learning_rate': masked_array(data=[--, --, --, --, 'invscaling', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'invscaling', --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:loss': masked_array(data=[--, --, --, --, 'squared_loss', --, --, --, --, --, --,
                   --, --, --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:penalty': masked_array(data=[--, --, --, --, 'elasticnet', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'l2', --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:tol': masked_array(data=[--, --, --, --, 4.795873742639945e-05, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   0.050274601185389366, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.5, --, --,
                   --, 0.5, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'dart', --, --,
                   --, 'gbtree', --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.20790228782418774, --, --, --, 0.7383412784981492,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.6964083329091856, --, --, --, 0.5253831500231004, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.0, --, --,
                   --, 0.0, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.016016142945594468, --, --, --, 0.012183185082319749,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.0, --, --,
                   --, 0.0, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 9.0, --, --,
                   --, 10.0, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 19.0, --, --,
                   --, 8.0, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 512.0, --, --,
                   --, 512.0, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   6.688757380096515e-09, --, --, --,
                   1.0482669890270454e-08, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   4.600483498731673e-08, --, --, --,
                   7.969590330955319e-06, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 1.0, --, --,
                   --, 1.0, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.22194664159330835, --, --, --, 0.9283260557293931,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, 394.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 35.0, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, 'uniform', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'uniform', --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.8748314006225273, --, 0.8481206426775242, --, --, --,
                   0.8900420591871744, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.23302727781111088, --, 0.2723027972074355, --, --,
                   --, 0.12509983051963838, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, 0.013857361155308811, --,
                   0.00012433459373696016, --, --, --, --, --,
                   0.0026456078235203894, --, --, --,
                   0.00024764950918479536, --, --, 0.02329022062007162,
                   0.0014819399290182586, --, --, 0.00013520410273975175],
             mask=[False,  True, False,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True, False, False,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, --, --, 1011.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:coef0': masked_array(data=[--, --, --, --, --, 0.9772471747872822, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:degree': masked_array(data=[--, --, --, --, --, 2.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:gamma': masked_array(data=[--, --, --, --, --, 8.106199652464777e-05, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.029255700648187773, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:eta0': masked_array(data=[--, --, --, --, 4.393368607224747e-06, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   1.7396222617246842e-05, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:l1_ratio': masked_array(data=[--, --, --, --, 0.0038430660278235625, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:power_t': masked_array(data=[--, --, --, --, 0.2745187835434818, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.35575081657915064,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'forest', --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.17201186931366286, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'weighted', --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32')}