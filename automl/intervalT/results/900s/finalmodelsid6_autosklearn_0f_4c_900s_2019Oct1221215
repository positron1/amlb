[(0.300000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.0598998124121741, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2726831476708919, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 4, 'regressor:gradient_boosting:min_samples_split': 15, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 376, 'regressor:gradient_boosting:subsample': 0.8241147245420409, 'rescaling:quantile_transformer:n_quantiles': 136, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 1050},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.240000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.02895165017514208, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.5361345207630502, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 2, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 392, 'regressor:gradient_boosting:subsample': 0.23101616506345574, 'regressor:gradient_boosting:alpha': 0.9},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.160000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.014704397532340815, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.3023529391930165, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 15, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 148, 'regressor:gradient_boosting:subsample': 0.8152637661249722, 'preprocessor:fast_ica:n_components': 531},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.100000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.15918994930520844, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.7535406518729681, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 195, 'regressor:gradient_boosting:subsample': 0.4955741598265856, 'preprocessor:fast_ica:n_components': 1011},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.060000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:ard_regression:alpha_1': 0.0005141773115733895, 'regressor:ard_regression:alpha_2': 3.2280508576043108e-09, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.891887535915178e-05, 'regressor:ard_regression:lambda_2': 1.507872426004613e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 11332.577220460575, 'regressor:ard_regression:tol': 0.0011298975091125953, 'rescaling:quantile_transformer:n_quantiles': 1469, 'rescaling:quantile_transformer:output_distribution': 'normal'},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.060000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.9092779988863511, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2558895820074335, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 19, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 452, 'regressor:gradient_boosting:subsample': 0.5782360003566183, 'preprocessor:fast_ica:n_components': 172},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.040000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.013857361155308811},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'none', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ridge_regression:alpha': 0.0022267722436447018, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.0022831891834827287},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.9092779988863511, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2558895820074335, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 19, 'regressor:gradient_boosting:min_samples_split': 14, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 452, 'regressor:gradient_boosting:subsample': 0.5782360003566183, 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 172},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
]{'mean_test_score': array([ 5.16533966e-01,  4.04543632e-01,  2.06206725e-01,  3.57904436e-01,
       -6.22184037e+00,  5.45159340e-01,  4.74195342e-01,  5.43622180e-01,
       -2.07847011e-04,  5.43427968e-01,  4.75239558e-01,  3.82135883e-01,
        3.76574205e-02,  4.97955130e-01,  4.62630546e-01,  5.14009040e-01,
        5.17294183e-01,  5.27619192e-01, -1.79573554e+02, -3.46635017e-01,
        5.52890565e-01,  1.41451174e-01, -3.71779009e-01,  6.16400638e-03,
        2.76721793e-01, -1.41937768e-01,  5.44146133e-01, -1.76988676e+02,
        1.64662669e-02,  5.65121511e-01,  5.07497672e-01,  8.01401629e-02,
        1.81170532e-01,  5.08095075e-01,  7.99641463e-03,  5.59303907e-01,
       -2.02056997e-02,  3.01400606e-01,  5.33117260e-01,  5.05815650e-01,
        5.23605925e-01,  5.69239113e-01,  4.61728312e-01,  4.40666490e-02,
        4.67389265e-01, -2.01205141e-02,  3.80661605e-01,  5.05518060e-01,
        2.48991674e-01,  4.10036615e-01,  0.00000000e+00,  4.84172526e-01,
        3.64743153e-01,  4.75446587e-01, -3.31135439e+01,  0.00000000e+00,
       -4.43638222e-01,  0.00000000e+00,  5.25974921e-01,  0.00000000e+00]), 'mean_fit_time': array([2.70332313e+00, 2.22057700e+00, 7.75830030e-01, 6.83517623e+00,
       9.91194606e+00, 3.89501762e+00, 2.45860815e+00, 5.30664682e+00,
       2.38329521e+02, 4.13570046e+00, 4.05081868e+00, 1.15955493e+02,
       1.90910268e+00, 1.56362200e+00, 1.36645452e+02, 1.79734094e+02,
       3.02951956e+00, 5.00788689e+00, 3.30297518e+00, 8.58036423e+00,
       6.40811872e+00, 4.13018298e+00, 3.88705397e+00, 5.71122146e+00,
       2.14978790e+00, 4.11540437e+00, 2.22310972e+00, 2.74661374e+00,
       1.18653059e+00, 2.07138538e+00, 1.42701819e+01, 3.23959517e+00,
       2.78313231e+00, 6.34949040e+00, 1.84996748e+00, 1.29444120e+01,
       1.51510978e+00, 3.38425279e+00, 8.95262654e+01, 3.23804760e+00,
       1.05895562e+02, 2.42389941e+00, 2.18094254e+00, 4.29059625e+00,
       1.11361027e+00, 5.07086015e+00, 4.69272397e+01, 1.69726751e+01,
       4.03622460e+00, 4.58128643e+00, 4.49140179e+02, 8.14008609e+02,
       3.23736548e+00, 1.02403319e+01, 1.71699452e+00, 4.84133596e+02,
       3.60847473e+00, 5.16153344e+02, 1.79889512e+00, 4.21373651e+01]), 'params': [{'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'minmax', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:extra_trees:bootstrap': 'True', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.42650650864385875, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 13, 'regressor:extra_trees:min_samples_split': 9, 'regressor:extra_trees:n_estimators': 100, 'preprocessor:fast_ica:n_components': 668}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.013857361155308811}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mae', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.38188032743754285, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 7, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 15, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 0.32325707680148597, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 6, 'regressor:adaboost:n_estimators': 494, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.005317096895346532}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 3, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 14, 'preprocessor:random_trees_embedding:min_samples_split': 3, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 97, 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.20790228782418774, 'regressor:xgradient_boosting:colsample_bytree': 0.6964083329091856, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.016016142945594468, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 19, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 6.688757380096515e-09, 'regressor:xgradient_boosting:reg_lambda': 4.600483498731673e-08, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.22194664159330835, 'rescaling:robust_scaler:q_max': 0.8748314006225273, 'rescaling:robust_scaler:q_min': 0.23302727781111088, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0026456078235203894, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.17201186931366286, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.15918994930520844, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.7535406518729681, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 195, 'regressor:gradient_boosting:subsample': 0.4955741598265856, 'preprocessor:fast_ica:n_components': 1011}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 65.91486046775462, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:random_forest:bootstrap': 'False', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.11778420330056738, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 4, 'regressor:random_forest:min_samples_split': 15, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.16286302166148908, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 2, 'regressor:random_forest:min_samples_split': 8, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'gaussian_process', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:pca:keep_variance': 0.616784696253029, 'preprocessor:pca:whiten': 'True', 'regressor:gaussian_process:alpha': 5.6780190186943086e-11, 'regressor:gaussian_process:thetaL': 1.2818152833512612e-10, 'regressor:gaussian_process:thetaU': 154.54510155284996}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'gbtree', 'regressor:xgradient_boosting:colsample_bylevel': 0.7383412784981492, 'regressor:xgradient_boosting:colsample_bytree': 0.5253831500231004, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.012183185082319749, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 8, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.0482669890270454e-08, 'regressor:xgradient_boosting:reg_lambda': 7.969590330955319e-06, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.9283260557293931, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00024764950918479536}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.24856760535207326, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 1.5037210102001854, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 8, 'regressor:adaboost:n_estimators': 261, 'rescaling:quantile_transformer:n_quantiles': 394, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'normalize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mae', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.3574146270769857, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 12, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 3, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:ard_regression:alpha_1': 0.0003914660548980591, 'regressor:ard_regression:alpha_2': 0.00019934715308115043, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 2.7458666816933006e-09, 'regressor:ard_regression:lambda_2': 4.6439675780027556e-10, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 2161.4307261894483, 'regressor:ard_regression:tol': 0.00012122899583293209}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:libsvm_svr:C': 0.820936401111195, 'regressor:libsvm_svr:epsilon': 0.011820422524358349, 'regressor:libsvm_svr:kernel': 'poly', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 0.003169502327187765, 'regressor:libsvm_svr:coef0': 0.9772471747872822, 'regressor:libsvm_svr:degree': 2, 'regressor:libsvm_svr:gamma': 8.106199652464777e-05}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'none', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ridge_regression:alpha': 0.0022267722436447018, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.0022831891834827287}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ard_regression:alpha_1': 4.448305327115311e-05, 'regressor:ard_regression:alpha_2': 0.000112914413021726, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.0847871463163737e-09, 'regressor:ard_regression:lambda_2': 3.7936435307263186e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 35831.58634144192, 'regressor:ard_regression:tol': 3.869948335291496e-05, 'rescaling:robust_scaler:q_max': 0.8481206426775242, 'rescaling:robust_scaler:q_min': 0.2723027972074355}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.6071685062485819, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 13, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 9, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:ard_regression:alpha_1': 0.00062814604027236, 'regressor:ard_regression:alpha_2': 0.0005612164781460305, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 0.0003896491564719217, 'regressor:ard_regression:lambda_2': 0.0003176063480382787, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 83917.02382000348, 'regressor:ard_regression:tol': 0.0005862841147544614, 'rescaling:quantile_transformer:n_quantiles': 1681, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 88.51568792079165, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:ridge_regression:alpha': 0.004557508487979205, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.014136586381792625}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:feature_agglomeration:affinity': 'cosine', 'preprocessor:feature_agglomeration:linkage': 'complete', 'preprocessor:feature_agglomeration:n_clusters': 194, 'preprocessor:feature_agglomeration:pooling_func': 'median', 'regressor:adaboost:learning_rate': 0.022213088865584908, 'regressor:adaboost:loss': 'exponential', 'regressor:adaboost:max_depth': 8, 'regressor:adaboost:n_estimators': 144, 'rescaling:robust_scaler:q_max': 0.7750826582071604, 'rescaling:robust_scaler:q_min': 0.1400640782198558, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.02933695021953836}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8486219960024226, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.854801719198111, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 389, 'regressor:gradient_boosting:subsample': 0.019340413217419968, 'preprocessor:fast_ica:n_components': 1142, 'regressor:gradient_boosting:alpha': 0.9634180741572713}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.5415846207792696, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 5, 'regressor:gradient_boosting:max_features': 0.8831613537777819, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 11, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 334, 'regressor:gradient_boosting:subsample': 0.2796713122438508, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.004115638565672288, 'preprocessor:fast_ica:n_components': 993, 'regressor:gradient_boosting:alpha': 0.9258978475522102}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 267, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:gradient_boosting:learning_rate': 0.02895165017514208, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.5361345207630502, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 2, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 392, 'regressor:gradient_boosting:subsample': 0.23101616506345574}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.9092779988863511, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2558895820074335, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 19, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 452, 'regressor:gradient_boosting:subsample': 0.5782360003566183, 'preprocessor:fast_ica:n_components': 172}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.9222528108151589, 'preprocessor:pca:whiten': 'False', 'regressor:gradient_boosting:learning_rate': 0.6805532803718212, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 6, 'regressor:gradient_boosting:max_features': 0.3617703809052838, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 3, 'regressor:gradient_boosting:min_samples_split': 9, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 204, 'regressor:gradient_boosting:subsample': 0.12728945457497592, 'rescaling:quantile_transformer:n_quantiles': 56, 'rescaling:quantile_transformer:output_distribution': 'normal', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.005082456335625295}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'preprocessor:select_percentile_regression:percentile': 50.0, 'preprocessor:select_percentile_regression:score_func': 'f_regression', 'regressor:gradient_boosting:learning_rate': 0.5415846207792696, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 5, 'regressor:gradient_boosting:max_features': 0.8831613537777819, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 11, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 404, 'regressor:gradient_boosting:subsample': 0.2796713122438508, 'regressor:gradient_boosting:alpha': 0.9258978475522102}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.5923389332585389, 'preprocessor:pca:whiten': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 6, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00015553112665842747}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.5415846207792696, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 5, 'regressor:gradient_boosting:max_features': 0.9708789378582714, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 11, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 178, 'regressor:gradient_boosting:subsample': 0.2796713122438508, 'preprocessor:fast_ica:n_components': 993, 'regressor:gradient_boosting:alpha': 0.9258978475522102}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'robust_scaler', 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'friedman_mse', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.5148104984651863, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 5, 'regressor:extra_trees:min_samples_split': 10, 'regressor:extra_trees:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.9399843291111637, 'rescaling:robust_scaler:q_min': 0.2729683319659096}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.8486219960024226, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.854801719198111, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 18, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 389, 'regressor:gradient_boosting:subsample': 0.019340413217419968, 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 1142, 'regressor:gradient_boosting:alpha': 0.9634180741572713}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:sgd:alpha': 4.030639659342745e-06, 'regressor:sgd:average': 'True', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'constant', 'regressor:sgd:loss': 'squared_epsilon_insensitive', 'regressor:sgd:penalty': 'l1', 'regressor:sgd:tol': 0.02176530787243175, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.050371496029170515, 'regressor:sgd:epsilon': 0.00459995113113189, 'regressor:sgd:eta0': 5.871104258362839e-07}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.0598998124121741, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2726831476708919, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 4, 'regressor:gradient_boosting:min_samples_split': 15, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 376, 'regressor:gradient_boosting:subsample': 0.8241147245420409, 'rescaling:quantile_transformer:n_quantiles': 136, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 1050}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'robust_scaler', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.8414232728771526, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 11, 'regressor:random_forest:min_samples_split': 10, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8900420591871744, 'rescaling:robust_scaler:q_min': 0.12509983051963838}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.9092779988863511, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2558895820074335, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 19, 'regressor:gradient_boosting:min_samples_split': 14, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 452, 'regressor:gradient_boosting:subsample': 0.5782360003566183, 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 172}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'none', 'preprocessor:pca:keep_variance': 0.5105675929335457, 'preprocessor:pca:whiten': 'True', 'regressor:adaboost:learning_rate': 0.037048336695677274, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 2, 'regressor:adaboost:n_estimators': 476}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.166980040023611, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.4630676926787265, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 12, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 109, 'regressor:gradient_boosting:subsample': 0.6322169263296291, 'preprocessor:fast_ica:n_components': 136, 'regressor:gradient_boosting:alpha': 0.9827382067804598}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 197, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:sgd:alpha': 2.0720677001315385e-05, 'regressor:sgd:average': 'True', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'invscaling', 'regressor:sgd:loss': 'squared_epsilon_insensitive', 'regressor:sgd:penalty': 'l2', 'regressor:sgd:tol': 0.050274601185389366, 'rescaling:quantile_transformer:n_quantiles': 35, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0014819399290182586, 'regressor:sgd:epsilon': 0.029255700648187773, 'regressor:sgd:eta0': 1.7396222617246842e-05, 'regressor:sgd:power_t': 0.35575081657915064}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.02895165017514208, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.5361345207630502, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 2, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 392, 'regressor:gradient_boosting:subsample': 0.23101616506345574, 'regressor:gradient_boosting:alpha': 0.9}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'rescaling:robust_scaler:q_max': 0.9173661901802149, 'rescaling:robust_scaler:q_min': 0.2617414935794013}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mae', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.3803145255143281, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 8, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 19, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:gradient_boosting:learning_rate': 0.018090158207427452, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 4, 'regressor:gradient_boosting:max_features': 0.5649657561914808, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 7, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 245, 'regressor:gradient_boosting:subsample': 0.017168075893407495, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.16765538107922254, 'regressor:gradient_boosting:alpha': 0.9522029661642115}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.18670021571617046, 'regressor:xgradient_boosting:colsample_bytree': 0.7396025751456639, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.011370953397634255, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 5, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.8482595949495837e-08, 'regressor:xgradient_boosting:reg_lambda': 0.0015998122041927785, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.2662368959251735, 'rescaling:robust_scaler:q_max': 0.7604296240253136, 'rescaling:robust_scaler:q_min': 0.037820680702001085, 'regressor:xgradient_boosting:normalize_type': 'tree', 'regressor:xgradient_boosting:rate_drop': 0.06306101221344254, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.12369899740204612, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 5, 'regressor:gradient_boosting:max_features': 0.9708789378582714, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 11, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 178, 'regressor:gradient_boosting:subsample': 0.27766772419949526, 'preprocessor:fast_ica:n_components': 906, 'regressor:gradient_boosting:alpha': 0.9258978475522102}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'regressor:ard_regression:alpha_1': 0.0005141773115733895, 'regressor:ard_regression:alpha_2': 3.2280508576043108e-09, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.891887535915178e-05, 'regressor:ard_regression:lambda_2': 1.507872426004613e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 11332.577220460575, 'regressor:ard_regression:tol': 0.0011298975091125953, 'rescaling:quantile_transformer:n_quantiles': 1469, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'minmax', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.014704397532340815, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 10, 'regressor:gradient_boosting:max_features': 0.3023529391930165, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 15, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 148, 'regressor:gradient_boosting:subsample': 0.8152637661249722, 'preprocessor:fast_ica:n_components': 531}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.054503589112656806, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 1, 'regressor:gradient_boosting:max_features': 0.8590225932353865, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 17, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 394, 'regressor:gradient_boosting:subsample': 0.16087235038178166}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.7292959445232323, 'preprocessor:pca:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.7837828419558756, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 9, 'regressor:gradient_boosting:max_features': 0.5961071999733386, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 18, 'regressor:gradient_boosting:min_samples_split': 20, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 274, 'regressor:gradient_boosting:subsample': 0.23437443925637716, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.006759170291889307, 'regressor:gradient_boosting:alpha': 0.8000935366744397}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'minmax', 'preprocessor:select_percentile_regression:percentile': 41.457315930958096, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:k_nearest_neighbors:n_neighbors': 27, 'regressor:k_nearest_neighbors:p': 1, 'regressor:k_nearest_neighbors:weights': 'distance'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 1.0, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:gradient_boosting:learning_rate': 0.5415846207792696, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 5, 'regressor:gradient_boosting:max_features': 0.8831613537777819, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 14, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 404, 'regressor:gradient_boosting:subsample': 0.2576535758337105, 'regressor:gradient_boosting:alpha': 0.8994687015502147}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:select_percentile_regression:percentile': 17.978085170806185, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:ard_regression:alpha_1': 0.0003316290720366683, 'regressor:ard_regression:alpha_2': 1.987422074257595e-06, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.394363508576049e-08, 'regressor:ard_regression:lambda_2': 8.978474215048388e-10, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 4337.75199243961, 'regressor:ard_regression:tol': 1.387991003027353e-05, 'rescaling:robust_scaler:q_max': 0.7480708001778895, 'rescaling:robust_scaler:q_min': 0.022775942230044737}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'logcosh', 'preprocessor:fast_ica:whiten': 'False', 'regressor:gradient_boosting:learning_rate': 0.08028344641760744, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 6, 'regressor:gradient_boosting:max_features': 0.3617703809052838, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 3, 'regressor:gradient_boosting:min_samples_split': 9, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 204, 'regressor:gradient_boosting:subsample': 0.12728945457497592, 'rescaling:quantile_transformer:n_quantiles': 56, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'regressor:adaboost:learning_rate': 0.18477441778876663, 'regressor:adaboost:loss': 'exponential', 'regressor:adaboost:max_depth': 2, 'regressor:adaboost:n_estimators': 138, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0013753747530966347, 'preprocessor:fast_ica:n_components': 1955}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:gradient_boosting:learning_rate': 0.018090158207427452, 'regressor:gradient_boosting:loss': 'huber', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.5649657561914808, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 9, 'regressor:gradient_boosting:min_samples_split': 7, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 245, 'regressor:gradient_boosting:subsample': 0.017168075893407495, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.16765538107922254, 'regressor:gradient_boosting:alpha': 0.9522029661642115}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.7851085868664173, 'preprocessor:pca:whiten': 'False', 'regressor:libsvm_svr:C': 14296.894431999228, 'regressor:libsvm_svr:epsilon': 0.11386736948981817, 'regressor:libsvm_svr:kernel': 'linear', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 4.017492099131629e-05, 'rescaling:robust_scaler:q_max': 0.9716519608171985, 'rescaling:robust_scaler:q_min': 0.20000229221013058, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.001521474918301074}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 5, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 3, 'preprocessor:random_trees_embedding:min_samples_split': 2, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 60, 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'mae', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.8178369589072358, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 7, 'regressor:extra_trees:min_samples_split': 19, 'regressor:extra_trees:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8242926454702025, 'rescaling:robust_scaler:q_min': 0.14545328535824323}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.7977379960789651, 'regressor:gradient_boosting:loss': 'lad', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.2558895820074335, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 19, 'regressor:gradient_boosting:min_samples_split': 14, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 452, 'regressor:gradient_boosting:subsample': 0.5782360003566183, 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 172}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 54, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'rescaling:quantile_transformer:n_quantiles': 646, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gradient_boosting:learning_rate': 0.7858679241028886, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 3, 'regressor:gradient_boosting:max_features': 0.593819319133112, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 12, 'regressor:gradient_boosting:min_samples_split': 6, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 227, 'regressor:gradient_boosting:subsample': 0.09316364761358661}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'kitchen_sinks', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:kitchen_sinks:gamma': 7.103001745334331, 'preprocessor:kitchen_sinks:n_components': 2814, 'regressor:ard_regression:alpha_1': 0.000629565767437561, 'regressor:ard_regression:alpha_2': 4.875867954350646e-09, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 4.2517714218614236e-05, 'regressor:ard_regression:lambda_2': 3.8547912596695126e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 3651.447393208297, 'regressor:ard_regression:tol': 0.000933873034469038, 'rescaling:quantile_transformer:n_quantiles': 1749, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 34.7621620160826, 'preprocessor:select_percentile_regression:score_func': 'f_regression', 'regressor:gradient_boosting:learning_rate': 0.0370024975748607, 'regressor:gradient_boosting:loss': 'quantile', 'regressor:gradient_boosting:max_depth': 4, 'regressor:gradient_boosting:max_features': 0.9599144449725597, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 15, 'regressor:gradient_boosting:min_samples_split': 8, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 176, 'regressor:gradient_boosting:subsample': 0.6147010763910453, 'regressor:gradient_boosting:alpha': 0.9326246968786949}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gaussian_process', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:gaussian_process:alpha': 0.0009089390574444633, 'regressor:gaussian_process:thetaL': 1.050607496571297e-09, 'regressor:gaussian_process:thetaU': 2134.0188587797415}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.03470463986900533, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 7, 'regressor:gradient_boosting:max_features': 0.10958007657052105, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 9, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 310, 'regressor:gradient_boosting:subsample': 0.06747090911356053, 'preprocessor:fast_ica:n_components': 1479}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:ard_regression:alpha_1': 0.0009746062660128067, 'regressor:ard_regression:alpha_2': 2.7162629611164865e-07, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.5237750361496798e-07, 'regressor:ard_regression:lambda_2': 3.246018359828448e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 13572.935515560353, 'regressor:ard_regression:tol': 0.0008797250430209753, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.27321738863184414, 'preprocessor:fast_ica:n_components': 1221}], 'rank_test_scores': array([14, 29, 37, 33, 57,  5, 24,  7, 50,  8, 23, 30, 42, 20, 26, 15, 13,
       10, 60, 54,  4, 39, 55, 45, 35, 53,  6, 59, 43,  2, 17, 40, 38, 16,
       44,  3, 52, 34,  9, 18, 12,  1, 27, 41, 25, 51, 31, 19, 36, 28, 46,
       21, 32, 22, 58, 46, 56, 46, 11, 46]), 'status': ['Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Success', 'Timeout', 'Success', 'Timeout'], 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_imputation:strategy': masked_array(data=['mean', 'most_frequent', 'most_frequent',
                   'most_frequent', 'mean', 'most_frequent', 'mean',
                   'most_frequent', 'mean', 'median', 'most_frequent',
                   'most_frequent', 'mean', 'mean', 'most_frequent',
                   'most_frequent', 'median', 'median', 'median',
                   'median', 'mean', 'median', 'median', 'median',
                   'most_frequent', 'median', 'mean', 'median', 'mean',
                   'mean', 'most_frequent', 'median', 'median', 'median',
                   'median', 'mean', 'mean', 'mean', 'median', 'median',
                   'mean', 'median', 'most_frequent', 'most_frequent',
                   'mean', 'most_frequent', 'mean', 'median',
                   'most_frequent', 'mean', 'most_frequent', 'median',
                   'median', 'most_frequent', 'mean', 'median', 'mean',
                   'median', 'most_frequent', 'most_frequent'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'fast_ica', 'no_preprocessing',
                   'extra_trees_preproc_for_regression',
                   'random_trees_embedding', 'fast_ica',
                   'select_percentile_regression', 'polynomial', 'pca',
                   'no_preprocessing',
                   'extra_trees_preproc_for_regression',
                   'extra_trees_preproc_for_regression', 'fast_ica',
                   'polynomial', 'polynomial',
                   'extra_trees_preproc_for_regression',
                   'select_percentile_regression',
                   'feature_agglomeration', 'fast_ica', 'fast_ica',
                   'feature_agglomeration', 'fast_ica', 'pca',
                   'select_percentile_regression', 'pca', 'fast_ica',
                   'no_preprocessing', 'fast_ica', 'polynomial',
                   'fast_ica', 'no_preprocessing', 'fast_ica', 'pca',
                   'fast_ica', 'feature_agglomeration', 'polynomial',
                   'polynomial', 'extra_trees_preproc_for_regression',
                   'polynomial', 'fast_ica', 'no_preprocessing',
                   'fast_ica', 'polynomial', 'pca',
                   'select_percentile_regression',
                   'extra_trees_preproc_for_regression',
                   'select_percentile_regression', 'fast_ica', 'fast_ica',
                   'no_preprocessing', 'pca', 'random_trees_embedding',
                   'fast_ica', 'fast_ica', 'polynomial', 'kitchen_sinks',
                   'select_percentile_regression', 'polynomial',
                   'fast_ica', 'fast_ica'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U34'), 'param_regressor:__choice__': masked_array(data=['random_forest', 'extra_trees', 'k_nearest_neighbors',
                   'adaboost', 'xgradient_boosting', 'gradient_boosting',
                   'random_forest', 'random_forest', 'gaussian_process',
                   'xgradient_boosting', 'adaboost', 'ard_regression',
                   'libsvm_svr', 'ridge_regression', 'ard_regression',
                   'ard_regression', 'ridge_regression', 'adaboost',
                   'gradient_boosting', 'gradient_boosting',
                   'gradient_boosting', 'gradient_boosting',
                   'gradient_boosting', 'gradient_boosting',
                   'k_nearest_neighbors', 'gradient_boosting',
                   'extra_trees', 'gradient_boosting', 'sgd',
                   'gradient_boosting', 'random_forest',
                   'gradient_boosting', 'adaboost', 'gradient_boosting',
                   'sgd', 'gradient_boosting', 'k_nearest_neighbors',
                   'gradient_boosting', 'xgradient_boosting',
                   'gradient_boosting', 'ard_regression',
                   'gradient_boosting', 'gradient_boosting',
                   'gradient_boosting', 'k_nearest_neighbors',
                   'gradient_boosting', 'ard_regression',
                   'gradient_boosting', 'adaboost', 'gradient_boosting',
                   'libsvm_svr', 'extra_trees', 'gradient_boosting',
                   'k_nearest_neighbors', 'gradient_boosting',
                   'ard_regression', 'gradient_boosting',
                   'gaussian_process', 'gradient_boosting',
                   'ard_regression'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U19'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'minmax', 'normalize', 'none',
                   'robust_scaler', 'standardize', 'standardize',
                   'minmax', 'normalize', 'normalize',
                   'quantile_transformer', 'normalize', 'none', 'none',
                   'robust_scaler', 'quantile_transformer', 'normalize',
                   'robust_scaler', 'minmax', 'minmax', 'normalize',
                   'normalize', 'quantile_transformer', 'minmax',
                   'standardize', 'minmax', 'robust_scaler',
                   'quantile_transformer', 'none', 'quantile_transformer',
                   'robust_scaler', 'quantile_transformer', 'none',
                   'standardize', 'quantile_transformer', 'normalize',
                   'robust_scaler', 'none', 'robust_scaler',
                   'standardize', 'quantile_transformer', 'minmax',
                   'none', 'none', 'minmax', 'normalize', 'robust_scaler',
                   'quantile_transformer', 'normalize', 'normalize',
                   'robust_scaler', 'robust_scaler',
                   'quantile_transformer', 'quantile_transformer',
                   'normalize', 'quantile_transformer', 'standardize',
                   'minmax', 'standardize', 'standardize'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', --, 'True', 'True', 'True', 'False', 'False',
                   --, 'False', 'True', 'False', --, --, --, --, --,
                   'False', 'True', 'False', 'True', 'False', 'False',
                   'True', --, 'True', --, --, 'False', 'True', 'False',
                   --, 'False', --, --, 'True', 'False', --, 'True', --,
                   --, 'False', --, --, 'True', --, --, --, 'False',
                   'True', 'True', 'True', --, 'False', --, 'False', --,
                   'False', --, --, 'True'],
             mask=[False,  True, False, False, False, False, False,  True,
                   False, False, False,  True,  True,  True,  True,  True,
                   False, False, False, False, False, False, False,  True,
                   False,  True,  True, False, False, False,  True, False,
                    True,  True, False, False,  True, False,  True,  True,
                   False,  True,  True, False,  True,  True,  True, False,
                   False, False, False,  True, False,  True, False,  True,
                   False,  True,  True, False],
       fill_value='N/A',
            dtype='<U5'), 'param_preprocessor:extra_trees_preproc_for_regression:bootstrap': masked_array(data=[--, --, --, 'False', --, --, --, --, --, --, 'True',
                   'False', --, --, --, 'True', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, 'False', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:criterion': masked_array(data=[--, --, --, 'mae', --, --, --, --, --, --, 'mse',
                   'mae', --, --, --, 'mse', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'mae', --, --, --, --, --, --, --, 'mse', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_depth': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, 'None',
                   'None', --, --, --, 'None', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, 'None', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_features': masked_array(data=[--, --, --, 0.38188032743754285, --, --, --, --, --,
                   --, 0.24856760535207326, 0.3574146270769857, --, --,
                   --, 0.6071685062485819, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.3803145255143281, --, --, --, --, --, --, --, 1.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, 'None',
                   'None', --, --, --, 'None', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, 'None', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': masked_array(data=[--, --, --, 7.0, --, --, --, --, --, --, 1.0, 12.0, --,
                   --, --, 13.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 8.0, --,
                   --, --, --, --, --, --, 1.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_split': masked_array(data=[--, --, --, 15.0, --, --, --, --, --, --, 2.0, 3.0, --,
                   --, --, 9.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 19.0, --,
                   --, --, --, --, --, --, 2.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': masked_array(data=[--, --, --, 0.0, --, --, --, --, --, --, 0.0, 0.0, --,
                   --, --, 0.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 0.0, --,
                   --, --, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:n_estimators': masked_array(data=[--, --, --, 100.0, --, --, --, --, --, --, 100.0,
                   100.0, --, --, --, 100.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, --, --, --, --, --, --, 100.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, 'deflation', --, --, --, 'deflation', --, --, --,
                   --, --, --, 'deflation', --, --, --, --, --,
                   'deflation', 'deflation', --, 'deflation', --, --, --,
                   'deflation', --, 'deflation', --, 'parallel', --,
                   'deflation', --, 'parallel', --, --, --, --, --,
                   'deflation', --, 'deflation', --, --, --, --, --,
                   'parallel', 'parallel', --, --, --, 'deflation',
                   'parallel', --, --, --, --, 'parallel', 'deflation'],
             mask=[ True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False, False,  True, False,  True,  True,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True, False, False,  True,  True,
                    True,  True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, 'exp', --, --, --, 'exp', --, --, --, --, --, --,
                   'exp', --, --, --, --, --, 'exp', 'exp', --, 'exp', --,
                   --, --, 'exp', --, 'exp', --, 'cube', --, 'exp', --,
                   'exp', --, --, --, --, --, 'exp', --, 'cube', --, --,
                   --, --, --, 'logcosh', 'cube', --, --, --, 'exp',
                   'exp', --, --, --, --, 'exp', 'exp'],
             mask=[ True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False, False,  True, False,  True,  True,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True, False, False,  True,  True,
                    True,  True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, 'True', --, --, --, 'True', --, --, --, --, --, --,
                   'False', --, --, --, --, --, 'True', 'True', --,
                   'True', --, --, --, 'True', --, 'True', --, 'True', --,
                   'True', --, 'True', --, --, --, --, --, 'True', --,
                   'True', --, --, --, --, --, 'False', 'True', --, --,
                   --, 'True', 'False', --, --, --, --, 'True', 'True'],
             mask=[ True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False, False,  True, False,  True,  True,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True, False, False,  True,  True,
                    True,  True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'cosine', --, --, 'euclidean', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'euclidean',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'complete', --, --, 'ward', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'ward', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 194.0, --, --, 267.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 197.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'median', --, --, 'mean', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'mean', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   7.103001745334331, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   2814.0, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, --, --, 0.616784696253029, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.9222528108151589, --, 0.5923389332585389, --, --, --,
                   --, --, --, --, 0.5105675929335457, --, --, --, --, --,
                   --, --, --, --, --, 0.7292959445232323, --, --, --, --,
                   --, --, 0.7851085868664173, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, --, --, 'True', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'False', --,
                   'False', --, --, --, --, --, --, --, 'True', --, --,
                   --, --, --, --, --, --, --, --, 'True', --, --, --, --,
                   --, --, 'False', --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, --, --, --, --, --, --, 3.0, --, --, --, --, --,
                   3.0, 3.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 3.0, --, --, --, --, --, --, 2.0, 2.0, --, 2.0,
                   --, --, --, 2.0, --, --, --, --, --, --, --, --, --,
                   --, --, 2.0, --, --, 3.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False, False,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True, False,  True,  True],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, --, --, --, --, --, --, 'False', --, --, --, --,
                   --, 'True', 'False', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'True', --, --, --, --, --, --,
                   'True', 'True', --, 'False', --, --, --, 'True', --,
                   --, --, --, --, --, --, --, --, --, --, 'True', --, --,
                   'False', --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False, False,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, --, --, --, --, --, --, 'False', --, --, --, --,
                   --, 'True', 'True', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 'True', --, --, --, --, --, --,
                   'False', 'False', --, 'False', --, --, --, 'False', --,
                   --, --, --, --, --, --, --, --, --, --, 'False', --,
                   --, 'False', --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False, False,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, 'False', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 'True', --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, 3.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 5.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, 'None', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'None', --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, 14.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 3.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, 3.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 2.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, 1.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 1.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, 97.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 60.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:percentile': masked_array(data=[--, --, --, --, --, --, 65.91486046775462, --, --, --,
                   --, --, --, --, --, --, 88.51568792079165, --, --, --,
                   --, --, --, 50.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   41.457315930958096, --, 17.978085170806185, --, --, --,
                   --, --, --, --, --, --, 34.7621620160826, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:score_func': masked_array(data=[--, --, --, --, --, --, 'mutual_info', --, --, --, --,
                   --, --, --, --, --, 'mutual_info', --, --, --, --, --,
                   --, 'f_regression', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   'mutual_info', --, 'mutual_info', --, --, --, --, --,
                   --, --, --, --, 'f_regression', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:learning_rate': masked_array(data=[--, --, --, 0.32325707680148597, --, --, --, --, --,
                   --, 1.5037210102001854, --, --, --, --, --, --,
                   0.022213088865584908, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.037048336695677274, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.18477441778876663, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:loss': masked_array(data=[--, --, --, 'linear', --, --, --, --, --, --, 'linear',
                   --, --, --, --, --, --, 'exponential', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'linear', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'exponential', --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:max_depth': masked_array(data=[--, --, --, 6.0, --, --, --, --, --, --, 8.0, --, --,
                   --, --, --, --, 8.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 2.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 2.0, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:n_estimators': masked_array(data=[--, --, --, 494.0, --, --, --, --, --, --, 261.0, --,
                   --, --, --, --, --, 144.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 476.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 138.0, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_1': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   0.0003914660548980591, --, --, 4.448305327115311e-05,
                   0.00062814604027236, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.0005141773115733895, --, --, --, --, --,
                   0.0003316290720366683, --, --, --, --, --, --, --, --,
                   0.000629565767437561, --, --, --,
                   0.0009746062660128067],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_2': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   0.00019934715308115043, --, --, 0.000112914413021726,
                   0.0005612164781460305, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 3.2280508576043108e-09, --, --, --, --, --,
                   1.987422074257595e-06, --, --, --, --, --, --, --, --,
                   4.875867954350646e-09, --, --, --,
                   2.7162629611164865e-07],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:ard_regression:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'True', --,
                   --, 'True', 'True', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, 'True', --, --, --, --,
                   --, --, --, --, 'True', --, --, --, 'True'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ard_regression:lambda_1': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   2.7458666816933006e-09, --, --, 1.0847871463163737e-09,
                   0.0003896491564719217, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 4.891887535915178e-05, --, --, --, --, --,
                   4.394363508576049e-08, --, --, --, --, --, --, --, --,
                   4.2517714218614236e-05, --, --, --,
                   1.5237750361496798e-07],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:ard_regression:lambda_2': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   4.6439675780027556e-10, --, --, 3.7936435307263186e-08,
                   0.0003176063480382787, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 1.507872426004613e-08, --, --, --, --, --,
                   8.978474215048388e-10, --, --, --, --, --, --, --, --,
                   3.8547912596695126e-08, --, --, --,
                   3.246018359828448e-08],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:ard_regression:n_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 300.0, --,
                   --, 300.0, 300.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 300.0, --, --, --, --, --, 300.0, --, --, --, --,
                   --, --, --, --, 300.0, --, --, --, 300.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:ard_regression:threshold_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   2161.4307261894483, --, --, 35831.58634144192,
                   83917.02382000348, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 11332.577220460575, --, --, --, --, --,
                   4337.75199243961, --, --, --, --, --, --, --, --,
                   3651.447393208297, --, --, --, 13572.935515560353],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:ard_regression:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   0.00012122899583293209, --, --, 3.869948335291496e-05,
                   0.0005862841147544614, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.0011298975091125953, --, --, --, --, --,
                   1.387991003027353e-05, --, --, --, --, --, --, --, --,
                   0.000933873034469038, --, --, --,
                   0.0008797250430209753],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:extra_trees:bootstrap': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:criterion': masked_array(data=[--, 'friedman_mse', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'friedman_mse', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'mae', --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_depth': masked_array(data=[--, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'None',
                   --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_features': masked_array(data=[--, 0.42650650864385875, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.5148104984651863, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.8178369589072358, --, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:max_leaf_nodes': masked_array(data=[--, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'None',
                   --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:min_impurity_decrease': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 0.0,
                   --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_leaf': masked_array(data=[--, 13.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   5.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 7.0,
                   --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_split': masked_array(data=[--, 9.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   10.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 19.0,
                   --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:n_estimators': masked_array(data=[--, 100.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 100.0,
                   --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:alpha': masked_array(data=[--, --, --, --, --, --, --, --, 5.6780190186943086e-11,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.0009089390574444633, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaL': masked_array(data=[--, --, --, --, --, --, --, --, 1.2818152833512612e-10,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 1.050607496571297e-09, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaU': masked_array(data=[--, --, --, --, --, --, --, --, 154.54510155284996, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 2134.0188587797415, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, 0.15918994930520844, --, --, --,
                   --, --, --, --, --, --, --, --, --, 0.8486219960024226,
                   0.5415846207792696, 0.02895165017514208,
                   0.9092779988863511, 0.6805532803718212,
                   0.5415846207792696, --, 0.5415846207792696, --,
                   0.8486219960024226, --, 0.0598998124121741, --,
                   0.9092779988863511, --, 0.166980040023611, --,
                   0.02895165017514208, --, 0.018090158207427452, --,
                   0.12369899740204612, --, 0.014704397532340815,
                   0.054503589112656806, 0.7837828419558756, --,
                   0.5415846207792696, --, 0.08028344641760744, --,
                   0.018090158207427452, --, --, 0.7977379960789651, --,
                   0.7858679241028886, --, 0.0370024975748607, --,
                   0.03470463986900533, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, 'ls', --, --, --, --, --, --, --,
                   --, --, --, --, --, 'quantile', 'huber', 'lad', 'ls',
                   'lad', 'huber', --, 'huber', --, 'quantile', --, 'ls',
                   --, 'ls', --, 'huber', --, 'huber', --, 'huber', --,
                   'huber', --, 'ls', 'lad', 'huber', --, 'huber', --,
                   'lad', --, 'huber', --, --, 'lad', --, 'ls', --,
                   'quantile', --, 'ls', --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, 2.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, 9.0, 5.0, 7.0, 3.0, 6.0, 5.0, --,
                   5.0, --, 9.0, --, 3.0, --, 3.0, --, 9.0, --, 7.0, --,
                   4.0, --, 5.0, --, 10.0, 1.0, 9.0, --, 5.0, --, 6.0, --,
                   7.0, --, --, 3.0, --, 3.0, --, 4.0, --, 7.0, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_features': masked_array(data=[--, --, --, --, --, 0.7535406518729681, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.854801719198111,
                   0.8831613537777819, 0.5361345207630502,
                   0.2558895820074335, 0.3617703809052838,
                   0.8831613537777819, --, 0.9708789378582714, --,
                   0.854801719198111, --, 0.2726831476708919, --,
                   0.2558895820074335, --, 0.4630676926787265, --,
                   0.5361345207630502, --, 0.5649657561914808, --,
                   0.9708789378582714, --, 0.3023529391930165,
                   0.8590225932353865, 0.5961071999733386, --,
                   0.8831613537777819, --, 0.3617703809052838, --,
                   0.5649657561914808, --, --, 0.2558895820074335, --,
                   0.593819319133112, --, 0.9599144449725597, --,
                   0.10958007657052105, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, 'None', --, --, --, --, --, --, --,
                   --, --, --, --, --, 'None', 'None', 'None', 'None',
                   'None', 'None', --, 'None', --, 'None', --, 'None', --,
                   'None', --, 'None', --, 'None', --, 'None', --, 'None',
                   --, 'None', 'None', 'None', --, 'None', --, 'None', --,
                   'None', --, --, 'None', --, 'None', --, 'None', --,
                   'None', --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:min_impurity_decrease': masked_array(data=[--, --, --, --, --, 0.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, --,
                   0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --,
                   0.0, --, 0.0, --, 0.0, 0.0, 0.0, --, 0.0, --, 0.0, --,
                   0.0, --, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, 16.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, 15.0, 11.0, 9.0, 19.0, 3.0, 11.0,
                   --, 11.0, --, 15.0, --, 4.0, --, 19.0, --, 12.0, --,
                   9.0, --, 16.0, --, 11.0, --, 16.0, 17.0, 18.0, --,
                   14.0, --, 3.0, --, 9.0, --, --, 19.0, --, 12.0, --,
                   15.0, --, 16.0, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_split': masked_array(data=[--, --, --, --, --, 13.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, 18.0, 13.0, 2.0, 18.0, 9.0, 13.0,
                   --, 13.0, --, 18.0, --, 15.0, --, 14.0, --, 13.0, --,
                   2.0, --, 7.0, --, 13.0, --, 15.0, 20.0, 20.0, --, 13.0,
                   --, 9.0, --, 7.0, --, --, 14.0, --, 6.0, --, 8.0, --,
                   9.0, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, 0.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, --,
                   0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --,
                   0.0, --, 0.0, --, 0.0, 0.0, 0.0, --, 0.0, --, 0.0, --,
                   0.0, --, --, 0.0, --, 0.0, --, 0.0, --, 0.0, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, 195.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, 389.0, 334.0, 392.0, 452.0, 204.0,
                   404.0, --, 178.0, --, 389.0, --, 376.0, --, 452.0, --,
                   109.0, --, 392.0, --, 245.0, --, 178.0, --, 148.0,
                   394.0, 274.0, --, 404.0, --, 204.0, --, 245.0, --, --,
                   452.0, --, 227.0, --, 176.0, --, 310.0, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:subsample': masked_array(data=[--, --, --, --, --, 0.4955741598265856, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.019340413217419968,
                   0.2796713122438508, 0.23101616506345574,
                   0.5782360003566183, 0.12728945457497592,
                   0.2796713122438508, --, 0.2796713122438508, --,
                   0.019340413217419968, --, 0.8241147245420409, --,
                   0.5782360003566183, --, 0.6322169263296291, --,
                   0.23101616506345574, --, 0.017168075893407495, --,
                   0.27766772419949526, --, 0.8152637661249722,
                   0.16087235038178166, 0.23437443925637716, --,
                   0.2576535758337105, --, 0.12728945457497592, --,
                   0.017168075893407495, --, --, 0.5782360003566183, --,
                   0.09316364761358661, --, 0.6147010763910453, --,
                   0.06747090911356053, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True, False,  True, False,  True, False,
                    True, False, False, False,  True, False,  True, False,
                    True, False,  True,  True, False,  True, False,  True,
                   False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 6.0, --,
                   --, --, --, --, --, --, --, --, --, --, 1.0, --, --,
                   --, --, --, --, --, 27.0, --, --, --, --, --, --, --,
                   --, 54.0, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:p': masked_array(data=[--, --, 2.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 2.0, --,
                   --, --, --, --, --, --, --, --, --, --, 2.0, --, --,
                   --, --, --, --, --, 1.0, --, --, --, --, --, --, --,
                   --, 2.0, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:weights': masked_array(data=[--, --, 'uniform', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   'uniform', --, --, --, --, --, --, --, --, --, --, --,
                   'uniform', --, --, --, --, --, --, --, 'distance', --,
                   --, --, --, --, --, --, --, 'uniform', --, --, --, --,
                   --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   0.820936401111195, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   14296.894431999228, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   0.011820422524358349, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.11386736948981817, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 'poly',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'linear', --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:max_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, -1.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, -1.0, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:shrinking': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 'True',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'True', --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   0.003169502327187765, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 4.017492099131629e-05, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, 'False', 'True', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'True', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_regressor:random_forest:criterion': masked_array(data=['mse', --, --, --, --, --, 'friedman_mse',
                   'friedman_mse', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'mae',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U12'), 'param_regressor:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, 'None', 'None', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'None', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:max_features': masked_array(data=[1.0, --, --, --, --, --, 0.11778420330056738,
                   0.16286302166148908, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.8414232728771526, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, 'None', 'None', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'None', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, 0.0, 0.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, 4.0, 2.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 11.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, 15.0, 8.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 10.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, 0.0, 0.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.0, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, 100.0, 100.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 100.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0022267722436447018, --, --, 0.004557508487979205,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, 'True', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ridge_regression:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0022831891834827287, --, --, 0.014136586381792625,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   4.030639659342745e-06, --, --, --, --, --,
                   2.0720677001315385e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, 'True', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, 'True', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'constant', --, --, --, --, --, 'invscaling', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'l1', --, --, --, --, --, 'l2', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.02176530787243175, --, --, --, --, --,
                   0.050274601185389366, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, 0.5, --, --, --, --, 0.5, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 0.5, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:booster': masked_array(data=[--, --, --, --, 'dart', --, --, --, --, 'gbtree', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'dart', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, 0.20790228782418774, --, --, --, --,
                   0.7383412784981492, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.18670021571617046, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, 0.6964083329091856, --, --, --, --,
                   0.5253831500231004, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.7396025751456639, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, 0.0, --, --, --, --, 0.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 0.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, 0.016016142945594468, --, --, --, --,
                   0.012183185082319749, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.011370953397634255, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, 0.0, --, --, --, --, 0.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 0.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, 9.0, --, --, --, --, 10.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 9.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, 19.0, --, --, --, --, 8.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 5.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, 512.0, --, --, --, --, 512.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 512.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, 6.688757380096515e-09, --, --, --, --,
                   1.0482669890270454e-08, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 1.8482595949495837e-08, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, 4.600483498731673e-08, --, --, --, --,
                   7.969590330955319e-06, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.0015998122041927785, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, 1.0, --, --, --, --, 1.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 1.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, 0.22194664159330835, --, --, --, --,
                   0.9283260557293931, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.2662368959251735, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 394.0, --, --,
                   --, --, 1681.0, --, --, --, --, --, --, 56.0, --, --,
                   --, --, 1000.0, --, 136.0, --, 1000.0, --, --, 35.0,
                   --, --, --, --, --, 1469.0, --, --, --, --, --, --,
                   56.0, --, --, --, --, 1000.0, 646.0, --, 1749.0, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True, False,  True, False,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False, False,  True, False,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'uniform', --,
                   --, --, --, 'normal', --, --, --, --, --, --, 'normal',
                   --, --, --, --, 'uniform', --, 'uniform', --,
                   'uniform', --, --, 'uniform', --, --, --, --, --,
                   'normal', --, --, --, --, --, --, 'normal', --, --, --,
                   --, 'uniform', 'normal', --, 'uniform', --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True, False,  True, False,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False, False,  True, False,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, 0.8748314006225273, --, --, --, --, --,
                   --, --, --, --, 0.8481206426775242, --, --,
                   0.7750826582071604, --, --, --, --, --, --, --, --,
                   0.9399843291111637, --, --, --, 0.8900420591871744, --,
                   --, --, --, --, 0.9173661901802149, --,
                   0.7604296240253136, --, --, --, --, --, --, --,
                   0.7480708001778895, --, --, --, 0.9716519608171985,
                   0.8242926454702025, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True, False, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, 0.23302727781111088, --, --, --, --,
                   --, --, --, --, --, 0.2723027972074355, --, --,
                   0.1400640782198558, --, --, --, --, --, --, --, --,
                   0.2729683319659096, --, --, --, 0.12509983051963838,
                   --, --, --, --, --, 0.2617414935794013, --,
                   0.037820680702001085, --, --, --, --, --, --, --,
                   0.022775942230044737, --, --, --, 0.20000229221013058,
                   0.14545328535824323, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True,  True, False,  True, False,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True, False, False,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, 0.013857361155308811, 0.005317096895346532,
                   0.0026456078235203894, --, --, --, --,
                   0.00024764950918479536, --, --, --, --, --, --, --,
                   0.02933695021953836, --, 0.004115638565672288, --, --,
                   0.005082456335625295, --, 0.00015553112665842747, --,
                   --, --, 0.050371496029170515, --, --, --, --, --,
                   0.0014819399290182586, --, --, 0.16765538107922254, --,
                   --, --, --, --, 0.006759170291889307, --, --, --, --,
                   0.0013753747530966347, 0.16765538107922254,
                   0.001521474918301074, --, --, --, --, --, --, --, --,
                   0.27321738863184414],
             mask=[False,  True, False, False, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                   False, False, False,  True,  True,  True,  True,  True,
                    True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, 668.0, --, --, --, 1011.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, 1142.0, 993.0, --, 172.0, --,
                   --, --, 993.0, --, 1142.0, --, 1050.0, --, 172.0, --,
                   136.0, --, --, --, --, --, 906.0, --, 531.0, --, --,
                   --, --, --, --, 1955.0, --, --, --, 172.0, --, --, --,
                   --, --, 1479.0, 1221.0],
             mask=[ True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True, False,  True,  True,
                    True, False,  True, False,  True, False,  True, False,
                    True, False,  True,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False, False],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, 0.9634180741572713, 0.9258978475522102,
                   --, --, --, 0.9258978475522102, --, 0.9258978475522102,
                   --, 0.9634180741572713, --, --, --, --, --,
                   0.9827382067804598, --, 0.9, --, 0.9522029661642115,
                   --, 0.9258978475522102, --, --, --, 0.8000935366744397,
                   --, 0.8994687015502147, --, --, --, 0.9522029661642115,
                   --, --, --, --, --, --, 0.9326246968786949, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True,  True, False,
                    True, False,  True, False,  True,  True,  True,  True,
                    True, False,  True, False,  True, False,  True, False,
                    True,  True,  True, False,  True, False,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   0.9772471747872822, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 2.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   8.106199652464777e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.00459995113113189, --, --, --, --, --,
                   0.029255700648187773, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   5.871104258362839e-07, --, --, --, --, --,
                   1.7396222617246842e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.35575081657915064, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, 'forest', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'tree',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, 0.17201186931366286, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.06306101221344254, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, 'weighted', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   'weighted', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32')}