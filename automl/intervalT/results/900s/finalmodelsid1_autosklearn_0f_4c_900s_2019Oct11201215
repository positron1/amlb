[(0.460000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'friedman_mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.1746997072456618, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 10, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 13, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:random_forest:bootstrap': 'False', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.1453593138682401, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 11, 'regressor:random_forest:min_samples_split': 10, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.280000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.24856760535207326, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 1.5037210102001854, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 8, 'regressor:adaboost:n_estimators': 261, 'rescaling:quantile_transformer:n_quantiles': 394, 'rescaling:quantile_transformer:output_distribution': 'uniform'},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.100000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'gbtree', 'regressor:xgradient_boosting:colsample_bylevel': 0.7383412784981492, 'regressor:xgradient_boosting:colsample_bytree': 0.5253831500231004, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.012183185082319749, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 8, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.0482669890270454e-08, 'regressor:xgradient_boosting:reg_lambda': 7.969590330955319e-06, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.9283260557293931, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00024764950918479536},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.080000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'decision_tree', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.9584800395379466, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 2, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 18, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:decision_tree:criterion': 'mae', 'regressor:decision_tree:max_depth_factor': 0.7447649123653632, 'regressor:decision_tree:max_features': 1.0, 'regressor:decision_tree:max_leaf_nodes': 'None', 'regressor:decision_tree:min_impurity_decrease': 0.0, 'regressor:decision_tree:min_samples_leaf': 17, 'regressor:decision_tree:min_samples_split': 11, 'regressor:decision_tree:min_weight_fraction_leaf': 0.0, 'rescaling:robust_scaler:q_max': 0.9885115715951779, 'rescaling:robust_scaler:q_min': 0.002847371578831008},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.040000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.6958393732186486, 'regressor:xgradient_boosting:colsample_bytree': 0.9952958275909765, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.06229226041392443, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 17, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 5.592733586536924e-07, 'regressor:xgradient_boosting:reg_lambda': 2.1224243753832166e-09, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.04619922108828106, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.4058519723541354, 'regressor:xgradient_boosting:sample_type': 'weighted'},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'decision_tree', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:decision_tree:criterion': 'friedman_mse', 'regressor:decision_tree:max_depth_factor': 0.9357746321268203, 'regressor:decision_tree:max_features': 1.0, 'regressor:decision_tree:max_leaf_nodes': 'None', 'regressor:decision_tree:min_impurity_decrease': 0.0, 'regressor:decision_tree:min_samples_leaf': 4, 'regressor:decision_tree:min_samples_split': 6, 'regressor:decision_tree:min_weight_fraction_leaf': 0.0, 'rescaling:quantile_transformer:n_quantiles': 537, 'rescaling:quantile_transformer:output_distribution': 'normal'},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
(0.020000, SimpleRegressionPipeline({'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 10, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 5, 'preprocessor:random_trees_embedding:min_samples_split': 16, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 82, 'regressor:adaboost:learning_rate': 0.08456235710289968, 'regressor:adaboost:loss': 'square', 'regressor:adaboost:max_depth': 10, 'regressor:adaboost:n_estimators': 207, 'rescaling:quantile_transformer:n_quantiles': 1105, 'rescaling:quantile_transformer:output_distribution': 'normal'},
dataset_properties={
  'task': 4,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'regression',
  'signed': False})),
]{'mean_test_score': array([ 0.6783787 ,  0.        , -0.99489016,  0.69623221,  0.6938544 ,
        0.        ,  0.6741119 ,  0.68806926, -0.05467904,  0.66877695,
        0.69621657,  0.68485345,  0.69607172,  0.0143845 , -0.23751726,
       -1.10505   ,  0.66191568,  0.67712215,  0.67938033,  0.69603863,
        0.67872876, -0.05998896, -0.00149931, -0.04784588,  0.        ,
        0.        , -0.1731889 ,  0.        ,  0.        ]), 'mean_fit_time': array([  4.52862811,  16.33646536,   0.96793985,   2.46869683,
         8.93643045,   8.08634639,  62.8220768 ,  63.13936639,
         3.52974606,  17.48685431,  13.65511584,  76.24535751,
         6.65397143,   1.84855604,  84.11546326,   8.59782696,
         5.16945386, 297.01649809,  64.77633214,   2.20430207,
       199.43157506,   2.06824374,   8.08093214,  33.10948849,
       275.15114856, 504.15292382, 716.3384347 , 149.20137095,
       888.12981939]), 'params': [{'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 1.0, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 1, 'regressor:random_forest:min_samples_split': 2, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'gaussian_process', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:gaussian_process:alpha': 0.4979038910307746, 'regressor:gaussian_process:thetaL': 4.4058405235395794e-07, 'regressor:gaussian_process:thetaU': 774.0094917753954}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.013857361155308811}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.24856760535207326, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:adaboost:learning_rate': 1.5037210102001854, 'regressor:adaboost:loss': 'linear', 'regressor:adaboost:max_depth': 8, 'regressor:adaboost:n_estimators': 261, 'rescaling:quantile_transformer:n_quantiles': 394, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'minmax', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:ridge_regression:alpha': 0.003854247807639906, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.07319922429424819, 'preprocessor:fast_ica:n_components': 136}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'none', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False', 'regressor:libsvm_svr:C': 0.820936401111195, 'regressor:libsvm_svr:epsilon': 0.011820422524358349, 'regressor:libsvm_svr:kernel': 'poly', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 0.003169502327187765, 'regressor:libsvm_svr:coef0': 0.9772471747872822, 'regressor:libsvm_svr:degree': 2, 'regressor:libsvm_svr:gamma': 8.106199652464777e-05}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 10, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 5, 'preprocessor:random_trees_embedding:min_samples_split': 16, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 82, 'regressor:adaboost:learning_rate': 0.08456235710289968, 'regressor:adaboost:loss': 'square', 'regressor:adaboost:max_depth': 10, 'regressor:adaboost:n_estimators': 207, 'rescaling:quantile_transformer:n_quantiles': 1105, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 3, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 14, 'preprocessor:random_trees_embedding:min_samples_split': 3, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 97, 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.20790228782418774, 'regressor:xgradient_boosting:colsample_bytree': 0.6964083329091856, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.016016142945594468, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 19, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 6.688757380096515e-09, 'regressor:xgradient_boosting:reg_lambda': 4.600483498731673e-08, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.22194664159330835, 'rescaling:robust_scaler:q_max': 0.8748314006225273, 'rescaling:robust_scaler:q_min': 0.23302727781111088, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0026456078235203894, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.17201186931366286, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 3, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 20, 'preprocessor:random_trees_embedding:min_samples_split': 19, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 37, 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.13269829895529092, 'regressor:xgradient_boosting:colsample_bytree': 0.37739318109262465, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.13677422703132558, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 2, 'regressor:xgradient_boosting:min_child_weight': 0, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 0.0005098732703179379, 'regressor:xgradient_boosting:reg_lambda': 1.3494062711485076e-05, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.36385126375609084, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.3097493242527808, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'gbtree', 'regressor:xgradient_boosting:colsample_bylevel': 0.7383412784981492, 'regressor:xgradient_boosting:colsample_bytree': 0.5253831500231004, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.012183185082319749, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 8, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.0482669890270454e-08, 'regressor:xgradient_boosting:reg_lambda': 7.969590330955319e-06, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.9283260557293931, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00024764950918479536}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'standardize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'friedman_mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.1746997072456618, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 10, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 13, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:random_forest:bootstrap': 'False', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.1453593138682401, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 11, 'regressor:random_forest:min_samples_split': 10, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'robust_scaler', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.8414232728771526, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 11, 'regressor:random_forest:min_samples_split': 10, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8900420591871744, 'rescaling:robust_scaler:q_min': 0.12509983051963838}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'decision_tree', 'rescaling:__choice__': 'quantile_transformer', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:decision_tree:criterion': 'friedman_mse', 'regressor:decision_tree:max_depth_factor': 0.9357746321268203, 'regressor:decision_tree:max_features': 1.0, 'regressor:decision_tree:max_leaf_nodes': 'None', 'regressor:decision_tree:min_impurity_decrease': 0.0, 'regressor:decision_tree:min_samples_leaf': 4, 'regressor:decision_tree:min_samples_split': 6, 'regressor:decision_tree:min_weight_fraction_leaf': 0.0, 'rescaling:quantile_transformer:n_quantiles': 537, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'regressor:__choice__': 'sgd', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'ward', 'preprocessor:feature_agglomeration:n_clusters': 197, 'preprocessor:feature_agglomeration:pooling_func': 'mean', 'regressor:sgd:alpha': 2.0720677001315385e-05, 'regressor:sgd:average': 'True', 'regressor:sgd:fit_intercept': 'True', 'regressor:sgd:learning_rate': 'invscaling', 'regressor:sgd:loss': 'squared_epsilon_insensitive', 'regressor:sgd:penalty': 'l2', 'regressor:sgd:tol': 0.050274601185389366, 'rescaling:quantile_transformer:n_quantiles': 35, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0014819399290182586, 'regressor:sgd:epsilon': 0.029255700648187773, 'regressor:sgd:eta0': 1.7396222617246842e-05, 'regressor:sgd:power_t': 0.35575081657915064}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'normalize', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mae', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.8313815269280351, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 4, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:random_forest:bootstrap': 'False', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.5651680396938628, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 12, 'regressor:random_forest:min_samples_split': 11, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'k_nearest_neighbors', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:k_nearest_neighbors:n_neighbors': 1, 'regressor:k_nearest_neighbors:p': 2, 'regressor:k_nearest_neighbors:weights': 'uniform', 'rescaling:robust_scaler:q_max': 0.9173661901802149, 'rescaling:robust_scaler:q_min': 0.2617414935794013}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'regressor:__choice__': 'gradient_boosting', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'True', 'regressor:gradient_boosting:learning_rate': 0.15918994930520844, 'regressor:gradient_boosting:loss': 'ls', 'regressor:gradient_boosting:max_depth': 2, 'regressor:gradient_boosting:max_features': 0.7535406518729681, 'regressor:gradient_boosting:max_leaf_nodes': 'None', 'regressor:gradient_boosting:min_impurity_decrease': 0.0, 'regressor:gradient_boosting:min_samples_leaf': 16, 'regressor:gradient_boosting:min_samples_split': 13, 'regressor:gradient_boosting:min_weight_fraction_leaf': 0.0, 'regressor:gradient_boosting:n_estimators': 195, 'regressor:gradient_boosting:subsample': 0.4955741598265856, 'preprocessor:fast_ica:n_components': 1011}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.6958393732186486, 'regressor:xgradient_boosting:colsample_bytree': 0.9952958275909765, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.06229226041392443, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 10, 'regressor:xgradient_boosting:min_child_weight': 17, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 5.592733586536924e-07, 'regressor:xgradient_boosting:reg_lambda': 2.1224243753832166e-09, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.04619922108828106, 'regressor:xgradient_boosting:normalize_type': 'forest', 'regressor:xgradient_boosting:rate_drop': 0.4058519723541354, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'minmax', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:random_forest:bootstrap': 'True', 'regressor:random_forest:criterion': 'friedman_mse', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.16286302166148908, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 2, 'regressor:random_forest:min_samples_split': 8, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_regression', 'regressor:__choice__': 'decision_tree', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_regression:criterion': 'mse', 'preprocessor:extra_trees_preproc_for_regression:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_regression:max_features': 0.9584800395379466, 'preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 2, 'preprocessor:extra_trees_preproc_for_regression:min_samples_split': 18, 'preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_regression:n_estimators': 100, 'regressor:decision_tree:criterion': 'mae', 'regressor:decision_tree:max_depth_factor': 0.7447649123653632, 'regressor:decision_tree:max_features': 1.0, 'regressor:decision_tree:max_leaf_nodes': 'None', 'regressor:decision_tree:min_impurity_decrease': 0.0, 'regressor:decision_tree:min_samples_leaf': 17, 'regressor:decision_tree:min_samples_split': 11, 'regressor:decision_tree:min_weight_fraction_leaf': 0.0, 'rescaling:robust_scaler:q_max': 0.9885115715951779, 'rescaling:robust_scaler:q_min': 0.002847371578831008}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'xgradient_boosting', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:xgradient_boosting:base_score': 0.5, 'regressor:xgradient_boosting:booster': 'dart', 'regressor:xgradient_boosting:colsample_bylevel': 0.18670021571617046, 'regressor:xgradient_boosting:colsample_bytree': 0.7396025751456639, 'regressor:xgradient_boosting:gamma': 0, 'regressor:xgradient_boosting:learning_rate': 0.011370953397634255, 'regressor:xgradient_boosting:max_delta_step': 0, 'regressor:xgradient_boosting:max_depth': 9, 'regressor:xgradient_boosting:min_child_weight': 5, 'regressor:xgradient_boosting:n_estimators': 512, 'regressor:xgradient_boosting:reg_alpha': 1.8482595949495837e-08, 'regressor:xgradient_boosting:reg_lambda': 0.0015998122041927785, 'regressor:xgradient_boosting:scale_pos_weight': 1, 'regressor:xgradient_boosting:subsample': 0.2662368959251735, 'rescaling:robust_scaler:q_max': 0.7604296240253136, 'rescaling:robust_scaler:q_min': 0.037820680702001085, 'regressor:xgradient_boosting:normalize_type': 'tree', 'regressor:xgradient_boosting:rate_drop': 0.06306101221344254, 'regressor:xgradient_boosting:sample_type': 'weighted'}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'kitchen_sinks', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:kitchen_sinks:gamma': 2.7682211429805217, 'preprocessor:kitchen_sinks:n_components': 303, 'regressor:ridge_regression:alpha': 0.09285460444980502, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.0011317588813212203, 'rescaling:robust_scaler:q_max': 0.9429130184194063, 'rescaling:robust_scaler:q_min': 0.13721138271047453}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_regression', 'regressor:__choice__': 'ridge_regression', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:select_percentile_regression:percentile': 88.51568792079165, 'preprocessor:select_percentile_regression:score_func': 'mutual_info', 'regressor:ridge_regression:alpha': 0.004557508487979205, 'regressor:ridge_regression:fit_intercept': 'True', 'regressor:ridge_regression:tol': 0.014136586381792625}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'adaboost', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 4, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 4, 'preprocessor:random_trees_embedding:min_samples_split': 12, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 63, 'regressor:adaboost:learning_rate': 1.3051220838168254, 'regressor:adaboost:loss': 'exponential', 'regressor:adaboost:max_depth': 7, 'regressor:adaboost:n_estimators': 124, 'rescaling:robust_scaler:q_max': 0.9452822191910815, 'rescaling:robust_scaler:q_min': 0.15556589202961435, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.00016373719698778923}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'regressor:__choice__': 'libsvm_svr', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:pca:keep_variance': 0.7851085868664173, 'preprocessor:pca:whiten': 'False', 'regressor:libsvm_svr:C': 14296.894431999228, 'regressor:libsvm_svr:epsilon': 0.11386736948981817, 'regressor:libsvm_svr:kernel': 'linear', 'regressor:libsvm_svr:max_iter': -1, 'regressor:libsvm_svr:shrinking': 'True', 'regressor:libsvm_svr:tol': 4.017492099131629e-05, 'rescaling:robust_scaler:q_max': 0.9716519608171985, 'rescaling:robust_scaler:q_min': 0.20000229221013058, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.001521474918301074}, {'categorical_encoding:__choice__': 'one_hot_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:ard_regression:alpha_1': 0.0007440329805573266, 'regressor:ard_regression:alpha_2': 3.52030856092419e-05, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 8.413676616419931e-05, 'regressor:ard_regression:lambda_2': 4.464896466449339e-07, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 16460.97135064526, 'regressor:ard_regression:tol': 0.0009154097481026865, 'rescaling:robust_scaler:q_max': 0.9255036342833397, 'rescaling:robust_scaler:q_min': 0.040213577136659094, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.04663934141874648}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'random_forest', 'rescaling:__choice__': 'normalize', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'False', 'regressor:random_forest:bootstrap': 'False', 'regressor:random_forest:criterion': 'mae', 'regressor:random_forest:max_depth': 'None', 'regressor:random_forest:max_features': 0.5161359144204622, 'regressor:random_forest:max_leaf_nodes': 'None', 'regressor:random_forest:min_impurity_decrease': 0.0, 'regressor:random_forest:min_samples_leaf': 9, 'regressor:random_forest:min_samples_split': 3, 'regressor:random_forest:min_weight_fraction_leaf': 0.0, 'regressor:random_forest:n_estimators': 100}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'ard_regression', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'regressor:ard_regression:alpha_1': 4.448305327115311e-05, 'regressor:ard_regression:alpha_2': 0.000112914413021726, 'regressor:ard_regression:fit_intercept': 'True', 'regressor:ard_regression:lambda_1': 1.0847871463163737e-09, 'regressor:ard_regression:lambda_2': 3.7936435307263186e-08, 'regressor:ard_regression:n_iter': 300, 'regressor:ard_regression:threshold_lambda': 35831.58634144192, 'regressor:ard_regression:tol': 3.869948335291496e-05, 'rescaling:robust_scaler:q_max': 0.8481206426775242, 'rescaling:robust_scaler:q_min': 0.2723027972074355}, {'categorical_encoding:__choice__': 'no_encoding', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'random_trees_embedding', 'regressor:__choice__': 'extra_trees', 'rescaling:__choice__': 'robust_scaler', 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 5, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 3, 'preprocessor:random_trees_embedding:min_samples_split': 2, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 60, 'regressor:extra_trees:bootstrap': 'False', 'regressor:extra_trees:criterion': 'mae', 'regressor:extra_trees:max_depth': 'None', 'regressor:extra_trees:max_features': 0.8178369589072358, 'regressor:extra_trees:max_leaf_nodes': 'None', 'regressor:extra_trees:min_impurity_decrease': 0.0, 'regressor:extra_trees:min_samples_leaf': 7, 'regressor:extra_trees:min_samples_split': 19, 'regressor:extra_trees:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.8242926454702025, 'rescaling:robust_scaler:q_min': 0.14545328535824323}], 'rank_test_scores': array([10, 16, 28,  1,  5, 16, 12,  6, 24, 13,  2,  7,  3, 15, 27, 29, 14,
       11,  8,  4,  9, 25, 22, 23, 16, 16, 26, 16, 16]), 'status': ['Success', 'Memout', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Timeout', 'Success', 'Timeout', 'Timeout'], 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_imputation:strategy': masked_array(data=['mean', 'mean', 'most_frequent', 'most_frequent',
                   'median', 'mean', 'most_frequent', 'mean', 'mean',
                   'median', 'most_frequent', 'most_frequent', 'median',
                   'median', 'median', 'mean', 'most_frequent', 'mean',
                   'most_frequent', 'most_frequent', 'median', 'median',
                   'median', 'most_frequent', 'most_frequent', 'median',
                   'median', 'most_frequent', 'median'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'polynomial', 'no_preprocessing',
                   'extra_trees_preproc_for_regression', 'fast_ica',
                   'fast_ica', 'random_trees_embedding',
                   'random_trees_embedding', 'random_trees_embedding',
                   'no_preprocessing',
                   'extra_trees_preproc_for_regression',
                   'no_preprocessing', 'polynomial',
                   'feature_agglomeration',
                   'extra_trees_preproc_for_regression', 'polynomial',
                   'fast_ica', 'polynomial', 'polynomial',
                   'extra_trees_preproc_for_regression', 'polynomial',
                   'kitchen_sinks', 'select_percentile_regression',
                   'random_trees_embedding', 'pca', 'polynomial',
                   'polynomial', 'polynomial', 'random_trees_embedding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U34'), 'param_regressor:__choice__': masked_array(data=['random_forest', 'gaussian_process',
                   'k_nearest_neighbors', 'adaboost', 'ridge_regression',
                   'libsvm_svr', 'adaboost', 'xgradient_boosting',
                   'xgradient_boosting', 'xgradient_boosting',
                   'random_forest', 'random_forest', 'decision_tree',
                   'sgd', 'random_forest', 'k_nearest_neighbors',
                   'gradient_boosting', 'xgradient_boosting',
                   'random_forest', 'decision_tree', 'xgradient_boosting',
                   'ridge_regression', 'ridge_regression', 'adaboost',
                   'libsvm_svr', 'ard_regression', 'random_forest',
                   'ard_regression', 'extra_trees'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U19'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'minmax', 'normalize',
                   'quantile_transformer', 'minmax', 'none',
                   'quantile_transformer', 'robust_scaler', 'none',
                   'normalize', 'standardize', 'robust_scaler',
                   'quantile_transformer', 'quantile_transformer',
                   'normalize', 'robust_scaler', 'standardize',
                   'normalize', 'minmax', 'robust_scaler',
                   'robust_scaler', 'robust_scaler', 'normalize',
                   'robust_scaler', 'robust_scaler', 'robust_scaler',
                   'normalize', 'robust_scaler', 'robust_scaler'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', --, 'True', 'False', --, --, --, 'True',
                   'False', 'True', --, --, --, 'True', --, --, 'False',
                   'False', --, --, --, 'False', 'False', 'True', 'True',
                   'True', --, --, --],
             mask=[False,  True, False, False,  True,  True,  True, False,
                   False, False,  True,  True,  True, False,  True,  True,
                   False, False,  True,  True,  True, False, False, False,
                   False, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_preprocessor:extra_trees_preproc_for_regression:bootstrap': masked_array(data=[--, --, --, 'True', --, --, --, --, --, --, 'True', --,
                   --, --, 'False', --, --, --, --, 'True', --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:criterion': masked_array(data=[--, --, --, 'mse', --, --, --, --, --, --,
                   'friedman_mse', --, --, --, 'mae', --, --, --, --,
                   'mse', --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_depth': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, 'None', --,
                   --, --, 'None', --, --, --, --, 'None', --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:max_features': masked_array(data=[--, --, --, 0.24856760535207326, --, --, --, --, --,
                   --, 0.1746997072456618, --, --, --, 0.8313815269280351,
                   --, --, --, --, 0.9584800395379466, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': masked_array(data=[--, --, --, 'None', --, --, --, --, --, --, 'None', --,
                   --, --, 'None', --, --, --, --, 'None', --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': masked_array(data=[--, --, --, 1.0, --, --, --, --, --, --, 10.0, --, --,
                   --, 1.0, --, --, --, --, 2.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_samples_split': masked_array(data=[--, --, --, 2.0, --, --, --, --, --, --, 13.0, --, --,
                   --, 4.0, --, --, --, --, 18.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': masked_array(data=[--, --, --, 0.0, --, --, --, --, --, --, 0.0, --, --,
                   --, 0.0, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_regression:n_estimators': masked_array(data=[--, --, --, 100.0, --, --, --, --, --, --, 100.0, --,
                   --, --, 100.0, --, --, --, --, 100.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, --, 'parallel', 'deflation', --, --, --,
                   --, --, --, --, --, --, --, 'deflation', --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, --, 'exp', 'exp', --, --, --, --, --, --,
                   --, --, --, --, 'exp', --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, --, 'True', 'False', --, --, --, --, --,
                   --, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'euclidean', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'ward', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   197.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'mean', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 2.7682211429805217, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 303.0, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   0.7851085868664173, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'False', --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, 2.0, --, --, --, --, --, --, --, --, --, --, 3.0,
                   --, --, 2.0, --, 3.0, 3.0, --, 2.0, --, --, --, --,
                   3.0, 3.0, 3.0, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False,  True, False,  True,  True,  True,
                    True, False, False, False,  True],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, 'True', --, 'False', 'False', --,
                   'False', --, --, --, --, 'True', 'False', 'False', --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False,  True, False,  True,  True,  True,
                    True, False, False, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, 'False', --, 'False', 'False', --,
                   'False', --, --, --, --, 'False', 'False', 'True', --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False,  True, False,  True,  True,  True,
                    True, False, False, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, 'False', 'False', 'True', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, 'True'],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, 10.0, 3.0, 3.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 4.0, --, --,
                   --, --, 5.0],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, 'None', 'None', 'None', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, 'None',
                   --, --, --, --, 'None'],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, 5.0, 14.0, 20.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 4.0, --,
                   --, --, --, 3.0],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, 16.0, 3.0, 19.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 12.0, --,
                   --, --, --, 2.0],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, 1.0, 1.0, 1.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 1.0, --, --,
                   --, --, 1.0],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, 82.0, 97.0, 37.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 63.0, --,
                   --, --, --, 60.0],
             mask=[ True,  True,  True,  True,  True,  True, False, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:percentile': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 88.51568792079165, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_regression:score_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'mutual_info', --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:learning_rate': masked_array(data=[--, --, --, 1.5037210102001854, --, --,
                   0.08456235710289968, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 1.3051220838168254, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:loss': masked_array(data=[--, --, --, 'linear', --, --, 'square', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   'exponential', --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:adaboost:max_depth': masked_array(data=[--, --, --, 8.0, --, --, 10.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 7.0, --, --,
                   --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:adaboost:n_estimators': masked_array(data=[--, --, --, 261.0, --, --, 207.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 124.0, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_1': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   0.0007440329805573266, --, 4.448305327115311e-05, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:alpha_2': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   3.52030856092419e-05, --, 0.000112914413021726, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 'True', --,
                   'True', --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ard_regression:lambda_1': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   8.413676616419931e-05, --, 1.0847871463163737e-09, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:lambda_2': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   4.464896466449339e-07, --, 3.7936435307263186e-08, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:n_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 300.0, --,
                   300.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:threshold_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   16460.97135064526, --, 35831.58634144192, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:ard_regression:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   0.0009154097481026865, --, 3.869948335291496e-05, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   'friedman_mse', --, --, --, --, --, --, 'mae', --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   0.9357746321268203, --, --, --, --, --, --,
                   0.7447649123653632, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 1.0,
                   --, --, --, --, --, --, 1.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 'None',
                   --, --, --, --, --, --, 'None', --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 0.0,
                   --, --, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 4.0,
                   --, --, --, --, --, --, 17.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 6.0,
                   --, --, --, --, --, --, 11.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 0.0,
                   --, --, --, --, --, --, 0.0, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'mae'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.8178369589072358],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   7.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   19.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:extra_trees:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_regressor:gaussian_process:alpha': masked_array(data=[--, 0.4979038910307746, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaL': masked_array(data=[--, 4.4058405235395794e-07, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gaussian_process:thetaU': masked_array(data=[--, 774.0094917753954, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.15918994930520844, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'ls', --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 2.0, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.7535406518729681, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'None', --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:gradient_boosting:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.0, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 16.0, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 13.0, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.0, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 195.0, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:gradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.4955741598265856, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:p': masked_array(data=[--, --, 2.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, 2.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:k_nearest_neighbors:weights': masked_array(data=[--, --, 'uniform', --, --, --, --, --, --, --, --, --,
                   --, --, --, 'uniform', --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:liblinear_svr:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:liblinear_svr:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:C': masked_array(data=[--, --, --, --, --, 0.820936401111195, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   14296.894431999228, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:epsilon': masked_array(data=[--, --, --, --, --, 0.011820422524358349, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.11386736948981817, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:kernel': masked_array(data=[--, --, --, --, --, 'poly', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 'linear',
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:max_iter': masked_array(data=[--, --, --, --, --, -1.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, -1.0, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:shrinking': masked_array(data=[--, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 'True', --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:libsvm_svr:tol': masked_array(data=[--, --, --, --, --, 0.003169502327187765, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 4.017492099131629e-05, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, --, --, 'False',
                   'True', --, --, 'False', --, --, --, 'True', --, --,
                   --, --, --, --, --, 'False', --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_regressor:random_forest:criterion': masked_array(data=['mse', --, --, --, --, --, --, --, --, --, 'mae',
                   'mae', --, --, 'mae', --, --, --, 'friedman_mse', --,
                   --, --, --, --, --, --, 'mae', --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U12'), 'param_regressor:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, --, --, 'None',
                   'None', --, --, 'None', --, --, --, 'None', --, --, --,
                   --, --, --, --, 'None', --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:max_features': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --,
                   0.1453593138682401, 0.8414232728771526, --, --,
                   0.5651680396938628, --, --, --, 0.16286302166148908,
                   --, --, --, --, --, --, --, 0.5161359144204622, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, --, --, 'None',
                   'None', --, --, 'None', --, --, --, 'None', --, --, --,
                   --, --, --, --, 'None', --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_regressor:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, 0.0, 0.0, --,
                   --, 0.0, --, --, --, 0.0, --, --, --, --, --, --, --,
                   0.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --, 11.0, 11.0,
                   --, --, 12.0, --, --, --, 2.0, --, --, --, --, --, --,
                   --, 9.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, --, --, 10.0, 10.0,
                   --, --, 11.0, --, --, --, 8.0, --, --, --, --, --, --,
                   --, 3.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, 0.0, 0.0, --,
                   --, 0.0, --, --, --, 0.0, --, --, --, --, --, --, --,
                   0.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, --, --, --, --, 100.0,
                   100.0, --, --, 100.0, --, --, --, 100.0, --, --, --,
                   --, --, --, --, 100.0, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True,  True, False,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:alpha': masked_array(data=[--, --, --, --, 0.003854247807639906, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.09285460444980502, 0.004557508487979205, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:ridge_regression:fit_intercept': masked_array(data=[--, --, --, --, 'True', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'True', 'True', --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:ridge_regression:tol': masked_array(data=[--, --, --, --, 0.07319922429424819, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0011317588813212203, 0.014136586381792625, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False, False,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   2.0720677001315385e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'invscaling', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'squared_epsilon_insensitive', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'l2', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:sgd:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.050274601185389366, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, 0.5, 0.5, 0.5, --, --, --,
                   --, --, --, --, 0.5, --, --, 0.5, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, 'dart', 'dart', 'gbtree',
                   --, --, --, --, --, --, --, 'dart', --, --, 'dart', --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, 0.20790228782418774,
                   0.13269829895529092, 0.7383412784981492, --, --, --,
                   --, --, --, --, 0.6958393732186486, --, --,
                   0.18670021571617046, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, 0.6964083329091856,
                   0.37739318109262465, 0.5253831500231004, --, --, --,
                   --, --, --, --, 0.9952958275909765, --, --,
                   0.7396025751456639, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, 0.0, 0.0, 0.0, --, --, --,
                   --, --, --, --, 0.0, --, --, 0.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, 0.016016142945594468,
                   0.13677422703132558, 0.012183185082319749, --, --, --,
                   --, --, --, --, 0.06229226041392443, --, --,
                   0.011370953397634255, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, 0.0, 0.0, 0.0, --, --, --,
                   --, --, --, --, 0.0, --, --, 0.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, 9.0, 2.0, 10.0, --, --, --,
                   --, --, --, --, 10.0, --, --, 9.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, 19.0, 0.0, 8.0, --, --, --,
                   --, --, --, --, 17.0, --, --, 5.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, 512.0, 512.0, 512.0, --,
                   --, --, --, --, --, --, 512.0, --, --, 512.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, 6.688757380096515e-09,
                   0.0005098732703179379, 1.0482669890270454e-08, --, --,
                   --, --, --, --, --, 5.592733586536924e-07, --, --,
                   1.8482595949495837e-08, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, 4.600483498731673e-08,
                   1.3494062711485076e-05, 7.969590330955319e-06, --, --,
                   --, --, --, --, --, 2.1224243753832166e-09, --, --,
                   0.0015998122041927785, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, 1.0, 1.0, 1.0, --, --, --,
                   --, --, --, --, 1.0, --, --, 1.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, 0.22194664159330835,
                   0.36385126375609084, 0.9283260557293931, --, --, --,
                   --, --, --, --, 0.04619922108828106, --, --,
                   0.2662368959251735, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, 394.0, --, --, 1105.0, --, --, --, --, --,
                   537.0, 35.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, 'uniform', --, --, 'normal', --, --, --,
                   --, --, 'normal', 'uniform', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --, --, 0.8748314006225273, --, --,
                   --, 0.8900420591871744, --, --, --, 0.9173661901802149,
                   --, --, --, 0.9885115715951779, 0.7604296240253136,
                   0.9429130184194063, --, 0.9452822191910815,
                   0.9716519608171985, 0.9255036342833397, --,
                   0.8481206426775242, 0.8242926454702025],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False,  True,  True,  True, False,
                    True,  True,  True, False, False, False,  True, False,
                   False, False,  True, False, False],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --, --, 0.23302727781111088, --,
                   --, --, 0.12509983051963838, --, --, --,
                   0.2617414935794013, --, --, --, 0.002847371578831008,
                   0.037820680702001085, 0.13721138271047453, --,
                   0.15556589202961435, 0.20000229221013058,
                   0.040213577136659094, --, 0.2723027972074355,
                   0.14545328535824323],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True, False,  True,  True,  True, False,
                    True,  True,  True, False, False, False,  True, False,
                   False, False,  True, False, False],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, 0.013857361155308811, --, --, --, --,
                   0.0026456078235203894, --, 0.00024764950918479536, --,
                   --, --, 0.0014819399290182586, --, --, --, --, --, --,
                   --, --, --, 0.00016373719698778923,
                   0.001521474918301074, 0.04663934141874648, --, --, --],
             mask=[False,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                   False, False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, 136.0, --, --, --, --, --, --, --, --,
                   --, --, --, 1011.0, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:gradient_boosting:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:libsvm_svr:coef0': masked_array(data=[--, --, --, --, --, 0.9772471747872822, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:degree': masked_array(data=[--, --, --, --, --, 2.0, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:libsvm_svr:gamma': masked_array(data=[--, --, --, --, --, 8.106199652464777e-05, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.029255700648187773, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.7396222617246842e-05, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_regressor:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.35575081657915064, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, 'forest', 'forest', --, --,
                   --, --, --, --, --, --, 'forest', --, --, 'tree', --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_regressor:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, 0.17201186931366286,
                   0.3097493242527808, --, --, --, --, --, --, --, --,
                   0.4058519723541354, --, --, 0.06306101221344254, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_regressor:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, 'weighted', 'weighted', --,
                   --, --, --, --, --, --, --, 'weighted', --, --,
                   'weighted', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32')}