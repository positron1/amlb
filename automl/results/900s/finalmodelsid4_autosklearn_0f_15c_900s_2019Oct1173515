[(0.680000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'minmax', 'classifier:extra_trees:bootstrap': 'False', 'classifier:extra_trees:criterion': 'gini', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.7742041446939053, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 19, 'classifier:extra_trees:min_samples_split': 3, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.8722905232574044, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 3, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 15, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.160000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.100000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gaussian_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:pca:keep_variance': 0.5646782210836582, 'preprocessor:pca:whiten': 'False'},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.040000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.474108511451164, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 20, 'classifier:decision_tree:min_samples_split': 15, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.37397796293601915, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 11, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0004127888362534354},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.020000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.39577932648400715, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 14, 'classifier:random_forest:min_samples_split': 11, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.1811300432056271, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 5, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 12, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
]{'mean_test_score': array([ 0.176834  ,  1.        ,  0.65007331,  1.        ,  0.94183418,
        0.65804574,  0.10486577,  0.34774925,  1.        ,  1.        ,
        1.        ,  0.67224248,  0.36163375,  1.        ,  1.        ,
        1.        ,  0.61226607,  3.43650808,  0.94456492,  0.63930428,
        1.        ,  1.        ,  1.        ,  1.        ,  0.62805694,
        1.        ,  0.34978998,  0.6424963 , 29.04096848,  1.        ,
        0.50471056,  1.        ,  1.        ,  1.        ,  0.79365531,
        1.        ,  0.35114305,  1.        ,  1.        ,  0.22327807,
        0.10818777,  1.27554104,  1.        ]), 'mean_fit_time': array([120.36995316, 683.23021841, 489.3897779 , 384.20275855,
        61.7616713 , 159.67414975, 244.41887975, 363.18575668,
        39.12857628, 877.15782261,  58.68870926,  85.77525735,
        88.85861969,  37.81123638, 598.19897699, 875.19331622,
       197.63554597,   7.96897101,  45.77856112, 358.29513192,
       263.17788219,  58.53793216, 874.14895964, 338.32259274,
        81.66540599, 439.13988471,  66.38231015,  57.22083926,
       121.38072157,  51.47763944,  72.86143112,  27.15465045,
       462.13812208,  72.63185453,  17.87629056, 774.13683128,
        56.52345753, 788.18891931, 358.26635242,  85.4838419 ,
        72.57345366, 118.78629422, 221.19848561]), 'params': [{'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'gradient_boosting', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'classifier:gradient_boosting:criterion': 'friedman_mse', 'classifier:gradient_boosting:learning_rate': 0.04749094903835669, 'classifier:gradient_boosting:loss': 'deviance', 'classifier:gradient_boosting:max_depth': 3, 'classifier:gradient_boosting:max_features': 0.6184047395714717, 'classifier:gradient_boosting:max_leaf_nodes': 'None', 'classifier:gradient_boosting:min_impurity_decrease': 0.0, 'classifier:gradient_boosting:min_samples_leaf': 17, 'classifier:gradient_boosting:min_samples_split': 8, 'classifier:gradient_boosting:min_weight_fraction_leaf': 0.0, 'classifier:gradient_boosting:n_estimators': 428, 'classifier:gradient_boosting:subsample': 0.7515561640094087}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'standardize', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 0.023979647565826937, 'classifier:adaboost:max_depth': 1, 'classifier:adaboost:n_estimators': 53, 'preprocessor:select_percentile_classification:percentile': 13.556625879583667, 'preprocessor:select_percentile_classification:score_func': 'mutual_info'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:extra_trees:bootstrap': 'False', 'classifier:extra_trees:criterion': 'gini', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.17153013116668447, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 14, 'classifier:extra_trees:min_samples_split': 6, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.776272536442486, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 4, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.014544390251689663}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.6678532274370363, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 8, 'classifier:decision_tree:min_samples_split': 10, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:select_rates:alpha': 0.2210932646345492, 'preprocessor:select_rates:mode': 'fdr', 'preprocessor:select_rates:score_func': 'chi2'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:bernoulli_nb:alpha': 46.28369209829657, 'classifier:bernoulli_nb:fit_prior': 'False', 'rescaling:quantile_transformer:n_quantiles': 1496, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'minmax', 'classifier:extra_trees:bootstrap': 'False', 'classifier:extra_trees:criterion': 'gini', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.7742041446939053, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 19, 'classifier:extra_trees:min_samples_split': 3, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.8722905232574044, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 3, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 15, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'qda', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'minmax', 'classifier:qda:reg_param': 0.44167662348120795, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.9662770473963664, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 17, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 12, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'kitchen_sinks', 'rescaling:__choice__': 'minmax', 'classifier:lda:n_components': 60, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.0003131204955395776, 'preprocessor:kitchen_sinks:gamma': 0.0052814377292004526, 'preprocessor:kitchen_sinks:n_components': 704, 'classifier:lda:shrinkage_factor': 0.9903747851096127}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'k_nearest_neighbors', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'standardize', 'classifier:k_nearest_neighbors:n_neighbors': 3, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'uniform', 'preprocessor:select_rates:alpha': 0.12449800492313123, 'preprocessor:select_rates:mode': 'fwe', 'preprocessor:select_rates:score_func': 'f_classif'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'xgradient_boosting', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:xgradient_boosting:base_score': 0.5, 'classifier:xgradient_boosting:booster': 'gbtree', 'classifier:xgradient_boosting:colsample_bylevel': 0.19465407128130596, 'classifier:xgradient_boosting:colsample_bytree': 0.43435960736340296, 'classifier:xgradient_boosting:gamma': 0, 'classifier:xgradient_boosting:learning_rate': 0.1557446923879678, 'classifier:xgradient_boosting:max_delta_step': 0, 'classifier:xgradient_boosting:max_depth': 13, 'classifier:xgradient_boosting:min_child_weight': 19, 'classifier:xgradient_boosting:n_estimators': 512, 'classifier:xgradient_boosting:reg_alpha': 5.772961828329916e-06, 'classifier:xgradient_boosting:reg_lambda': 0.03251606172180379, 'classifier:xgradient_boosting:scale_pos_weight': 1, 'classifier:xgradient_boosting:subsample': 0.5874466683988651, 'preprocessor:pca:keep_variance': 0.9471271756051549, 'preprocessor:pca:whiten': 'True', 'rescaling:quantile_transformer:n_quantiles': 557, 'rescaling:quantile_transformer:output_distribution': 'normal'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'nystroem_sampler', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:bernoulli_nb:alpha': 0.07284872697522457, 'classifier:bernoulli_nb:fit_prior': 'False', 'preprocessor:nystroem_sampler:kernel': 'rbf', 'preprocessor:nystroem_sampler:n_components': 629, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0004993614692531839, 'preprocessor:nystroem_sampler:gamma': 0.06414107260953915}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:lda:n_components': 55, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.02788707342798918, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.4050100946068961, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 7, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 5, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0019336525265881688, 'classifier:lda:shrinkage_factor': 0.7709405036515502}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:extra_trees:bootstrap': 'True', 'classifier:extra_trees:criterion': 'entropy', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.23846780909800724, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 16, 'classifier:extra_trees:min_samples_split': 6, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0005342525354622464}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'libsvm_svc', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'random_trees_embedding', 'rescaling:__choice__': 'none', 'classifier:libsvm_svc:C': 0.8492977931650882, 'classifier:libsvm_svc:gamma': 3.0012299154601325, 'classifier:libsvm_svc:kernel': 'rbf', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'True', 'classifier:libsvm_svc:tol': 0.018320980444472095, 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 4, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 13, 'preprocessor:random_trees_embedding:min_samples_split': 11, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 59}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'passive_aggressive', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'liblinear_svc_preprocessor', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:passive_aggressive:C': 1.4652797267478959e-05, 'classifier:passive_aggressive:average': 'True', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'squared_hinge', 'classifier:passive_aggressive:tol': 0.0006074677302916523, 'preprocessor:liblinear_svc_preprocessor:C': 2782.8124089455846, 'preprocessor:liblinear_svc_preprocessor:dual': 'False', 'preprocessor:liblinear_svc_preprocessor:fit_intercept': 'True', 'preprocessor:liblinear_svc_preprocessor:intercept_scaling': 1, 'preprocessor:liblinear_svc_preprocessor:loss': 'squared_hinge', 'preprocessor:liblinear_svc_preprocessor:multi_class': 'ovr', 'preprocessor:liblinear_svc_preprocessor:penalty': 'l1', 'preprocessor:liblinear_svc_preprocessor:tol': 0.00023801774475523414}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'liblinear_svc', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'robust_scaler', 'classifier:liblinear_svc:C': 0.2415469486144031, 'classifier:liblinear_svc:dual': 'False', 'classifier:liblinear_svc:fit_intercept': 'True', 'classifier:liblinear_svc:intercept_scaling': 1, 'classifier:liblinear_svc:loss': 'squared_hinge', 'classifier:liblinear_svc:multi_class': 'ovr', 'classifier:liblinear_svc:penalty': 'l2', 'classifier:liblinear_svc:tol': 0.005761319970864664, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.6868217949731127, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 8, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 11, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.7032353334328507, 'rescaling:robust_scaler:q_min': 0.10440489146971763}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'gaussian_nb', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'none', 'preprocessor:select_percentile_classification:percentile': 39.25113041839838, 'preprocessor:select_percentile_classification:score_func': 'chi2'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'quantile_transformer', 'classifier:decision_tree:criterion': 'entropy', 'classifier:decision_tree:max_depth_factor': 1.1425994090277074, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 6, 'classifier:decision_tree:min_samples_split': 6, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:select_rates:alpha': 0.37036332641973946, 'preprocessor:select_rates:mode': 'fdr', 'preprocessor:select_rates:score_func': 'f_classif', 'rescaling:quantile_transformer:n_quantiles': 1529, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 1.1637047101950384, 'classifier:adaboost:max_depth': 2, 'classifier:adaboost:n_estimators': 121, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.6561109777372445, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 10, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 5, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'rescaling:quantile_transformer:n_quantiles': 220, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'rescaling:__choice__': 'normalize', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'entropy', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.6279466446277511, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 6, 'classifier:random_forest:min_samples_split': 9, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'exp', 'preprocessor:fast_ica:whiten': 'False'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'xgradient_boosting', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:xgradient_boosting:base_score': 0.5, 'classifier:xgradient_boosting:booster': 'dart', 'classifier:xgradient_boosting:colsample_bylevel': 0.5205520444968126, 'classifier:xgradient_boosting:colsample_bytree': 0.9532747091778075, 'classifier:xgradient_boosting:gamma': 0, 'classifier:xgradient_boosting:learning_rate': 0.7266431559383382, 'classifier:xgradient_boosting:max_delta_step': 0, 'classifier:xgradient_boosting:max_depth': 2, 'classifier:xgradient_boosting:min_child_weight': 13, 'classifier:xgradient_boosting:n_estimators': 512, 'classifier:xgradient_boosting:reg_alpha': 6.034119075246492e-08, 'classifier:xgradient_boosting:reg_lambda': 0.0004947149613352294, 'classifier:xgradient_boosting:scale_pos_weight': 1, 'classifier:xgradient_boosting:subsample': 0.7806619672850302, 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'True', 'rescaling:quantile_transformer:n_quantiles': 1218, 'rescaling:quantile_transformer:output_distribution': 'normal', 'classifier:xgradient_boosting:normalize_type': 'forest', 'classifier:xgradient_boosting:rate_drop': 0.11566349455679126, 'classifier:xgradient_boosting:sample_type': 'weighted'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'k_nearest_neighbors', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:k_nearest_neighbors:n_neighbors': 12, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'distance', 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.9470518596807214, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 8, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 4, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.7535323836595301, 'rescaling:robust_scaler:q_min': 0.2778080503195395, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.001047958750442914}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'k_nearest_neighbors', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'standardize', 'classifier:k_nearest_neighbors:n_neighbors': 17, 'classifier:k_nearest_neighbors:p': 1, 'classifier:k_nearest_neighbors:weights': 'uniform', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.474108511451164, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 20, 'classifier:decision_tree:min_samples_split': 15, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.37397796293601915, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 11, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 2, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0004127888362534354}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'fast_ica', 'rescaling:__choice__': 'normalize', 'classifier:bernoulli_nb:alpha': 23.530837334137015, 'classifier:bernoulli_nb:fit_prior': 'True', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'preprocessor:fast_ica:n_components': 1474}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:lda:n_components': 170, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.05150395861935373, 'classifier:lda:shrinkage_factor': 0.22200583619926073}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:extra_trees:bootstrap': 'True', 'classifier:extra_trees:criterion': 'entropy', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.02716859005712513, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 18, 'classifier:extra_trees:min_samples_split': 8, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:select_rates:alpha': 0.03687845804840683, 'preprocessor:select_rates:mode': 'fwe', 'preprocessor:select_rates:score_func': 'chi2', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.002692539760729818}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gaussian_nb', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.5221082195567841, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 14, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 13, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gaussian_nb', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'logcosh', 'preprocessor:fast_ica:whiten': 'False', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.30369430978517264}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:extra_trees:bootstrap': 'False', 'classifier:extra_trees:criterion': 'entropy', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.44626967376970206, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 7, 'classifier:extra_trees:min_samples_split': 14, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:pca:keep_variance': 0.5288138825761587, 'preprocessor:pca:whiten': 'True'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'multinomial_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:multinomial_nb:alpha': 0.046556053827846625, 'classifier:multinomial_nb:fit_prior': 'True', 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'False', 'preprocessor:polynomial:interaction_only': 'True', 'rescaling:robust_scaler:q_max': 0.7817294693371972, 'rescaling:robust_scaler:q_min': 0.17713300010401464}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'qda', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'liblinear_svc_preprocessor', 'rescaling:__choice__': 'standardize', 'classifier:qda:reg_param': 0.4759154161238146, 'preprocessor:liblinear_svc_preprocessor:C': 88.00830687777845, 'preprocessor:liblinear_svc_preprocessor:dual': 'False', 'preprocessor:liblinear_svc_preprocessor:fit_intercept': 'True', 'preprocessor:liblinear_svc_preprocessor:intercept_scaling': 1, 'preprocessor:liblinear_svc_preprocessor:loss': 'squared_hinge', 'preprocessor:liblinear_svc_preprocessor:multi_class': 'ovr', 'preprocessor:liblinear_svc_preprocessor:penalty': 'l1', 'preprocessor:liblinear_svc_preprocessor:tol': 0.00017054175119848606}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'kernel_pca', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:lda:n_components': 103, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.001183256674061183, 'preprocessor:kernel_pca:kernel': 'cosine', 'preprocessor:kernel_pca:n_components': 1859, 'classifier:lda:shrinkage_factor': 0.9201263695582349}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'random_trees_embedding', 'rescaling:__choice__': 'none', 'classifier:bernoulli_nb:alpha': 61.46471898122062, 'classifier:bernoulli_nb:fit_prior': 'False', 'preprocessor:random_trees_embedding:bootstrap': 'False', 'preprocessor:random_trees_embedding:max_depth': 7, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 2, 'preprocessor:random_trees_embedding:min_samples_split': 5, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 28}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gradient_boosting', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:gradient_boosting:criterion': 'friedman_mse', 'classifier:gradient_boosting:learning_rate': 0.15232537255434833, 'classifier:gradient_boosting:loss': 'deviance', 'classifier:gradient_boosting:max_depth': 7, 'classifier:gradient_boosting:max_features': 0.4770254291739042, 'classifier:gradient_boosting:max_leaf_nodes': 'None', 'classifier:gradient_boosting:min_impurity_decrease': 0.0, 'classifier:gradient_boosting:min_samples_leaf': 8, 'classifier:gradient_boosting:min_samples_split': 16, 'classifier:gradient_boosting:min_weight_fraction_leaf': 0.0, 'classifier:gradient_boosting:n_estimators': 494, 'classifier:gradient_boosting:subsample': 0.8231793864534362, 'preprocessor:pca:keep_variance': 0.9925632960720546, 'preprocessor:pca:whiten': 'True'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'standardize', 'classifier:lda:n_components': 192, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.001121908104447011, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.3928933986242332, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 6, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 17, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'classifier:lda:shrinkage_factor': 0.3677628277483582}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'normalize', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.8005601101769364, 'classifier:adaboost:max_depth': 7, 'classifier:adaboost:n_estimators': 489, 'preprocessor:select_percentile_classification:percentile': 34.467823361613, 'preprocessor:select_percentile_classification:score_func': 'f_classif'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'qda', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'kernel_pca', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:qda:reg_param': 0.33089756114361346, 'preprocessor:kernel_pca:kernel': 'sigmoid', 'preprocessor:kernel_pca:n_components': 435, 'preprocessor:kernel_pca:coef0': 0.11374212073352585}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.39577932648400715, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 14, 'classifier:random_forest:min_samples_split': 11, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.1811300432056271, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 5, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 12, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gaussian_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'minmax', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:pca:keep_variance': 0.5646782210836582, 'preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gaussian_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.5470906257214407, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 20, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 14, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100, 'rescaling:robust_scaler:q_max': 0.9174021648194344, 'rescaling:robust_scaler:q_min': 0.08987499048891444}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'k_nearest_neighbors', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'normalize', 'classifier:k_nearest_neighbors:n_neighbors': 17, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'distance', 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.5720185786627396, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 16, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 5, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}], 'rank_test_scores': array([41,  4, 30,  4, 26, 29, 43, 39,  4,  4,  4, 28, 36,  4,  4,  4, 34,
        2, 25, 32,  4,  4,  4,  4, 33,  4, 38, 31,  1,  4, 35,  4,  4,  4,
       27,  4, 37,  4,  4, 40, 42,  3,  4]), 'status': ['Success', 'Timeout', 'Success', 'Timeout', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Timeout', 'Crash', 'Success', 'Success', 'Memout', 'Timeout', 'Timeout', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Memout', 'Timeout', 'Memout', 'Success', 'Timeout', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Memout', 'Timeout', 'Crash', 'Success', 'Timeout', 'Success', 'Timeout', 'Memout', 'Success', 'Success', 'Success', 'Timeout'], 'param_balancing:strategy': masked_array(data=['none', 'weighting', 'weighting', 'weighting',
                   'weighting', 'none', 'none', 'weighting', 'none',
                   'weighting', 'weighting', 'weighting', 'none',
                   'weighting', 'none', 'weighting', 'weighting',
                   'weighting', 'weighting', 'none', 'weighting', 'none',
                   'weighting', 'none', 'none', 'none', 'weighting',
                   'weighting', 'none', 'none', 'weighting', 'none',
                   'none', 'weighting', 'none', 'none', 'weighting',
                   'none', 'weighting', 'weighting', 'none', 'none',
                   'none'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False],
       fill_value='N/A',
            dtype='<U9'), 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_classifier:__choice__': masked_array(data=['random_forest', 'gradient_boosting', 'adaboost',
                   'extra_trees', 'decision_tree', 'bernoulli_nb',
                   'extra_trees', 'qda', 'lda', 'k_nearest_neighbors',
                   'xgradient_boosting', 'bernoulli_nb', 'lda',
                   'extra_trees', 'libsvm_svc', 'passive_aggressive',
                   'liblinear_svc', 'gaussian_nb', 'decision_tree',
                   'adaboost', 'random_forest', 'xgradient_boosting',
                   'k_nearest_neighbors', 'k_nearest_neighbors',
                   'decision_tree', 'bernoulli_nb', 'lda', 'extra_trees',
                   'gaussian_nb', 'gaussian_nb', 'extra_trees',
                   'multinomial_nb', 'qda', 'lda', 'bernoulli_nb',
                   'gradient_boosting', 'lda', 'adaboost', 'qda',
                   'random_forest', 'gaussian_nb', 'gaussian_nb',
                   'k_nearest_neighbors'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False],
       fill_value='N/A',
            dtype='<U19'), 'param_imputation:strategy': masked_array(data=['mean', 'median', 'mean', 'median', 'median', 'median',
                   'most_frequent', 'median', 'mean', 'most_frequent',
                   'mean', 'mean', 'most_frequent', 'median',
                   'most_frequent', 'mean', 'median', 'mean', 'mean',
                   'median', 'median', 'mean', 'mean', 'median', 'median',
                   'most_frequent', 'mean', 'most_frequent', 'median',
                   'mean', 'mean', 'most_frequent', 'median', 'mean',
                   'most_frequent', 'most_frequent', 'mean',
                   'most_frequent', 'mean', 'median', 'most_frequent',
                   'most_frequent', 'median'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'no_preprocessing',
                   'select_percentile_classification',
                   'extra_trees_preproc_for_classification',
                   'select_rates', 'no_preprocessing',
                   'extra_trees_preproc_for_classification',
                   'extra_trees_preproc_for_classification',
                   'kitchen_sinks', 'select_rates', 'pca',
                   'nystroem_sampler',
                   'extra_trees_preproc_for_classification', 'polynomial',
                   'random_trees_embedding', 'liblinear_svc_preprocessor',
                   'extra_trees_preproc_for_classification',
                   'select_percentile_classification', 'select_rates',
                   'extra_trees_preproc_for_classification', 'fast_ica',
                   'polynomial', 'extra_trees_preproc_for_classification',
                   'polynomial', 'extra_trees_preproc_for_classification',
                   'fast_ica', 'no_preprocessing', 'select_rates',
                   'extra_trees_preproc_for_classification', 'fast_ica',
                   'pca', 'polynomial', 'liblinear_svc_preprocessor',
                   'kernel_pca', 'random_trees_embedding', 'pca',
                   'extra_trees_preproc_for_classification',
                   'select_percentile_classification', 'kernel_pca',
                   'extra_trees_preproc_for_classification', 'pca',
                   'extra_trees_preproc_for_classification',
                   'extra_trees_preproc_for_classification'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False],
       fill_value='N/A',
            dtype='<U38'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'standardize', 'standardize',
                   'standardize', 'none', 'quantile_transformer',
                   'minmax', 'minmax', 'minmax', 'standardize',
                   'quantile_transformer', 'normalize', 'normalize',
                   'minmax', 'none', 'minmax', 'robust_scaler', 'none',
                   'quantile_transformer', 'quantile_transformer',
                   'normalize', 'quantile_transformer', 'robust_scaler',
                   'standardize', 'normalize', 'normalize', 'standardize',
                   'none', 'standardize', 'none', 'normalize',
                   'robust_scaler', 'standardize', 'standardize', 'none',
                   'minmax', 'standardize', 'normalize', 'standardize',
                   'standardize', 'minmax', 'robust_scaler', 'normalize'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', --, --, 'True', 'False', 'False', --, --, --,
                   --, 'False', 'True', 'True', 'True', --, 'False', --,
                   --, --, 'False', --, 'False', 'True', --, 'True', --,
                   'False', 'True', 'False', 'True', 'False', 'False', --,
                   'False', --, 'False', --, --, 'False', 'False',
                   'False', 'False', --],
             mask=[False,  True,  True, False, False, False,  True,  True,
                    True,  True, False, False, False, False,  True, False,
                    True,  True,  True, False,  True, False, False,  True,
                   False,  True, False, False, False, False, False, False,
                    True, False,  True, False,  True,  True, False, False,
                   False, False,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_classifier:adaboost:algorithm': masked_array(data=[--, --, 'SAMME.R', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'SAMME.R', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'SAMME', --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:adaboost:learning_rate': masked_array(data=[--, --, 0.023979647565826937, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   1.1637047101950384, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.8005601101769364, --,
                   --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:adaboost:max_depth': masked_array(data=[--, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 2.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 7.0, --,
                   --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:adaboost:n_estimators': masked_array(data=[--, --, 53.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 121.0, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 489.0, --,
                   --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:alpha': masked_array(data=[--, --, --, --, --, 46.28369209829657, --, --, --, --,
                   --, 0.07284872697522457, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 23.530837334137015, --, --, --,
                   --, --, --, --, --, 61.46471898122062, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:fit_prior': masked_array(data=[--, --, --, --, --, 'False', --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'True', --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:criterion': masked_array(data=[--, --, --, --, 'gini', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'entropy', --, --, --, --, --,
                   'gini', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, 1.6678532274370363, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 1.1425994090277074, --,
                   --, --, --, --, 1.474108511451164, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_features': masked_array(data=[--, --, --, --, 1.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 1.0, --, --, --, --, --, 1.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, 'None', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'None', --, --, --, --, --, 'None',
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.0, --, --, --, --, --, 0.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, 8.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 6.0, --, --, --, --, --, 20.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, 10.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 6.0, --, --, --, --, --, 15.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.0, --, --, --, --, --, 0.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:bootstrap': masked_array(data=[--, --, --, 'False', --, --, 'False', --, --, --, --,
                   --, --, 'True', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'True', --, --, 'False', --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:criterion': masked_array(data=[--, --, --, 'gini', --, --, 'gini', --, --, --, --, --,
                   --, 'entropy', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'entropy', --, --, 'entropy', --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:max_depth': masked_array(data=[--, --, --, 'None', --, --, 'None', --, --, --, --, --,
                   --, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'None', --, --, 'None', --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:max_features': masked_array(data=[--, --, --, 0.17153013116668447, --, --,
                   0.7742041446939053, --, --, --, --, --, --,
                   0.23846780909800724, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 0.02716859005712513, --, --,
                   0.44626967376970206, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, 'None', --, --, 'None', --, --, --, --, --,
                   --, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'None', --, --, 'None', --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, 0.0, --, --, 0.0, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.0, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, 14.0, --, --, 19.0, --, --, --, --, --, --,
                   16.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 18.0, --, --, 7.0, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:min_samples_split': masked_array(data=[--, --, --, 6.0, --, --, 3.0, --, --, --, --, --, --,
                   6.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 8.0, --, --, 14.0, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:min_weight_fraction_leaf': masked_array(data=[--, --, --, 0.0, --, --, 0.0, --, --, --, --, --, --,
                   0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.0, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:n_estimators': masked_array(data=[--, --, --, 100.0, --, --, 100.0, --, --, --, --, --,
                   --, 100.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 100.0, --, --, 100.0, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:criterion': masked_array(data=[--, 'friedman_mse', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, 'friedman_mse',
                   --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:learning_rate': masked_array(data=[--, 0.04749094903835669, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --,
                   0.15232537255434833, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:loss': masked_array(data=[--, 'deviance', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 'deviance', --, --,
                   --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:max_depth': masked_array(data=[--, 3.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 7.0, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:max_features': masked_array(data=[--, 0.6184047395714717, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   0.4770254291739042, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:max_leaf_nodes': masked_array(data=[--, 'None', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'None', --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:min_impurity_decrease': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.0, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_leaf': masked_array(data=[--, 17.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 8.0, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_split': masked_array(data=[--, 8.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 16.0, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.0, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:n_estimators': masked_array(data=[--, 428.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 494.0, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:subsample': masked_array(data=[--, 0.7515561640094087, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --,
                   0.8231793864534362, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, --, --, --, --, --, --, 3.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, 12.0, 17.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 17.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:p': masked_array(data=[--, --, --, --, --, --, --, --, --, 2.0, --, --, --,
                   --, --, --, --, --, --, --, --, --, 2.0, 1.0, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 2.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:weights': masked_array(data=[--, --, --, --, --, --, --, --, --, 'uniform', --, --,
                   --, --, --, --, --, --, --, --, --, --, 'distance',
                   'uniform', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'distance'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:lda:n_components': masked_array(data=[--, --, --, --, --, --, --, --, 60.0, --, --, --, 55.0,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   170.0, --, --, --, --, --, --, 103.0, --, --, 192.0,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:lda:shrinkage': masked_array(data=[--, --, --, --, --, --, --, --, 'manual', --, --, --,
                   'manual', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'manual', --, --, --, --, --, --, 'manual', --,
                   --, 'manual', --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:lda:tol': masked_array(data=[--, --, --, --, --, --, --, --, 0.0003131204955395776,
                   --, --, --, 0.02788707342798918, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 0.05150395861935373,
                   --, --, --, --, --, --, 0.001183256674061183, --, --,
                   0.001121908104447011, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:liblinear_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.2415469486144031, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:liblinear_svc:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'False', --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:liblinear_svc:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'True', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:liblinear_svc:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 1.0, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:liblinear_svc:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'squared_hinge', --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:liblinear_svc:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'ovr', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:liblinear_svc:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'l2', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:liblinear_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.005761319970864664, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:libsvm_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.8492977931650882, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:libsvm_svc:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   3.0012299154601325, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:libsvm_svc:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'rbf', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:libsvm_svc:max_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   -1.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:libsvm_svc:shrinking': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:libsvm_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.018320980444472095, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:multinomial_nb:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.046556053827846625, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:multinomial_nb:fit_prior': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'True', --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 1.4652797267478959e-05, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:passive_aggressive:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'squared_hinge', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.0006074677302916523, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:qda:reg_param': masked_array(data=[--, --, --, --, --, --, --, 0.44167662348120795, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, 0.4759154161238146,
                   --, --, --, --, --, 0.33089756114361346, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'False', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_classifier:random_forest:criterion': masked_array(data=['gini', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'entropy', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'gini', --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U7'), 'param_classifier:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_features': masked_array(data=[0.5, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 0.6279466446277511, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.39577932648400715, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'None', --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 0.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 6.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   14.0, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 9.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   11.0, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 0.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.0, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 100.0, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   100.0, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:sgd:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.5, --, --,
                   --, --, --, --, --, --, --, --, 0.5, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'gbtree', --,
                   --, --, --, --, --, --, --, --, --, 'dart', --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.19465407128130596, --, --, --, --, --, --, --, --,
                   --, --, 0.5205520444968126, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.43435960736340296, --, --, --, --, --, --, --, --,
                   --, --, 0.9532747091778075, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.0, --, --,
                   --, --, --, --, --, --, --, --, 0.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.1557446923879678, --, --, --, --, --, --, --, --, --,
                   --, 0.7266431559383382, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 0.0, --, --,
                   --, --, --, --, --, --, --, --, 0.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 13.0, --, --,
                   --, --, --, --, --, --, --, --, 2.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 19.0, --, --,
                   --, --, --, --, --, --, --, --, 13.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 512.0, --, --,
                   --, --, --, --, --, --, --, --, 512.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   5.772961828329916e-06, --, --, --, --, --, --, --, --,
                   --, --, 6.034119075246492e-08, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.03251606172180379, --, --, --, --, --, --, --, --,
                   --, --, 0.0004947149613352294, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 1.0, --, --,
                   --, --, --, --, --, --, --, --, 1.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.5874466683988651, --, --, --, --, --, --, --, --, --,
                   --, 0.7806619672850302, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:bootstrap': masked_array(data=[--, --, --, 'False', --, --, 'True', 'True', --, --,
                   --, --, 'False', --, --, --, 'False', --, --, 'True',
                   --, --, 'True', --, 'False', --, --, --, 'False', --,
                   --, --, --, --, --, --, 'False', --, --, 'True', --,
                   'True', 'True'],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:criterion': masked_array(data=[--, --, --, 'entropy', --, --, 'entropy', 'entropy',
                   --, --, --, --, 'entropy', --, --, --, 'gini', --, --,
                   'entropy', --, --, 'gini', --, 'entropy', --, --, --,
                   'entropy', --, --, --, --, --, --, --, 'gini', --, --,
                   'gini', --, 'gini', 'gini'],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:max_depth': masked_array(data=[--, --, --, 'None', --, --, 'None', 'None', --, --, --,
                   --, 'None', --, --, --, 'None', --, --, 'None', --, --,
                   'None', --, 'None', --, --, --, 'None', --, --, --, --,
                   --, --, --, 'None', --, --, 'None', --, 'None', 'None'],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:max_features': masked_array(data=[--, --, --, 0.776272536442486, --, --,
                   0.8722905232574044, 0.9662770473963664, --, --, --, --,
                   0.4050100946068961, --, --, --, 0.6868217949731127, --,
                   --, 0.6561109777372445, --, --, 0.9470518596807214, --,
                   0.37397796293601915, --, --, --, 0.5221082195567841,
                   --, --, --, --, --, --, --, 0.3928933986242332, --, --,
                   0.1811300432056271, --, 0.5470906257214407,
                   0.5720185786627396],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': masked_array(data=[--, --, --, 'None', --, --, 'None', 'None', --, --, --,
                   --, 'None', --, --, --, 'None', --, --, 'None', --, --,
                   'None', --, 'None', --, --, --, 'None', --, --, --, --,
                   --, --, --, 'None', --, --, 'None', --, 'None', 'None'],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': masked_array(data=[--, --, --, 0.0, --, --, 0.0, 0.0, --, --, --, --, 0.0,
                   --, --, --, 0.0, --, --, 0.0, --, --, 0.0, --, 0.0, --,
                   --, --, 0.0, --, --, --, --, --, --, --, 0.0, --, --,
                   0.0, --, 0.0, 0.0],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': masked_array(data=[--, --, --, 4.0, --, --, 3.0, 17.0, --, --, --, --,
                   7.0, --, --, --, 8.0, --, --, 10.0, --, --, 8.0, --,
                   11.0, --, --, --, 14.0, --, --, --, --, --, --, --,
                   6.0, --, --, 5.0, --, 20.0, 16.0],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_split': masked_array(data=[--, --, --, 2.0, --, --, 15.0, 12.0, --, --, --, --,
                   5.0, --, --, --, 11.0, --, --, 5.0, --, --, 4.0, --,
                   2.0, --, --, --, 13.0, --, --, --, --, --, --, --,
                   17.0, --, --, 12.0, --, 14.0, 5.0],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': masked_array(data=[--, --, --, 0.0, --, --, 0.0, 0.0, --, --, --, --, 0.0,
                   --, --, --, 0.0, --, --, 0.0, --, --, 0.0, --, 0.0, --,
                   --, --, 0.0, --, --, --, --, --, --, --, 0.0, --, --,
                   0.0, --, 0.0, 0.0],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:n_estimators': masked_array(data=[--, --, --, 100.0, --, --, 100.0, 100.0, --, --, --,
                   --, 100.0, --, --, --, 100.0, --, --, 100.0, --, --,
                   100.0, --, 100.0, --, --, --, 100.0, --, --, --, --,
                   --, --, --, 100.0, --, --, 100.0, --, 100.0, 100.0],
             mask=[ True,  True,  True, False,  True,  True, False, False,
                    True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True, False,  True,  True, False,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True, False,
                    True, False, False],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'parallel', --, --, --, --,
                   'deflation', --, --, --, 'parallel', --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'exp', --, --, --, --, 'cube',
                   --, --, --, 'logcosh', --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'False', --, --, --, --,
                   'True', --, --, --, 'False', --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'cosine', --, --, --, --,
                   'sigmoid', --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 1859.0, --, --, --, --, 435.0, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True, False,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, 0.0052814377292004526,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, 704.0, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:liblinear_svc_preprocessor:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 2782.8124089455846, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 88.00830687777845, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:liblinear_svc_preprocessor:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'False', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'False', --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'True', --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 1.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 1.0, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:liblinear_svc_preprocessor:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'squared_hinge', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, 'squared_hinge', --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'ovr', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'ovr', --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 'l1', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, 'l1', --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, 0.00023801774475523414, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --,
                   0.00017054175119848606, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'rbf', --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 629.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.9471271756051549, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   0.5288138825761587, --, --, --, --, 0.9925632960720546,
                   --, --, --, --, 0.5646782210836582, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                   False,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'True', --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'True', --, --, --, --, 'True', --, --, --,
                   --, 'False', --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                   False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   2.0, --, --, --, --, --, --, --, 3.0, --, 2.0, --, --,
                   --, --, --, --, --, 2.0, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True, False,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, 'True', --,
                   'False', --, --, --, --, --, --, --, 'False', --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True, False,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                   'False', --, --, --, --, --, --, --, 'True', --,
                   'True', --, --, --, --, --, --, --, 'True', --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True, False,  True, False,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'False', --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   4.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 7.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'None', --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'None', --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   13.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 2.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   11.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 5.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 1.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   59.0, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 28.0, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_classification:percentile': masked_array(data=[--, --, 13.556625879583667, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 39.25113041839838, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 34.467823361613, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_classification:score_func': masked_array(data=[--, --, 'mutual_info', --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 'chi2', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'f_classif', --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:alpha': masked_array(data=[--, --, --, --, 0.2210932646345492, --, --, --, --,
                   0.12449800492313123, --, --, --, --, --, --, --, --,
                   0.37036332641973946, --, --, --, --, --, --, --, --,
                   0.03687845804840683, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:select_rates:mode': masked_array(data=[--, --, --, --, 'fdr', --, --, --, --, 'fwe', --, --,
                   --, --, --, --, --, --, 'fdr', --, --, --, --, --, --,
                   --, --, 'fwe', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:score_func': masked_array(data=[--, --, --, --, 'chi2', --, --, --, --, 'f_classif',
                   --, --, --, --, --, --, --, --, 'f_classif', --, --,
                   --, --, --, --, --, --, 'chi2', --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, --, --, 1496.0, --, --, --, --, 557.0, --,
                   --, --, --, --, --, --, 1529.0, 220.0, --, 1218.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, --, --, 'normal', --, --, --, --, 'normal',
                   --, --, --, --, --, --, --, 'uniform', 'uniform', --,
                   'normal', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.7032353334328507, --, --, --, --, --,
                   0.7535323836595301, --, --, --, --, --, --, --, --,
                   0.7817294693371972, --, --, --, --, --, --, --, --, --,
                   0.9174021648194344, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.10440489146971763, --, --, --, --, --,
                   0.2778080503195395, --, --, --, --, --, --, --, --,
                   0.17713300010401464, --, --, --, --, --, --, --, --,
                   --, 0.08987499048891444, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, --, 0.014544390251689663, --, --, --, --, --,
                   --, --, 0.0004993614692531839, 0.0019336525265881688,
                   0.0005342525354622464, --, --, --, --, --, --, --, --,
                   0.001047958750442914, --, 0.0004127888362534354, --,
                   --, 0.002692539760729818, --, 0.30369430978517264, --,
                   --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True, False, False, False,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                   False,  True,  True, False,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:lda:shrinkage_factor': masked_array(data=[--, --, --, --, --, --, --, --, 0.9903747851096127, --,
                   --, --, 0.7709405036515502, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, 0.22200583619926073, --, --,
                   --, --, --, --, 0.9201263695582349, --, --,
                   0.3677628277483582, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:libsvm_svc:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'forest', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 0.11566349455679126, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, 'weighted', --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, 1474.0, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --,
                   0.11374212073352585, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   0.06414107260953915, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True],
       fill_value=1e+20)}