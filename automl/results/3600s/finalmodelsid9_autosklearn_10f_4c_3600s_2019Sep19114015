[(0.880000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.6678532274370363, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 8, 'classifier:decision_tree:min_samples_split': 10, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:select_rates:alpha': 0.2210932646345492, 'preprocessor:select_rates:mode': 'fdr', 'preprocessor:select_rates:score_func': 'chi2'},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.120000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'passive_aggressive', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:passive_aggressive:C': 0.15425881304886505, 'classifier:passive_aggressive:average': 'True', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'hinge', 'classifier:passive_aggressive:tol': 3.1939898025496725e-05, 'preprocessor:select_percentile_classification:percentile': 56.12334165002651, 'preprocessor:select_percentile_classification:score_func': 'f_classif'},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
]auto-sklearn results:
  Dataset name: 8ade267d86f082e2853646d6293afaad
  Metric: roc_auc
  Best validation score: 0.946046
  Number of target algorithm runs: 9
  Number of successful target algorithm runs: 3
  Number of crashed target algorithm runs: 3
  Number of target algorithms that exceeded the time limit: 2
  Number of target algorithms that exceeded the memory limit: 1
{'mean_test_score': array([0.        , 0.        , 0.82649899, 0.        , 0.        ,
       0.94604601, 0.77896439, 0.        , 0.        ]), 'mean_fit_time': array([3520.22624373,   16.88921118,  212.33120108,   24.79450226,
       3297.10068727,  481.4742856 ,  982.53386474, 2086.14767289,
       3553.13898373]), 'params': [{'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'qda', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'kernel_pca', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:qda:reg_param': 0.26643166540262564, 'preprocessor:kernel_pca:kernel': 'poly', 'preprocessor:kernel_pca:n_components': 441, 'rescaling:robust_scaler:q_max': 0.8738239970410585, 'rescaling:robust_scaler:q_min': 0.24420683503325075, 'preprocessor:kernel_pca:coef0': -0.14573744293083668, 'preprocessor:kernel_pca:degree': 4, 'preprocessor:kernel_pca:gamma': 0.7901724523053332}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'passive_aggressive', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'normalize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:passive_aggressive:C': 0.15425881304886505, 'classifier:passive_aggressive:average': 'True', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'hinge', 'classifier:passive_aggressive:tol': 3.1939898025496725e-05, 'preprocessor:select_percentile_classification:percentile': 56.12334165002651, 'preprocessor:select_percentile_classification:score_func': 'f_classif'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:bernoulli_nb:alpha': 39.22197080047033, 'classifier:bernoulli_nb:fit_prior': 'True', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'False', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0002692929898941372}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'fast_ica', 'rescaling:__choice__': 'quantile_transformer', 'classifier:bernoulli_nb:alpha': 15.66951140317318, 'classifier:bernoulli_nb:fit_prior': 'True', 'preprocessor:fast_ica:algorithm': 'deflation', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'True', 'rescaling:quantile_transformer:n_quantiles': 1486, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:fast_ica:n_components': 47}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.6678532274370363, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 8, 'classifier:decision_tree:min_samples_split': 10, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:select_rates:alpha': 0.2210932646345492, 'preprocessor:select_rates:mode': 'fdr', 'preprocessor:select_rates:score_func': 'chi2'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'multinomial_nb', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'random_trees_embedding', 'rescaling:__choice__': 'standardize', 'classifier:multinomial_nb:alpha': 0.10883807575466861, 'classifier:multinomial_nb:fit_prior': 'True', 'preprocessor:random_trees_embedding:bootstrap': 'True', 'preprocessor:random_trees_embedding:max_depth': 7, 'preprocessor:random_trees_embedding:max_leaf_nodes': 'None', 'preprocessor:random_trees_embedding:min_samples_leaf': 8, 'preprocessor:random_trees_embedding:min_samples_split': 6, 'preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0, 'preprocessor:random_trees_embedding:n_estimators': 51}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gradient_boosting', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:gradient_boosting:criterion': 'friedman_mse', 'classifier:gradient_boosting:learning_rate': 0.11436252370963078, 'classifier:gradient_boosting:loss': 'deviance', 'classifier:gradient_boosting:max_depth': 1, 'classifier:gradient_boosting:max_features': 0.517611194088445, 'classifier:gradient_boosting:max_leaf_nodes': 'None', 'classifier:gradient_boosting:min_impurity_decrease': 0.0, 'classifier:gradient_boosting:min_samples_leaf': 3, 'classifier:gradient_boosting:min_samples_split': 3, 'classifier:gradient_boosting:min_weight_fraction_leaf': 0.0, 'classifier:gradient_boosting:n_estimators': 343, 'classifier:gradient_boosting:subsample': 0.05305351997843092, 'rescaling:quantile_transformer:n_quantiles': 847, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'standardize', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 0.023979647565826937, 'classifier:adaboost:max_depth': 1, 'classifier:adaboost:n_estimators': 53, 'preprocessor:select_percentile_classification:percentile': 13.556625879583667, 'preprocessor:select_percentile_classification:score_func': 'mutual_info'}], 'rank_test_scores': array([4, 4, 2, 4, 4, 1, 3, 4, 4]), 'status': ['Timeout', 'Memout', 'Success', 'Crash', 'Crash', 'Success', 'Success', 'Timeout', 'Crash'], 'param_balancing:strategy': masked_array(data=['none', 'none', 'none', 'weighting', 'weighting',
                   'weighting', 'weighting', 'weighting', 'weighting'],
             mask=[False, False, False, False, False, False, False, False,
                   False],
       fill_value='N/A',
            dtype='<U9'), 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'no_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False],
       fill_value='N/A',
            dtype='<U16'), 'param_classifier:__choice__': masked_array(data=['random_forest', 'qda', 'passive_aggressive',
                   'bernoulli_nb', 'bernoulli_nb', 'decision_tree',
                   'multinomial_nb', 'gradient_boosting', 'adaboost'],
             mask=[False, False, False, False, False, False, False, False,
                   False],
       fill_value='N/A',
            dtype='<U18'), 'param_imputation:strategy': masked_array(data=['mean', 'median', 'most_frequent', 'median', 'mean',
                   'median', 'mean', 'mean', 'mean'],
             mask=[False, False, False, False, False, False, False, False,
                   False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'kernel_pca',
                   'select_percentile_classification', 'fast_ica',
                   'fast_ica', 'select_rates', 'random_trees_embedding',
                   'no_preprocessing', 'select_percentile_classification'],
             mask=[False, False, False, False, False, False, False, False,
                   False],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'robust_scaler', 'normalize', 'none',
                   'quantile_transformer', 'none', 'standardize',
                   'quantile_transformer', 'standardize'],
             mask=[False, False, False, False, False, False, False, False,
                   False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', 'False', 'False', 'True', --, 'False', --,
                   'False', --],
             mask=[False, False, False, False,  True, False,  True, False,
                    True],
       fill_value='N/A',
            dtype='<U5'), 'param_classifier:adaboost:algorithm': masked_array(data=[--, --, --, --, --, --, --, --, 'SAMME.R'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:adaboost:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, 0.023979647565826937],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False],
       fill_value=1e+20), 'param_classifier:adaboost:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, 1.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False],
       fill_value=1e+20), 'param_classifier:adaboost:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, 53.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                   False],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:alpha': masked_array(data=[--, --, --, 39.22197080047033, 15.66951140317318, --,
                   --, --, --],
             mask=[ True,  True,  True, False, False,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:fit_prior': masked_array(data=[--, --, --, 'True', 'True', --, --, --, --],
             mask=[ True,  True,  True, False, False,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:criterion': masked_array(data=[--, --, --, --, --, 'gini', --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, 1.6678532274370363, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_features': masked_array(data=[--, --, --, --, --, 1.0, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, 'None', --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, 0.0, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, 8.0, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, 10.0, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, 0.0, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:criterion': masked_array(data=[--, --, --, --, --, --, --, 'friedman_mse', --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, 0.11436252370963078, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --, --, 'deviance', --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, 1.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:max_features': masked_array(data=[--, --, --, --, --, --, --, 0.517611194088445, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, 'None', --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, 0.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, 3.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, 3.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, 0.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, 343.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, 0.05305351997843092, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:k_nearest_neighbors:p': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:k_nearest_neighbors:weights': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:lda:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:lda:shrinkage': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:lda:tol': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:dual': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:loss': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:max_iter': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:shrinking': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:multinomial_nb:alpha': masked_array(data=[--, --, --, --, --, --, 0.10883807575466861, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value=1e+20), 'param_classifier:multinomial_nb:fit_prior': masked_array(data=[--, --, --, --, --, --, 'True', --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:C': masked_array(data=[--, --, 0.15425881304886505, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:passive_aggressive:average': masked_array(data=[--, --, 'True', --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:fit_intercept': masked_array(data=[--, --, 'True', --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:loss': masked_array(data=[--, --, 'hinge', --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:tol': masked_array(data=[--, --, 3.1939898025496725e-05, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:qda:reg_param': masked_array(data=[--, 0.26643166540262564, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:criterion': masked_array(data=['gini', --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_features': masked_array(data=[0.5, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:sgd:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:average': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:loss': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:tol': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, 'parallel', 'deflation', --, --, --, --],
             mask=[ True,  True,  True, False, False,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, 'cube', 'cube', --, --, --, --],
             mask=[ True,  True,  True, False, False,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, 'False', 'True', --, --, --, --],
             mask=[ True,  True,  True, False, False,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, 'poly', --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, 441.0, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:C': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:dual': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:loss': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:tol': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:polynomial:degree': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, 'True', --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, 7.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, 'None', --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, 8.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, 6.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, 1.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, 51.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:select_percentile_classification:percentile': masked_array(data=[--, --, 56.12334165002651, --, --, --, --, --,
                   13.556625879583667],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                   False],
       fill_value=1e+20), 'param_preprocessor:select_percentile_classification:score_func': masked_array(data=[--, --, 'f_classif', --, --, --, --, --, 'mutual_info'],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                   False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:alpha': masked_array(data=[--, --, --, --, --, 0.2210932646345492, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:select_rates:mode': masked_array(data=[--, --, --, --, --, 'fdr', --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:score_func': masked_array(data=[--, --, --, --, --, 'chi2', --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, --, 1486.0, --, --, 847.0, --],
             mask=[ True,  True,  True,  True, False,  True,  True, False,
                    True],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, --, 'uniform', --, --, 'uniform', --],
             mask=[ True,  True,  True,  True, False,  True,  True, False,
                    True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, 0.8738239970410585, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, 0.24420683503325075, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, --, 0.0002692929898941372, --, --, --, --,
                   --],
             mask=[False,  True,  True, False,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_classifier:lda:shrinkage_factor': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:degree': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, 47.0, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, -0.14573744293083668, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, 4.0, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, 0.7901724523053332, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True],
       fill_value=1e+20,
            dtype=float64)}