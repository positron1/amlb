[(0.960000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.020000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'liblinear_svc_preprocessor', 'rescaling:__choice__': 'robust_scaler', 'classifier:decision_tree:criterion': 'entropy', 'classifier:decision_tree:max_depth_factor': 0.04528095414714417, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 2, 'classifier:decision_tree:min_samples_split': 20, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:liblinear_svc_preprocessor:C': 38.409691831178634, 'preprocessor:liblinear_svc_preprocessor:dual': 'False', 'preprocessor:liblinear_svc_preprocessor:fit_intercept': 'True', 'preprocessor:liblinear_svc_preprocessor:intercept_scaling': 1, 'preprocessor:liblinear_svc_preprocessor:loss': 'squared_hinge', 'preprocessor:liblinear_svc_preprocessor:multi_class': 'ovr', 'preprocessor:liblinear_svc_preprocessor:penalty': 'l1', 'preprocessor:liblinear_svc_preprocessor:tol': 0.0002721846479858283, 'rescaling:robust_scaler:q_max': 0.9677905547498249, 'rescaling:robust_scaler:q_min': 0.10276814017157354},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
(0.020000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'standardize', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 0.023979647565826937, 'classifier:adaboost:max_depth': 1, 'classifier:adaboost:n_estimators': 53, 'preprocessor:select_percentile_classification:percentile': 13.556625879583667, 'preprocessor:select_percentile_classification:score_func': 'mutual_info'},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
]{'mean_test_score': array([ 0.36805262,  1.        ,  1.        ,  0.53715034,  1.        ,
        0.5926305 , 16.4030643 ,  1.        ,  0.54698464,  0.52392852,
        1.        ,  1.41219504,  1.        ]), 'mean_fit_time': array([ 309.36632442, 3261.16692042,  395.38457465,  751.564888  ,
         16.29017496, 1151.99328089,  128.6601119 , 1104.16659164,
        888.89704156,   16.7320118 , 2669.13321209,   50.10259247,
       3523.15698791]), 'params': [{'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'gradient_boosting', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:gradient_boosting:criterion': 'friedman_mse', 'classifier:gradient_boosting:learning_rate': 0.07463196642416368, 'classifier:gradient_boosting:loss': 'deviance', 'classifier:gradient_boosting:max_depth': 7, 'classifier:gradient_boosting:max_features': 0.8603242247379981, 'classifier:gradient_boosting:max_leaf_nodes': 'None', 'classifier:gradient_boosting:min_impurity_decrease': 0.0, 'classifier:gradient_boosting:min_samples_leaf': 2, 'classifier:gradient_boosting:min_samples_split': 6, 'classifier:gradient_boosting:min_weight_fraction_leaf': 0.0, 'classifier:gradient_boosting:n_estimators': 500, 'classifier:gradient_boosting:subsample': 0.8447665577491962, 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'qda', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'kernel_pca', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:qda:reg_param': 0.26643166540262564, 'preprocessor:kernel_pca:kernel': 'poly', 'preprocessor:kernel_pca:n_components': 441, 'rescaling:robust_scaler:q_max': 0.8738239970410585, 'rescaling:robust_scaler:q_min': 0.24420683503325075, 'preprocessor:kernel_pca:coef0': -0.14573744293083668, 'preprocessor:kernel_pca:degree': 4, 'preprocessor:kernel_pca:gamma': 0.7901724523053332}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'sgd', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'normalize', 'classifier:sgd:alpha': 5.0176502136253254e-06, 'classifier:sgd:average': 'False', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'optimal', 'classifier:sgd:loss': 'hinge', 'classifier:sgd:penalty': 'elasticnet', 'classifier:sgd:tol': 0.003591241655372819, 'preprocessor:select_percentile_classification:percentile': 73.6191622263011, 'preprocessor:select_percentile_classification:score_func': 'mutual_info', 'classifier:sgd:l1_ratio': 0.015010897457355846}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'bernoulli_nb', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'fast_ica', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:bernoulli_nb:alpha': 39.22197080047033, 'classifier:bernoulli_nb:fit_prior': 'True', 'preprocessor:fast_ica:algorithm': 'parallel', 'preprocessor:fast_ica:fun': 'cube', 'preprocessor:fast_ica:whiten': 'False', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0002692929898941372}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.23886119691847807, 'classifier:adaboost:max_depth': 5, 'classifier:adaboost:n_estimators': 255, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.0001522580446969465}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'sgd', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'none', 'classifier:sgd:alpha': 0.006196660372422141, 'classifier:sgd:average': 'True', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'optimal', 'classifier:sgd:loss': 'hinge', 'classifier:sgd:penalty': 'l1', 'classifier:sgd:tol': 0.06747653606198702, 'preprocessor:pca:keep_variance': 0.7240424794863767, 'preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'k_nearest_neighbors', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'robust_scaler', 'classifier:k_nearest_neighbors:n_neighbors': 2, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'distance', 'preprocessor:select_percentile_classification:percentile': 97.3841464986601, 'preprocessor:select_percentile_classification:score_func': 'mutual_info', 'rescaling:robust_scaler:q_max': 0.8028980403622893, 'rescaling:robust_scaler:q_min': 0.12536295417270404}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'standardize', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 0.023979647565826937, 'classifier:adaboost:max_depth': 1, 'classifier:adaboost:n_estimators': 53, 'preprocessor:select_percentile_classification:percentile': 13.556625879583667, 'preprocessor:select_percentile_classification:score_func': 'mutual_info'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'liblinear_svc_preprocessor', 'rescaling:__choice__': 'robust_scaler', 'classifier:decision_tree:criterion': 'entropy', 'classifier:decision_tree:max_depth_factor': 0.04528095414714417, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 2, 'classifier:decision_tree:min_samples_split': 20, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:liblinear_svc_preprocessor:C': 38.409691831178634, 'preprocessor:liblinear_svc_preprocessor:dual': 'False', 'preprocessor:liblinear_svc_preprocessor:fit_intercept': 'True', 'preprocessor:liblinear_svc_preprocessor:intercept_scaling': 1, 'preprocessor:liblinear_svc_preprocessor:loss': 'squared_hinge', 'preprocessor:liblinear_svc_preprocessor:multi_class': 'ovr', 'preprocessor:liblinear_svc_preprocessor:penalty': 'l1', 'preprocessor:liblinear_svc_preprocessor:tol': 0.0002721846479858283, 'rescaling:robust_scaler:q_max': 0.9677905547498249, 'rescaling:robust_scaler:q_min': 0.10276814017157354}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'sgd', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'nystroem_sampler', 'rescaling:__choice__': 'none', 'classifier:sgd:alpha': 6.029109003507931e-07, 'classifier:sgd:average': 'False', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'invscaling', 'classifier:sgd:loss': 'hinge', 'classifier:sgd:penalty': 'l2', 'classifier:sgd:tol': 0.0006187400185177635, 'preprocessor:nystroem_sampler:kernel': 'poly', 'preprocessor:nystroem_sampler:n_components': 7886, 'classifier:sgd:eta0': 0.020894493059267327, 'classifier:sgd:power_t': 0.20186903810731874, 'preprocessor:nystroem_sampler:coef0': -0.2285937390432502, 'preprocessor:nystroem_sampler:degree': 4, 'preprocessor:nystroem_sampler:gamma': 0.02753238996088678}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.6678532274370363, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 8, 'classifier:decision_tree:min_samples_split': 10, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:select_rates:alpha': 0.2210932646345492, 'preprocessor:select_rates:mode': 'fdr', 'preprocessor:select_rates:score_func': 'chi2'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'k_nearest_neighbors', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'quantile_transformer', 'classifier:k_nearest_neighbors:n_neighbors': 9, 'classifier:k_nearest_neighbors:p': 1, 'classifier:k_nearest_neighbors:weights': 'distance', 'preprocessor:select_percentile_classification:percentile': 62.76090695378818, 'preprocessor:select_percentile_classification:score_func': 'mutual_info', 'rescaling:quantile_transformer:n_quantiles': 962, 'rescaling:quantile_transformer:output_distribution': 'normal'}], 'rank_test_scores': array([13,  3,  3, 11,  3,  9,  1,  3, 10, 12,  3,  2,  3]), 'status': ['Success', 'Timeout', 'Crash', 'Success', 'Crash', 'Success', 'Success', 'Crash', 'Success', 'Success', 'Timeout', 'Success', 'Timeout'], 'param_balancing:strategy': masked_array(data=['none', 'weighting', 'none', 'none', 'weighting',
                   'weighting', 'weighting', 'none', 'weighting', 'none',
                   'weighting', 'weighting', 'weighting'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U9'), 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_classifier:__choice__': masked_array(data=['random_forest', 'gradient_boosting', 'qda', 'sgd',
                   'bernoulli_nb', 'adaboost', 'sgd',
                   'k_nearest_neighbors', 'adaboost', 'decision_tree',
                   'sgd', 'decision_tree', 'k_nearest_neighbors'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U19'), 'param_imputation:strategy': masked_array(data=['mean', 'mean', 'median', 'most_frequent', 'median',
                   'most_frequent', 'mean', 'mean', 'mean',
                   'most_frequent', 'most_frequent', 'median', 'median'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'polynomial', 'kernel_pca',
                   'select_percentile_classification', 'fast_ica',
                   'no_preprocessing', 'pca',
                   'select_percentile_classification',
                   'select_percentile_classification',
                   'liblinear_svc_preprocessor', 'nystroem_sampler',
                   'select_rates', 'select_percentile_classification'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'none', 'robust_scaler', 'normalize',
                   'none', 'none', 'none', 'robust_scaler', 'standardize',
                   'robust_scaler', 'none', 'none',
                   'quantile_transformer'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', 'False', 'False', --, 'True', 'True', --, --,
                   --, --, --, 'False', --],
             mask=[False, False, False,  True, False, False,  True,  True,
                    True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U5'), 'param_classifier:adaboost:algorithm': masked_array(data=[--, --, --, --, --, 'SAMME', --, --, 'SAMME.R', --, --,
                   --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:adaboost:learning_rate': masked_array(data=[--, --, --, --, --, 0.23886119691847807, --, --,
                   0.023979647565826937, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:adaboost:max_depth': masked_array(data=[--, --, --, --, --, 5.0, --, --, 1.0, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:adaboost:n_estimators': masked_array(data=[--, --, --, --, --, 255.0, --, --, 53.0, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                   False,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:alpha': masked_array(data=[--, --, --, --, 39.22197080047033, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:fit_prior': masked_array(data=[--, --, --, --, 'True', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, 'entropy', --,
                   'gini', --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --, --, --, --,
                   0.04528095414714417, --, 1.6678532274370363, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, 1.0, --, 1.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, 'None', --, 'None',
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, 0.0, --, 0.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, 2.0, --, 8.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, 20.0, --, 10.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, 0.0, --, 0.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True, False,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:extra_trees:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:criterion': masked_array(data=[--, 'friedman_mse', --, --, --, --, --, --, --, --, --,
                   --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:learning_rate': masked_array(data=[--, 0.07463196642416368, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:loss': masked_array(data=[--, 'deviance', --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:max_depth': masked_array(data=[--, 7.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:max_features': masked_array(data=[--, 0.8603242247379981, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:max_leaf_nodes': masked_array(data=[--, 'None', --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:gradient_boosting:min_impurity_decrease': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_leaf': masked_array(data=[--, 2.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_split': masked_array(data=[--, 6.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:n_estimators': masked_array(data=[--, 500.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:subsample': masked_array(data=[--, 0.8447665577491962, --, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, --, --, --, --, 2.0, --, --, --, --, 9.0],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:p': masked_array(data=[--, --, --, --, --, --, --, 2.0, --, --, --, --, 1.0],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_classifier:k_nearest_neighbors:weights': masked_array(data=[--, --, --, --, --, --, --, 'distance', --, --, --, --,
                   'distance'],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:lda:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:lda:shrinkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:lda:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:max_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:shrinking': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:multinomial_nb:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:multinomial_nb:fit_prior': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:passive_aggressive:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:passive_aggressive:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:passive_aggressive:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:passive_aggressive:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:passive_aggressive:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:qda:reg_param': masked_array(data=[--, --, 0.26643166540262564, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:criterion': masked_array(data=['gini', --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_features': masked_array(data=[0.5, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:n_estimators': masked_array(data=[100.0, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:sgd:alpha': masked_array(data=[--, --, --, 5.0176502136253254e-06, --, --,
                   0.006196660372422141, --, --, --,
                   6.029109003507931e-07, --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_classifier:sgd:average': masked_array(data=[--, --, --, 'False', --, --, 'True', --, --, --,
                   'False', --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:fit_intercept': masked_array(data=[--, --, --, 'True', --, --, 'True', --, --, --, 'True',
                   --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:learning_rate': masked_array(data=[--, --, --, 'optimal', --, --, 'optimal', --, --, --,
                   'invscaling', --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:loss': masked_array(data=[--, --, --, 'hinge', --, --, 'hinge', --, --, --,
                   'hinge', --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:penalty': masked_array(data=[--, --, --, 'elasticnet', --, --, 'l1', --, --, --,
                   'l2', --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:tol': masked_array(data=[--, --, --, 0.003591241655372819, --, --,
                   0.06747653606198702, --, --, --, 0.0006187400185177635,
                   --, --],
             mask=[ True,  True,  True, False,  True,  True, False,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, --, 'parallel', --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, --, 'cube', --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, --, 'False', --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, 'poly', --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, 441.0, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:C': masked_array(data=[--, --, --, --, --, --, --, --, --, 38.409691831178634,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:liblinear_svc_preprocessor:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, 'False', --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, 'True', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, 1.0, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:liblinear_svc_preprocessor:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, 'squared_hinge',
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, 'ovr', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, 'l1', --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:liblinear_svc_preprocessor:tol': masked_array(data=[--, --, --, --, --, --, --, --, --,
                   0.0002721846479858283, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 'poly', --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 7886.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, 0.7240424794863767, --, --, --,
                   --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, 'False', --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, 2.0, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, 'False', --, --, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:select_percentile_classification:percentile': masked_array(data=[--, --, --, 73.6191622263011, --, --, --,
                   97.3841464986601, 13.556625879583667, --, --, --,
                   62.76090695378818],
             mask=[ True,  True,  True, False,  True,  True,  True, False,
                   False,  True,  True,  True, False],
       fill_value=1e+20), 'param_preprocessor:select_percentile_classification:score_func': masked_array(data=[--, --, --, 'mutual_info', --, --, --, 'mutual_info',
                   'mutual_info', --, --, --, 'mutual_info'],
             mask=[ True,  True,  True, False,  True,  True,  True, False,
                   False,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                   0.2210932646345492, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True],
       fill_value=1e+20), 'param_preprocessor:select_rates:mode': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'fdr', --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:score_func': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'chi2', --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True, False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 962.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   'normal'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, 0.8738239970410585, --, --, --, --,
                   0.8028980403622893, --, 0.9677905547498249, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, 0.24420683503325075, --, --, --, --,
                   0.12536295417270404, --, 0.10276814017157354, --, --,
                   --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, --, --, 0.0002692929898941372,
                   0.0001522580446969465, --, --, --, --, --, --, --],
             mask=[False,  True,  True,  True, False, False,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:lda:shrinkage_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.020894493059267327, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_classifier:sgd:l1_ratio': masked_array(data=[--, --, --, 0.015010897457355846, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_classifier:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.20186903810731874, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, -0.14573744293083668, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, 4.0, --, --, --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, 0.7901724523053332, --, --, --, --, --, --, --,
                   --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   -0.2285937390432502, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, 4.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --,
                   0.02753238996088678, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True],
       fill_value=1e+20)}