[(1.000000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01},
dataset_properties={
  'task': 1,
  'sparse': False,
  'multilabel': False,
  'multiclass': False,
  'target_type': 'classification',
  'signed': False})),
]{'mean_test_score': array([ 0.17074518,  1.        ,  1.25314682, 10.46558708,  0.33080171,
        0.69314867,  0.70328499,  1.18152205,  0.27524494,  0.65094576,
        0.5343075 ,  0.50953114,  0.96796707,  1.        ,  0.63357064,
        1.        ,  1.        ,  1.        ]), 'mean_fit_time': array([ 531.5369463 , 2996.14176416,   62.80134082,   38.97254181,
        910.31802607,  833.39707232,  118.84033871,   38.72546816,
        647.92819524,  128.49772477,   34.9956367 ,   33.67749858,
        197.94818473,  503.14901257,  808.98089695, 2754.16793728,
         19.06523991, 3542.1453619 ]), 'params': [{'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'no_preprocessing', 'rescaling:__choice__': 'standardize', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.01}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'quantile_transformer', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.8149627329153046, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 15, 'classifier:random_forest:min_samples_split': 11, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'preprocessor:polynomial:degree': 3, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False', 'rescaling:quantile_transformer:n_quantiles': 1000, 'rescaling:quantile_transformer:output_distribution': 'uniform'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'none', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.6678532274370363, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 8, 'classifier:decision_tree:min_samples_split': 10, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:select_rates:alpha': 0.2210932646345492, 'preprocessor:select_rates:mode': 'fdr', 'preprocessor:select_rates:score_func': 'chi2'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'multinomial_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:multinomial_nb:alpha': 0.07664976640586513, 'classifier:multinomial_nb:fit_prior': 'True', 'preprocessor:select_percentile_classification:percentile': 84.83729797095201, 'preprocessor:select_percentile_classification:score_func': 'chi2', 'rescaling:robust_scaler:q_max': 0.7145065496249109, 'rescaling:robust_scaler:q_min': 0.1846218507600863}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'extra_trees', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'minmax', 'classifier:extra_trees:bootstrap': 'False', 'classifier:extra_trees:criterion': 'gini', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.7742041446939053, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 19, 'classifier:extra_trees:min_samples_split': 3, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'classifier:extra_trees:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.8722905232574044, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 3, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 15, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'sgd', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'nystroem_sampler', 'rescaling:__choice__': 'standardize', 'classifier:sgd:alpha': 4.493823213956095e-07, 'classifier:sgd:average': 'False', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'constant', 'classifier:sgd:loss': 'log', 'classifier:sgd:penalty': 'elasticnet', 'classifier:sgd:tol': 0.03599422282160257, 'preprocessor:nystroem_sampler:kernel': 'sigmoid', 'preprocessor:nystroem_sampler:n_components': 3055, 'classifier:sgd:eta0': 1.2287093303006888e-06, 'classifier:sgd:l1_ratio': 0.000942838927979346, 'preprocessor:nystroem_sampler:coef0': -0.3222695170511667, 'preprocessor:nystroem_sampler:gamma': 4.501426188678061e-05}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'kitchen_sinks', 'rescaling:__choice__': 'minmax', 'classifier:lda:n_components': 60, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.0003131204955395776, 'preprocessor:kitchen_sinks:gamma': 0.0052814377292004526, 'preprocessor:kitchen_sinks:n_components': 704, 'classifier:lda:shrinkage_factor': 0.9903747851096127}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'feature_agglomeration', 'rescaling:__choice__': 'minmax', 'classifier:decision_tree:criterion': 'entropy', 'classifier:decision_tree:max_depth_factor': 1.984401876750477, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 9, 'classifier:decision_tree:min_samples_split': 11, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:feature_agglomeration:affinity': 'euclidean', 'preprocessor:feature_agglomeration:linkage': 'average', 'preprocessor:feature_agglomeration:n_clusters': 212, 'preprocessor:feature_agglomeration:pooling_func': 'max'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'random_forest', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'rescaling:__choice__': 'normalize', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.6144006012496559, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 3, 'classifier:random_forest:min_samples_split': 17, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'classifier:random_forest:n_estimators': 100, 'preprocessor:extra_trees_preproc_for_classification:bootstrap': 'False', 'preprocessor:extra_trees_preproc_for_classification:criterion': 'gini', 'preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'preprocessor:extra_trees_preproc_for_classification:max_features': 0.18991286956921927, 'preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 7, 'preprocessor:extra_trees_preproc_for_classification:min_samples_split': 7, 'preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'preprocessor:extra_trees_preproc_for_classification:n_estimators': 100}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'decision_tree', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'pca', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:decision_tree:criterion': 'entropy', 'classifier:decision_tree:max_depth_factor': 0.12228625408738236, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 6, 'classifier:decision_tree:min_samples_split': 9, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'preprocessor:pca:keep_variance': 0.838568808742651, 'preprocessor:pca:whiten': 'False', 'rescaling:quantile_transformer:n_quantiles': 821, 'rescaling:quantile_transformer:output_distribution': 'normal', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.09957523970227378}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'sgd', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_rates', 'rescaling:__choice__': 'normalize', 'classifier:sgd:alpha': 0.00039331218308157246, 'classifier:sgd:average': 'False', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'optimal', 'classifier:sgd:loss': 'hinge', 'classifier:sgd:penalty': 'elasticnet', 'classifier:sgd:tol': 0.0031556785039332266, 'preprocessor:select_rates:alpha': 0.26913637281393377, 'preprocessor:select_rates:mode': 'fwe', 'preprocessor:select_rates:score_func': 'f_classif', 'classifier:sgd:l1_ratio': 1.8310595900998648e-09}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'lda', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'robust_scaler', 'classifier:lda:n_components': 54, 'classifier:lda:shrinkage': 'None', 'classifier:lda:tol': 1.3124044785913153e-05, 'preprocessor:select_percentile_classification:percentile': 37.39200387093366, 'preprocessor:select_percentile_classification:score_func': 'f_classif', 'rescaling:robust_scaler:q_max': 0.7876502407493778, 'rescaling:robust_scaler:q_min': 0.026263445252495247}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'passive_aggressive', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'nystroem_sampler', 'rescaling:__choice__': 'quantile_transformer', 'classifier:passive_aggressive:C': 4.552561862472787, 'classifier:passive_aggressive:average': 'True', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'hinge', 'classifier:passive_aggressive:tol': 0.0010187676623099157, 'preprocessor:nystroem_sampler:kernel': 'rbf', 'preprocessor:nystroem_sampler:n_components': 327, 'rescaling:quantile_transformer:n_quantiles': 1706, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'preprocessor:nystroem_sampler:gamma': 1.1112299621385848}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'multinomial_nb', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'none', 'classifier:multinomial_nb:alpha': 0.010608939015717585, 'classifier:multinomial_nb:fit_prior': 'True', 'preprocessor:select_percentile_classification:percentile': 11.267306332629467, 'preprocessor:select_percentile_classification:score_func': 'mutual_info'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'mean', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'standardize', 'classifier:adaboost:algorithm': 'SAMME.R', 'classifier:adaboost:learning_rate': 0.023979647565826937, 'classifier:adaboost:max_depth': 1, 'classifier:adaboost:n_estimators': 53, 'preprocessor:select_percentile_classification:percentile': 13.556625879583667, 'preprocessor:select_percentile_classification:score_func': 'mutual_info'}, {'balancing:strategy': 'weighting', 'categorical_encoding:__choice__': 'no_encoding', 'classifier:__choice__': 'adaboost', 'imputation:strategy': 'most_frequent', 'preprocessor:__choice__': 'polynomial', 'rescaling:__choice__': 'none', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.1617870367580794, 'classifier:adaboost:max_depth': 1, 'classifier:adaboost:n_estimators': 341, 'preprocessor:polynomial:degree': 2, 'preprocessor:polynomial:include_bias': 'True', 'preprocessor:polynomial:interaction_only': 'False'}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'qda', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'kernel_pca', 'rescaling:__choice__': 'robust_scaler', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'False', 'classifier:qda:reg_param': 0.26643166540262564, 'preprocessor:kernel_pca:kernel': 'poly', 'preprocessor:kernel_pca:n_components': 441, 'rescaling:robust_scaler:q_max': 0.8738239970410585, 'rescaling:robust_scaler:q_min': 0.24420683503325075, 'preprocessor:kernel_pca:coef0': -0.14573744293083668, 'preprocessor:kernel_pca:degree': 4, 'preprocessor:kernel_pca:gamma': 0.7901724523053332}, {'balancing:strategy': 'none', 'categorical_encoding:__choice__': 'one_hot_encoding', 'classifier:__choice__': 'libsvm_svc', 'imputation:strategy': 'median', 'preprocessor:__choice__': 'select_percentile_classification', 'rescaling:__choice__': 'quantile_transformer', 'categorical_encoding:one_hot_encoding:use_minimum_fraction': 'True', 'classifier:libsvm_svc:C': 0.36669151827332747, 'classifier:libsvm_svc:gamma': 0.017184181868799865, 'classifier:libsvm_svc:kernel': 'poly', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'False', 'classifier:libsvm_svc:tol': 4.94682281702511e-05, 'preprocessor:select_percentile_classification:percentile': 37.22642158455848, 'preprocessor:select_percentile_classification:score_func': 'chi2', 'rescaling:quantile_transformer:n_quantiles': 551, 'rescaling:quantile_transformer:output_distribution': 'uniform', 'categorical_encoding:one_hot_encoding:minimum_fraction': 0.02174193096441435, 'classifier:libsvm_svc:coef0': -0.4915955052177121, 'classifier:libsvm_svc:degree': 5}], 'rank_test_scores': array([18,  4,  2,  1, 16, 11, 10,  3, 17, 12, 14, 15,  9,  4, 13,  4,  4,
        4]), 'status': ['Success', 'Timeout', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Timeout', 'Success', 'Timeout', 'Memout', 'Timeout'], 'param_balancing:strategy': masked_array(data=['none', 'weighting', 'weighting', 'weighting', 'none',
                   'weighting', 'none', 'weighting', 'weighting',
                   'weighting', 'weighting', 'weighting', 'weighting',
                   'weighting', 'weighting', 'weighting', 'none', 'none'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='N/A',
            dtype='<U9'), 'param_categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'no_encoding', 'one_hot_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'one_hot_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'no_encoding', 'no_encoding',
                   'no_encoding', 'one_hot_encoding', 'one_hot_encoding'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='N/A',
            dtype='<U16'), 'param_classifier:__choice__': masked_array(data=['random_forest', 'random_forest', 'decision_tree',
                   'multinomial_nb', 'extra_trees', 'sgd', 'lda',
                   'decision_tree', 'random_forest', 'decision_tree',
                   'sgd', 'lda', 'passive_aggressive', 'multinomial_nb',
                   'adaboost', 'adaboost', 'qda', 'libsvm_svc'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='N/A',
            dtype='<U18'), 'param_imputation:strategy': masked_array(data=['mean', 'most_frequent', 'median', 'most_frequent',
                   'most_frequent', 'mean', 'mean', 'median', 'mean',
                   'median', 'most_frequent', 'most_frequent', 'mean',
                   'most_frequent', 'mean', 'most_frequent', 'median',
                   'median'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='N/A',
            dtype='<U13'), 'param_preprocessor:__choice__': masked_array(data=['no_preprocessing', 'polynomial', 'select_rates',
                   'select_percentile_classification',
                   'extra_trees_preproc_for_classification',
                   'nystroem_sampler', 'kitchen_sinks',
                   'feature_agglomeration',
                   'extra_trees_preproc_for_classification', 'pca',
                   'select_rates', 'select_percentile_classification',
                   'nystroem_sampler', 'select_percentile_classification',
                   'select_percentile_classification', 'polynomial',
                   'kernel_pca', 'select_percentile_classification'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='N/A',
            dtype='<U38'), 'param_rescaling:__choice__': masked_array(data=['standardize', 'quantile_transformer', 'none',
                   'robust_scaler', 'minmax', 'standardize', 'minmax',
                   'minmax', 'normalize', 'quantile_transformer',
                   'normalize', 'robust_scaler', 'quantile_transformer',
                   'none', 'standardize', 'none', 'robust_scaler',
                   'quantile_transformer'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='N/A',
            dtype='<U20'), 'param_categorical_encoding:one_hot_encoding:use_minimum_fraction': masked_array(data=['True', --, 'False', 'False', --, --, --, --, --,
                   'True', --, --, --, --, --, --, 'False', 'True'],
             mask=[False,  True, False, False,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                   False, False],
       fill_value='N/A',
            dtype='<U5'), 'param_classifier:adaboost:algorithm': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   'SAMME.R', 'SAMME', --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:adaboost:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   0.023979647565826937, 0.1617870367580794, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True],
       fill_value=1e+20), 'param_classifier:adaboost:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   1.0, 1.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True],
       fill_value=1e+20), 'param_classifier:adaboost:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   53.0, 341.0, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True, False, False,
                    True,  True],
       fill_value=1e+20), 'param_classifier:bernoulli_nb:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:bernoulli_nb:fit_prior': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:decision_tree:criterion': masked_array(data=[--, --, 'gini', --, --, --, --, 'entropy', --,
                   'entropy', --, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:max_depth_factor': masked_array(data=[--, --, 1.6678532274370363, --, --, --, --,
                   1.984401876750477, --, 0.12228625408738236, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_features': masked_array(data=[--, --, 1.0, --, --, --, --, 1.0, --, 1.0, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:max_leaf_nodes': masked_array(data=[--, --, 'None', --, --, --, --, 'None', --, 'None', --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:decision_tree:min_impurity_decrease': masked_array(data=[--, --, 0.0, --, --, --, --, 0.0, --, 0.0, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_leaf': masked_array(data=[--, --, 8.0, --, --, --, --, 9.0, --, 6.0, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_samples_split': masked_array(data=[--, --, 10.0, --, --, --, --, 11.0, --, 9.0, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, 0.0, --, --, --, --, 0.0, --, 0.0, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True, False,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:bootstrap': masked_array(data=[--, --, --, --, 'False', --, --, --, --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:criterion': masked_array(data=[--, --, --, --, 'gini', --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:max_depth': masked_array(data=[--, --, --, --, 'None', --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:max_features': masked_array(data=[--, --, --, --, 0.7742041446939053, --, --, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:max_leaf_nodes': masked_array(data=[--, --, --, --, 'None', --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:extra_trees:min_impurity_decrease': masked_array(data=[--, --, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:min_samples_leaf': masked_array(data=[--, --, --, --, 19.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:min_samples_split': masked_array(data=[--, --, --, --, 3.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, 0.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:extra_trees:n_estimators': masked_array(data=[--, --, --, --, 100.0, --, --, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:gradient_boosting:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:gradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:k_nearest_neighbors:p': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:k_nearest_neighbors:weights': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:lda:n_components': masked_array(data=[--, --, --, --, --, --, 60.0, --, --, --, --, 54.0, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:lda:shrinkage': masked_array(data=[--, --, --, --, --, --, 'manual', --, --, --, --,
                   'None', --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:lda:tol': masked_array(data=[--, --, --, --, --, --, 0.0003131204955395776, --, --,
                   --, --, 1.3124044785913153e-05, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:liblinear_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:liblinear_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:libsvm_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.36669151827332747],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:libsvm_svc:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 0.017184181868799865],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:libsvm_svc:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'poly'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:libsvm_svc:max_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, -1.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:libsvm_svc:shrinking': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'False'],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:libsvm_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 4.94682281702511e-05],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:multinomial_nb:alpha': masked_array(data=[--, --, --, 0.07664976640586513, --, --, --, --, --,
                   --, --, --, --, 0.010608939015717585, --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:multinomial_nb:fit_prior': masked_array(data=[--, --, --, 'True', --, --, --, --, --, --, --, --, --,
                   'True', --, --, --, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True,  True,  True, False,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   4.552561862472787, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:passive_aggressive:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 'True',
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, 'True',
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   'hinge', --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:passive_aggressive:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --,
                   0.0010187676623099157, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:qda:reg_param': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.26643166540262564, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_classifier:random_forest:bootstrap': masked_array(data=['True', 'True', --, --, --, --, --, --, 'True', --, --,
                   --, --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:criterion': masked_array(data=['gini', 'gini', --, --, --, --, --, --, 'gini', --, --,
                   --, --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_depth': masked_array(data=['None', 'None', --, --, --, --, --, --, 'None', --, --,
                   --, --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:max_features': masked_array(data=[0.5, 0.8149627329153046, --, --, --, --, --, --,
                   0.6144006012496559, --, --, --, --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:max_leaf_nodes': masked_array(data=['None', 'None', --, --, --, --, --, --, 'None', --, --,
                   --, --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U4'), 'param_classifier:random_forest:min_impurity_decrease': masked_array(data=[0.0, 0.0, --, --, --, --, --, --, 0.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_leaf': masked_array(data=[1.0, 15.0, --, --, --, --, --, --, 3.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_samples_split': masked_array(data=[2.0, 11.0, --, --, --, --, --, --, 17.0, --, --, --,
                   --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, 0.0, --, --, --, --, --, --, 0.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:random_forest:n_estimators': masked_array(data=[100.0, 100.0, --, --, --, --, --, --, 100.0, --, --,
                   --, --, --, --, --, --, --],
             mask=[False, False,  True,  True,  True,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:sgd:alpha': masked_array(data=[--, --, --, --, --, 4.493823213956095e-07, --, --, --,
                   --, 0.00039331218308157246, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:sgd:average': masked_array(data=[--, --, --, --, --, 'False', --, --, --, --, 'False',
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, 'True', --, --, --, --, 'True', --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:learning_rate': masked_array(data=[--, --, --, --, --, 'constant', --, --, --, --,
                   'optimal', --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:loss': masked_array(data=[--, --, --, --, --, 'log', --, --, --, --, 'hinge', --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:penalty': masked_array(data=[--, --, --, --, --, 'elasticnet', --, --, --, --,
                   'elasticnet', --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_classifier:sgd:tol': masked_array(data=[--, --, --, --, --, 0.03599422282160257, --, --, --,
                   --, 0.0031556785039332266, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:xgradient_boosting:base_score': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:booster': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:colsample_bylevel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:colsample_bytree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:max_delta_step': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:min_child_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:reg_alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:reg_lambda': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:scale_pos_weight': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:subsample': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:extra_trees_preproc_for_classification:bootstrap': masked_array(data=[--, --, --, --, 'True', --, --, --, 'False', --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:criterion': masked_array(data=[--, --, --, --, 'entropy', --, --, --, 'gini', --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:max_depth': masked_array(data=[--, --, --, --, 'None', --, --, --, 'None', --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:max_features': masked_array(data=[--, --, --, --, 0.8722905232574044, --, --, --,
                   0.18991286956921927, --, --, --, --, --, --, --, --,
                   --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': masked_array(data=[--, --, --, --, 'None', --, --, --, 'None', --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': masked_array(data=[--, --, --, --, 0.0, --, --, --, 0.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': masked_array(data=[--, --, --, --, 3.0, --, --, --, 7.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:min_samples_split': masked_array(data=[--, --, --, --, 15.0, --, --, --, 7.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, 0.0, --, --, --, 0.0, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:extra_trees_preproc_for_classification:n_estimators': masked_array(data=[--, --, --, --, 100.0, --, --, --, 100.0, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True, False,  True,  True,  True,
                   False,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:fast_ica:algorithm': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:fun': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:feature_agglomeration:affinity': masked_array(data=[--, --, --, --, --, --, --, 'euclidean', --, --, --,
                   --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:linkage': masked_array(data=[--, --, --, --, --, --, --, 'average', --, --, --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:feature_agglomeration:n_clusters': masked_array(data=[--, --, --, --, --, --, --, 212.0, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:feature_agglomeration:pooling_func': masked_array(data=[--, --, --, --, --, --, --, 'max', --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True, False,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'poly', --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:kernel_pca:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 441.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:gamma': masked_array(data=[--, --, --, --, --, --, 0.0052814377292004526, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:kitchen_sinks:n_components': masked_array(data=[--, --, --, --, --, --, 704.0, --, --, --, --, --, --,
                   --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:liblinear_svc_preprocessor:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:liblinear_svc_preprocessor:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:kernel': masked_array(data=[--, --, --, --, --, 'sigmoid', --, --, --, --, --, --,
                   'rbf', --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:nystroem_sampler:n_components': masked_array(data=[--, --, --, --, --, 3055.0, --, --, --, --, --, --,
                   327.0, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:keep_variance': masked_array(data=[--, --, --, --, --, --, --, --, --, 0.838568808742651,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:pca:whiten': masked_array(data=[--, --, --, --, --, --, --, --, --, 'False', --, --,
                   --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:degree': masked_array(data=[--, 3.0, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 2.0, --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:polynomial:include_bias': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 'True', --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:polynomial:interaction_only': masked_array(data=[--, 'False', --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 'False', --, --],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True, False,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:random_trees_embedding:bootstrap': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:random_trees_embedding:n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:select_percentile_classification:percentile': masked_array(data=[--, --, --, 84.83729797095201, --, --, --, --, --, --,
                   --, 37.39200387093366, --, 11.267306332629467,
                   13.556625879583667, --, --, 37.22642158455848],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True, False,  True, False, False,  True,
                    True, False],
       fill_value=1e+20), 'param_preprocessor:select_percentile_classification:score_func': masked_array(data=[--, --, --, 'chi2', --, --, --, --, --, --, --,
                   'f_classif', --, 'mutual_info', 'mutual_info', --, --,
                   'chi2'],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True, False,  True, False, False,  True,
                    True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:alpha': masked_array(data=[--, --, 0.2210932646345492, --, --, --, --, --, --, --,
                   0.26913637281393377, --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:select_rates:mode': masked_array(data=[--, --, 'fdr', --, --, --, --, --, --, --, 'fwe', --,
                   --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_preprocessor:select_rates:score_func': masked_array(data=[--, --, 'chi2', --, --, --, --, --, --, --,
                   'f_classif', --, --, --, --, --, --, --],
             mask=[ True,  True, False,  True,  True,  True,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, 1000.0, --, --, --, --, --, --, --, 821.0, --, --,
                   1706.0, --, --, --, --, 551.0],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_rescaling:quantile_transformer:output_distribution': masked_array(data=[--, 'uniform', --, --, --, --, --, --, --, 'normal',
                   --, --, 'uniform', --, --, --, --, 'uniform'],
             mask=[ True, False,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True, False,  True,  True,  True,
                    True, False],
       fill_value='N/A',
            dtype='<U32'), 'param_rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, 0.7145065496249109, --, --, --, --, --, --,
                   --, 0.7876502407493778, --, --, --, --,
                   0.8738239970410585, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, 0.1846218507600863, --, --, --, --, --, --,
                   --, 0.026263445252495247, --, --, --, --,
                   0.24420683503325075, --],
             mask=[ True,  True,  True, False,  True,  True,  True,  True,
                    True,  True,  True, False,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_categorical_encoding:one_hot_encoding:minimum_fraction': masked_array(data=[0.01, --, --, --, --, --, --, --, --,
                   0.09957523970227378, --, --, --, --, --, --, --,
                   0.02174193096441435],
             mask=[False,  True,  True,  True,  True,  True,  True,  True,
                    True, False,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:lda:shrinkage_factor': masked_array(data=[--, --, --, --, --, --, 0.9903747851096127, --, --, --,
                   --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True, False,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:libsvm_svc:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, -0.4915955052177121],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:libsvm_svc:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, 5.0],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True, False],
       fill_value=1e+20), 'param_classifier:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:sgd:eta0': masked_array(data=[--, --, --, --, --, 1.2287093303006888e-06, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, 0.000942838927979346, --, --, --,
                   --, 1.8310595900998648e-09, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True, False,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_classifier:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:normalize_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:rate_drop': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_classifier:xgradient_boosting:sample_type': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:fast_ica:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:kernel_pca:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, -0.14573744293083668, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 4.0, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_preprocessor:kernel_pca:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, 0.7901724523053332, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                   False,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:coef0': masked_array(data=[--, --, --, --, --, -0.3222695170511667, --, --, --,
                   --, --, --, --, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20), 'param_preprocessor:nystroem_sampler:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                   --, --, --, --],
             mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True,  True,  True,  True,  True,  True,  True,
                    True,  True],
       fill_value=1e+20,
            dtype=float64), 'param_preprocessor:nystroem_sampler:gamma': masked_array(data=[--, --, --, --, --, 4.501426188678061e-05, --, --, --,
                   --, --, --, 1.1112299621385848, --, --, --, --, --],
             mask=[ True,  True,  True,  True,  True, False,  True,  True,
                    True,  True,  True,  True, False,  True,  True,  True,
                    True,  True],
       fill_value=1e+20)}